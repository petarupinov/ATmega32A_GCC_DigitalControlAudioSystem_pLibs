
ATmega32A_GCC_DigitalControlAudioSystem_pLibs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00000d30  00000dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080012a  0080012a  00000e8e  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000066d  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e41  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ae0  00000000  00000000  0000347c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018ea  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000520  00000000  00000000  00005848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000876  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000093b  00000000  00000000  000065de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  00006f19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_3>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_4>
  14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 32       	cpi	r26, 0x2A	; 42
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e2       	ldi	r26, 0x2A	; 42
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 33       	cpi	r26, 0x3E	; 62
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9c 01 	call	0x338	; 0x338 <main>
  8a:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:
*****************************************/
void port_init(void)
{	

// PORT A connections
	DDRA  = 0b11111111;		//  PA7:U8/PGA2310,CS; PA6:U7/PGA2310,CS; PA5:CON2LCD,RS; PA4:CON2LCD,RW; PA3:CON2LCD,E; PA2:U2/74HC595,RCLK(LCD); PA1:U2/74HC595,SCLK(LCD); PA0:U2/74HC595,DATA(LCD);
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//	Interfaces: NOT USED. PULLUP DISABLE in PORTA.
  96:	1b ba       	out	0x1b, r1	; 27

// PORT B connections
	DDRB  = 0b10111000;		//  PB7:U6,U7,U8/PGA2310,SCLK; PB6:U6,U7,U8/PGA2310,SDO(CON33,36,39); PB5:U6,U7,U8/PGA2310,SDI; PB4:U12/74HC595,DATA(REL_OUT); PB3:U6/PGA2310,CS; PB2:CON8/BUTTON,"ESCAPE",INT2; PB1:CON5/BUTTON,"ON/OFF"; PB0:CON14TempSensor/DS18S20,DQ,IN/OUT;
  98:	88 eb       	ldi	r24, 0xB8	; 184
  9a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000111;		//	Interfaces: EXTERNAL INTERRUPT 2; SPI. set pullup to IRTSOP2240 / BUTTON(on/off) / DS18s20.
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	88 bb       	out	0x18, r24	; 24

// PORT C connections
	DDRC  = 0b11001100;		//  PC7:U10/74HC595,DATA(REL_IN); PC6:U10/74HC595,SCLK(REL_IN); PC5:EncoderED1112S,A; PC4:EncoderED1112S,B; PC3:U10/74HC595,RCLK(REL_IN); PC2:Q2/BD237(RELAY_POWER_SUPPLY); PC1:DS1307/24C64,I2C/SDA; PC0:DS1307/24C64,I2C/SCL;
  a0:	8c ec       	ldi	r24, 0xCC	; 204
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;		//	Interfaces: I2C. PULLUP DISABLE in PORTC.
  a4:	15 ba       	out	0x15, r1	; 21

// PORT D connections
	DDRD  = 0b11110000;		//  PD7:U12/74HC595,RCLK(REL_OUT); PD6:U12/74HC595,SCLK(REL_OUT); PD5:Q1/BD237(FAN_CONTROL_PWM); PD4:LED5/"ON/OFF AUDIO SYSTEM"; PD3:CON11/EncoderBUTTON,"MENU/ENTER"/INT1; PD2:CON12/IR/TSOP2240,/INT0; PD1:CON14/MAX232,UART/TXD; PD0:CON14/MAX232,UART/RXD;
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;		//	Interfaces: TIMER1; UART/USART; EXTERNAL INTERRUPT 0, 1. PULLUP DISABLE in PORTD.
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	82 bb       	out	0x12, r24	; 18
//	DDRD&=~_BV(0);// DDD0 = "0"  (DDD0=DDRD nulev bit) set PORTD pin0 to zero as input
//	PORTD|=_BV(0);// PD0  = "1"  Enable pull up
//	PORTD|=_BV(1);// PD1  = "1"  led
//	DDRD|=_BV(1); // DDD1 = "1"  (DDD1=DDRD parvi bit) set PORTD pin1 to one as output

}
  ae:	08 95       	ret

000000b0 <timer2_init>:
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init(void)
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  b4:	81 e8       	ldi	r24, 0x81	; 129
  b6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
  b8:	13 bc       	out	0x23, r1	; 35
}
  ba:	08 95       	ret

000000bc <timer2_on>:
/*************************************
******** DEFINITIONS OF TIMER ********
*************************************/
void timer2_on(void)	// Timer2 On
{
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  bc:	81 e8       	ldi	r24, 0x81	; 129
  be:	85 bd       	out	0x25, r24	; 37
	OCR2 = 1; // FAN PWM ON
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	83 bd       	out	0x23, r24	; 35
}
  c4:	08 95       	ret

000000c6 <timer2_off>:

void timer2_off(void)	// Timer2 Off
{
	TCCR2 = 0b00000000;		// DISABLED OCOC1A - PWM, OC1B - Disabled, normal port.
  c6:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0; // FAN PWM OFF
  c8:	13 bc       	out	0x23, r1	; 35
}
  ca:	08 95       	ret

000000cc <__vector_1>:

/*****************************************
**** EXTERNAL INTERRUPT 0 VECTOR 01 ******
*****************************************/
ISR(INT0_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
}
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_2>:

/*****************************************
**** EXTERNAL INTERRUPT 1 VECTOR 02 ******
*****************************************/
ISR(INT1_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
}
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_3>:

/*****************************************
**** EXTERNAL INTERRUPT 2 VECTOR 03 ******
*****************************************/
ISR(INT2_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
}
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_4>:

/*****************************************
**** TIMER 2 OUTPUT COMPARE VECTOR 04 ****
*****************************************/
ISR(TIMER2_COMP_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
}
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_5>:

/*****************************************
**** TIMER 2 OVERFLOW VECTOR 05 **********
*****************************************/
ISR(TIMER2_OVF_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
}
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <init_all>:
*********************************** START OF APPLICATION ************************************
********************************************************************************************/

void init_all()
{
	port_init();		// IO init and configure all port
 130:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
//	timer2_init();
	LCD_INIT();			// LCD init and reset all lcd contain
 134:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_INIT>
	pga2310_init();		// SPI init and reset all (U6, U7, U8) PGA2310 volume values to null
 138:	0e 94 10 04 	call	0x820	; 0x820 <pga2310_init>
}
 13c:	08 95       	ret

0000013e <rotaryEncoder>:
**** ROTARY ENCODER ****
***********************/
void rotaryEncoder(void)
{
	unsigned char temp = 2;
	temp = rotaryEncoderNikBarzakov(temp);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 72 05 	call	0xae4	; 0xae4 <rotaryEncoderNikBarzakov>
	if(2==temp)
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	09 f4       	brne	.+2      	; 0x14a <rotaryEncoder+0xc>
 148:	4c c0       	rjmp	.+152    	; 0x1e2 <rotaryEncoder+0xa4>
	{
		// do nothing, encoder havn't been rotated  // ne e bil zavartan
	}
	else if(1==temp)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	09 f5       	brne	.+66     	; 0x190 <rotaryEncoder+0x52>
	{
		// encoder is decrement
		volumeIndex--;	// vmesto tova moje da se vzema stoinostta direktno ot enkodera
 14e:	e0 91 2a 01 	lds	r30, 0x012A
 152:	e1 50       	subi	r30, 0x01	; 1
		if(volumeIndex < (VOLUME_MIN + 1))
		{
			volumeIndex = VOLUME_MIN;
 154:	e0 93 2a 01 	sts	0x012A, r30
		}
		PGA2310_Volume_Update(volumeValue[volumeIndex], volumeValue[volumeIndex]);
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e3 52       	subi	r30, 0x23	; 35
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	60 81       	ld	r22, Z
 160:	86 2f       	mov	r24, r22
 162:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <PGA2310_Volume_Update>
		LCD_COMMAND(LCD_SELECT_4ROW);				// select row 1
 166:	84 ed       	ldi	r24, 0xD4	; 212
 168:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
		LCD_DATA_STRING("Volume ");	// 20 symbols
 16c:	80 e6       	ldi	r24, 0x60	; 96
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>
		LCD_DATA_INT(volumeValue[volumeIndex]);	// 20 symbols
 174:	e0 91 2a 01 	lds	r30, 0x012A
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e3 52       	subi	r30, 0x23	; 35
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 81       	ld	r24, Z
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_DATA_INT>
		LCD_DATA_STRING("         L ");	// 20 symbols
 186:	88 e6       	ldi	r24, 0x68	; 104
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>
 18e:	08 95       	ret
	}
	else if(3==temp)
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	39 f5       	brne	.+78     	; 0x1e2 <rotaryEncoder+0xa4>
	{
		// encoder is increment
		volumeIndex++;	// vmesto tova moje da se vzema stoinostta direktno ot enkodera
 194:	80 91 2a 01 	lds	r24, 0x012A
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 2a 01 	sts	0x012A, r24
		if (volumeIndex > (VOLUME_MAX - 2))
 19e:	83 31       	cpi	r24, 0x13	; 19
 1a0:	18 f0       	brcs	.+6      	; 0x1a8 <rotaryEncoder+0x6a>
		{
			volumeIndex = (VOLUME_MAX - 1);
 1a2:	83 e1       	ldi	r24, 0x13	; 19
 1a4:	80 93 2a 01 	sts	0x012A, r24
		}
		PGA2310_Volume_Update(volumeValue[volumeIndex], volumeValue[volumeIndex]);
 1a8:	e0 91 2a 01 	lds	r30, 0x012A
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	e3 52       	subi	r30, 0x23	; 35
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	60 81       	ld	r22, Z
 1b4:	86 2f       	mov	r24, r22
 1b6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <PGA2310_Volume_Update>
		LCD_COMMAND(LCD_SELECT_4ROW);				// select row 1
 1ba:	84 ed       	ldi	r24, 0xD4	; 212
 1bc:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
		LCD_DATA_STRING("Volume ");	// 20 symbols
 1c0:	80 e6       	ldi	r24, 0x60	; 96
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>
		LCD_DATA_INT(volumeValue[volumeIndex]);	// 20 symbols
 1c8:	e0 91 2a 01 	lds	r30, 0x012A
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	e3 52       	subi	r30, 0x23	; 35
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 81       	ld	r24, Z
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_DATA_INT>
		LCD_DATA_STRING("         L ");	// 20 symbols
 1da:	88 e6       	ldi	r24, 0x68	; 104
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>
 1e2:	08 95       	ret

000001e4 <ampliferOff>:
/*********************
**** AMPLIFER OFF ****
*********************/
void ampliferOff(void)
{
	LCD_CLEAR_CONTAIN();
 1e4:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_CLEAR_CONTAIN>

	LCD_COMMAND(LCD_SELECT_1ROW);				// select row 1
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
	LCD_DATA_STRING("    Amplifer Off    ");	// 20 symbols
 1ee:	84 e7       	ldi	r24, 0x74	; 116
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>

	LCD_COMMAND(LCD_OFF);						// LCD ON without CURSOR
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
 1fc:	94 9a       	sbi	0x12, 4	; 18
//	_delay_ms(50);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton

//	FAN_PWM_OFF();
//			LCD_EXECUTE_COMMAND(LCD_OFF);			// LCD OFF
//	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
}
 1fe:	08 95       	ret

00000200 <ampliferOn>:
/********************
**** AMPLIFER ON ****
********************/
char ampliferOn(void)
{
	LED_low_DISPLAYLED_high();		// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
 200:	94 98       	cbi	0x12, 4	; 18

	LCD_CLEAR_CONTAIN();						// clear all contain on display
 202:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_CLEAR_CONTAIN>
	LCD_COMMAND(LCD_SELECT_1ROW);				// select row 1
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
	LCD_DATA_STRING("    Amplifer On     ");	// 20 symbols
 20c:	89 e8       	ldi	r24, 0x89	; 137
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>
	LCD_COMMAND(LCD_SELECT_2ROW);				// select row 2
 214:	80 ec       	ldi	r24, 0xC0	; 192
 216:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
	LCD_DATA_STRING("P.UPINOV  P.STOYANOV");	// 20 symbols //	LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
 21a:	8e e9       	ldi	r24, 0x9E	; 158
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
//	_delay_ms(700);									// PESHO COMMENT 14.08.2015, 21:10
//	relays_out_6ch();	// RELAYS OUT CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10

//			PGA2310_U8_SPI(volumeLeft, volumeRight);	// 'A', 'A', 0b01111110, 0b01111110
	return SUCCESS;
}
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret

0000022c <buttons_press>:
	LCD_INIT();			// LCD init and reset all lcd contain
	pga2310_init();		// SPI init and reset all (U6, U7, U8) PGA2310 volume values to null
}

void buttons_press()
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 230:	c0 e9       	ldi	r28, 0x90	; 144
 232:	d1 e0       	ldi	r29, 0x01	; 1
//	unsigned char pgaVolumeLeft, pgaVolumeRight;
//	pgaVolumeLeft = pgaVolumeRight = 0b00001111;

	while(1)
	{
		if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 0)	// obj ptr flagStatusBtnRegister from struct flagStatusBtnOnOff
 234:	b1 99       	sbic	0x16, 1	; 22
 236:	1a c0       	rjmp	.+52     	; 0x26c <buttons_press+0x40>
 238:	e0 91 36 01 	lds	r30, 0x0136
 23c:	f0 91 37 01 	lds	r31, 0x0137
 240:	80 81       	ld	r24, Z
 242:	80 fd       	sbrc	r24, 0
 244:	13 c0       	rjmp	.+38     	; 0x26c <buttons_press+0x40>
		{
			test = ampliferOn();
 246:	0e 94 00 01 	call	0x200	; 0x200 <ampliferOn>
			if(SUCCESS == test)
 24a:	88 23       	and	r24, r24
 24c:	99 f7       	brne	.-26     	; 0x234 <buttons_press+0x8>
			{
				flagStatusBits->flagPower = 1;			// filter za buton ON
 24e:	e0 91 36 01 	lds	r30, 0x0136
 252:	f0 91 37 01 	lds	r31, 0x0137
 256:	80 81       	ld	r24, Z
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	80 83       	st	Z, r24
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	97 e2       	ldi	r25, 0x27	; 39
 260:	fe 01       	movw	r30, r28
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <buttons_press+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 266:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 268:	d9 f7       	brne	.-10     	; 0x260 <buttons_press+0x34>
 26a:	e4 cf       	rjmp	.-56     	; 0x234 <buttons_press+0x8>
				_delay_ms(1000);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton
			}
		}
		else if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 1)
 26c:	b1 99       	sbic	0x16, 1	; 22
 26e:	18 c0       	rjmp	.+48     	; 0x2a0 <buttons_press+0x74>
 270:	e0 91 36 01 	lds	r30, 0x0136
 274:	f0 91 37 01 	lds	r31, 0x0137
 278:	80 81       	ld	r24, Z
 27a:	80 ff       	sbrs	r24, 0
 27c:	11 c0       	rjmp	.+34     	; 0x2a0 <buttons_press+0x74>
		{
			ampliferOff();
 27e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ampliferOff>
			flagStatusBits->flagPower = 0;			// filter za buton OFF
 282:	e0 91 36 01 	lds	r30, 0x0136
 286:	f0 91 37 01 	lds	r31, 0x0137
 28a:	80 81       	ld	r24, Z
 28c:	8e 7f       	andi	r24, 0xFE	; 254
 28e:	80 83       	st	Z, r24
 290:	88 e8       	ldi	r24, 0x88	; 136
 292:	93 e1       	ldi	r25, 0x13	; 19
 294:	fe 01       	movw	r30, r28
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <buttons_press+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29c:	d9 f7       	brne	.-10     	; 0x294 <buttons_press+0x68>
 29e:	ca cf       	rjmp	.-108    	; 0x234 <buttons_press+0x8>
			_delay_ms(500);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton

		}
		else if(BUTTON_ESC_low() && flagStatusBits->flagPower == 1)
 2a0:	b2 99       	sbic	0x16, 2	; 22
 2a2:	16 c0       	rjmp	.+44     	; 0x2d0 <buttons_press+0xa4>
 2a4:	e0 91 36 01 	lds	r30, 0x0136
 2a8:	f0 91 37 01 	lds	r31, 0x0137
 2ac:	80 81       	ld	r24, Z
 2ae:	80 ff       	sbrs	r24, 0
 2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <buttons_press+0xa4>
		{
			LCD_DATA_STRING("PRESSED BTN ESCAPE  ");	// 20 symbols
 2b2:	83 eb       	ldi	r24, 0xB3	; 179
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>
			LCD_COMMAND(LCD_ON);
 2ba:	8c e0       	ldi	r24, 0x0C	; 12
 2bc:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
 2c0:	88 e8       	ldi	r24, 0x88	; 136
 2c2:	93 e1       	ldi	r25, 0x13	; 19
 2c4:	fe 01       	movw	r30, r28
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <buttons_press+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2cc:	d9 f7       	brne	.-10     	; 0x2c4 <buttons_press+0x98>
 2ce:	b2 cf       	rjmp	.-156    	; 0x234 <buttons_press+0x8>
			_delay_ms(500);
//			volumeUp();
//			_delay_ms(200);
		}
		else if(BUTTON_ENCODER_low() && flagStatusBits->flagPower == 1)
 2d0:	83 99       	sbic	0x10, 3	; 16
 2d2:	16 c0       	rjmp	.+44     	; 0x300 <buttons_press+0xd4>
 2d4:	e0 91 36 01 	lds	r30, 0x0136
 2d8:	f0 91 37 01 	lds	r31, 0x0137
 2dc:	80 81       	ld	r24, Z
 2de:	80 ff       	sbrs	r24, 0
 2e0:	0f c0       	rjmp	.+30     	; 0x300 <buttons_press+0xd4>
		{
			LCD_DATA_STRING("PRESSED BTN ENCODER ");	// 20 symbols
 2e2:	88 ec       	ldi	r24, 0xC8	; 200
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>
			LCD_COMMAND(LCD_ON);	// LCD_COMMAND(LCD_OFF);
 2ea:	8c e0       	ldi	r24, 0x0C	; 12
 2ec:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
 2f0:	88 e8       	ldi	r24, 0x88	; 136
 2f2:	93 e1       	ldi	r25, 0x13	; 19
 2f4:	fe 01       	movw	r30, r28
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <buttons_press+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fc:	d9 f7       	brne	.-10     	; 0x2f4 <buttons_press+0xc8>
 2fe:	9a cf       	rjmp	.-204    	; 0x234 <buttons_press+0x8>
			_delay_ms(500);
//			volumeDown();
//			_delay_ms(200);

		}
		else if(BUTTON_ESC_low() && flagStatusBits->flagPower == 0)
 300:	b2 99       	sbic	0x16, 2	; 22
 302:	07 c0       	rjmp	.+14     	; 0x312 <buttons_press+0xe6>
 304:	e0 91 36 01 	lds	r30, 0x0136
 308:	f0 91 37 01 	lds	r31, 0x0137
 30c:	80 81       	ld	r24, Z
 30e:	80 ff       	sbrs	r24, 0
 310:	91 cf       	rjmp	.-222    	; 0x234 <buttons_press+0x8>
//			LCD_COMMAND(LCD_ON);
//			_delay_ms(500);
//			setupMode();
//			_delay_ms(1000);
		}
		else if(BUTTON_ENCODER_low() && flagStatusBits->flagPower == 0)
 312:	83 99       	sbic	0x10, 3	; 16
 314:	07 c0       	rjmp	.+14     	; 0x324 <buttons_press+0xf8>
 316:	e0 91 36 01 	lds	r30, 0x0136
 31a:	f0 91 37 01 	lds	r31, 0x0137
 31e:	80 81       	ld	r24, Z
 320:	80 ff       	sbrs	r24, 0
 322:	88 cf       	rjmp	.-240    	; 0x234 <buttons_press+0x8>
//			LCD_COMMAND(LCD_OFF);
//			_delay_ms(500);
//			about();
//			_delay_ms(1000);
		}
		else if(flagStatusBits->flagPower == 1)
 324:	e0 91 36 01 	lds	r30, 0x0136
 328:	f0 91 37 01 	lds	r31, 0x0137
 32c:	80 81       	ld	r24, Z
 32e:	80 ff       	sbrs	r24, 0
 330:	81 cf       	rjmp	.-254    	; 0x234 <buttons_press+0x8>
		{
			rotaryEncoder();
 332:	0e 94 9f 00 	call	0x13e	; 0x13e <rotaryEncoder>
 336:	7e cf       	rjmp	.-260    	; 0x234 <buttons_press+0x8>

00000338 <main>:
********************************************************************************************/

int main(void)
{

	init_all();				// inicializacia na vsichko
 338:	0e 94 98 00 	call	0x130	; 0x130 <init_all>

	sei();							// file "avr/interrupt.h"
 33c:	78 94       	sei
//	SREG = (1<<I);

	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
 33e:	94 9a       	sbi	0x12, 4	; 18
	while(1)
	{
//		struct flagStatusBtnOnOff flagStatusBtnRegister;	// obj flagStatusBtnRegister from struct flagStatusBtnOnOff
//		flagStatusBtnRegister.bit0 = 0;
		
		buttons_press();	// izchakvane za natiskane na buton
 340:	0e 94 16 01 	call	0x22c	; 0x22c <buttons_press>
 344:	fd cf       	rjmp	.-6      	; 0x340 <main+0x8>

00000346 <eeprom_24c64_read>:
	// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
	// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !
	
	byte eepromReceiveByte0, eepromReceiveByte1, eepromReceiveByte2, eepromReceiveByte3, eepromReceiveByte4, eepromReceiveByte5;
// EEPROM READ
	i2c_start();
 346:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);		// EEPROM 24C64 ADDRESS ACCESS WRITE
 34a:	80 ea       	ldi	r24, 0xA0	; 160
 34c:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>

	i2c_start();
 35c:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_READ);		// EEPROM 24C64 ADDRESS ACCESS READ
 360:	81 ea       	ldi	r24, 0xA1	; 161
 362:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	eepromReceiveByte0	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_read>
	eepromReceiveByte1	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_read>
	eepromReceiveByte2	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_read>
	eepromReceiveByte3	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_read>
	eepromReceiveByte4	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_read>
	eepromReceiveByte5	= i2c_read(1);				// EEPROM DATA READ BYTE	// i2c_read(1) parametar razlichen ot 0 spira komunikaciqta NACK
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_read>
	i2c_stop();
 38a:	0e 94 b7 02 	call	0x56e	; 0x56e <i2c_stop>
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte2);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte3);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte4);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte5);
*/
}
 38e:	08 95       	ret

00000390 <eeprom_24c64_write>:
// Za da se vijda tova koeto se e zapisalo v pametta, a ne ot tozi bibliotechen fail !!!!!!!!!
// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !

// EEPROM WRITE
	i2c_start();
 390:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
 394:	80 ea       	ldi	r24, 0xA0	; 160
 396:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
// Write data
	i2c_write(0x30);	// Data is stored: 0x30 - '0'
 3a6:	80 e3       	ldi	r24, 0x30	; 48
 3a8:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	i2c_write(0x31);	// Data is stored: 0x31 - '1'
 3ac:	81 e3       	ldi	r24, 0x31	; 49
 3ae:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	i2c_write(0x32);	// Data is stored: 0x32 - '2'
 3b2:	82 e3       	ldi	r24, 0x32	; 50
 3b4:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	i2c_write(0x33);	// Data is stored: 0x33 - '3'
 3b8:	83 e3       	ldi	r24, 0x33	; 51
 3ba:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	i2c_write(0x34);	// Data is stored: 0x34 - '4'
 3be:	84 e3       	ldi	r24, 0x34	; 52
 3c0:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	i2c_stop();
 3c4:	0e 94 b7 02 	call	0x56e	; 0x56e <i2c_stop>
}
 3c8:	08 95       	ret

000003ca <eeprom_24c64_reset>:

/*************************************
** RESET AND ZERO FILL EEPROM 24C64 **
*************************************/
void eeprom_24c64_reset()
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
	unsigned int i;	// 16 bits
// EEPROM WRITE
	i2c_start();
 3ce:	0e 94 b1 02 	call	0x562	; 0x562 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
 3d2:	80 ea       	ldi	r24, 0xA0	; 160
 3d4:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
 3e4:	c0 e0       	ldi	r28, 0x00	; 0
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
 3ee:	21 96       	adiw	r28, 0x01	; 1
 3f0:	8f e1       	ldi	r24, 0x1F	; 31
 3f2:	cf 3f       	cpi	r28, 0xFF	; 255
 3f4:	d8 07       	cpc	r29, r24
 3f6:	c1 f7       	brne	.-16     	; 0x3e8 <eeprom_24c64_reset+0x1e>
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
	}
	i2c_stop();
 3f8:	0e 94 b7 02 	call	0x56e	; 0x56e <i2c_stop>
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <reset>:
}
*/

unsigned char reset(void)
{
    DDRx |= (1<<Px);            //Ausgang
 402:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 404:	c0 98       	cbi	0x18, 0	; 24
 406:	80 e8       	ldi	r24, 0x80	; 128
 408:	97 e0       	ldi	r25, 0x07	; 7
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <reset+0x8>
    _delay_us(480);
	DDRx &= ~(1<<Px);
 40e:	b8 98       	cbi	0x17, 0	; 23
 410:	80 e4       	ldi	r24, 0x40	; 64
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <reset+0x12>
    _delay_us(80);
	if(!(PINx & (1<<Px)))     //Prüfe Slave-Antwort
 418:	b0 9b       	sbis	0x16, 0	; 22
 41a:	02 c0       	rjmp	.+4      	; 0x420 <reset+0x1e>
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
 420:	88 e0       	ldi	r24, 0x08	; 8
 422:	97 e0       	ldi	r25, 0x07	; 7
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <reset+0x22>
 428:	81 e0       	ldi	r24, 0x01	; 1
	}
    else
	{
        return 0;
	}
}
 42a:	08 95       	ret

0000042c <read_bit>:

unsigned char read_bit(void)
{
    DDRx |= (1<<Px);            //Ausgang
 42c:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 42e:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 430:	85 e0       	ldi	r24, 0x05	; 5
 432:	8a 95       	dec	r24
 434:	f1 f7       	brne	.-4      	; 0x432 <read_bit+0x6>
    _delay_us(1);
	DDRx &= ~(1<<Px);
 436:	b8 98       	cbi	0x17, 0	; 23
 438:	80 e4       	ldi	r24, 0x40	; 64
 43a:	8a 95       	dec	r24
 43c:	f1 f7       	brne	.-4      	; 0x43a <read_bit+0xe>
    _delay_us(12);
    if(!(PINx & (1<<Px)))       //Abtastung innerhalb von 15µs
 43e:	86 b3       	in	r24, 0x16	; 22
	}
	else
    {
		return 1;
	}
}
 440:	81 70       	andi	r24, 0x01	; 1
 442:	08 95       	ret

00000444 <write_bit>:

void write_bit(unsigned char bitval)    //kann 0 oder 1 sein
{
    DDRx |= (1<<Px);            //Ausgang
 444:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 446:	c0 98       	cbi	0x18, 0	; 24
    if(bitval)
 448:	81 11       	cpse	r24, r1
	{
        PORTx |= (1<<Px);      //H-Pegel
 44a:	c0 9a       	sbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 44c:	88 eb       	ldi	r24, 0xB8	; 184
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <write_bit+0xc>
    }
	_delay_us(110);        
    DDRx &= ~(1<<Px);
 454:	b8 98       	cbi	0x17, 0	; 23
    PORTx &= ~(1<<Px);
 456:	c0 98       	cbi	0x18, 0	; 24
}
 458:	08 95       	ret

0000045a <read_byte>:

unsigned char read_byte(void)
{
 45a:	cf 92       	push	r12
 45c:	df 92       	push	r13
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	10 e0       	ldi	r17, 0x00	; 0
 46a:	c0 e0       	ldi	r28, 0x00	; 0
 46c:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
		{
            byte |= (1<<i);
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	c9 2e       	mov	r12, r25
 472:	d1 2c       	mov	r13, r1
 474:	80 ee       	ldi	r24, 0xE0	; 224
 476:	e8 2e       	mov	r14, r24
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	f8 2e       	mov	r15, r24
unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
 47c:	0e 94 16 02 	call	0x42c	; 0x42c <read_bit>
 480:	88 23       	and	r24, r24
 482:	41 f0       	breq	.+16     	; 0x494 <read_byte+0x3a>
		{
            byte |= (1<<i);
 484:	c6 01       	movw	r24, r12
 486:	0c 2e       	mov	r0, r28
 488:	02 c0       	rjmp	.+4      	; 0x48e <read_byte+0x34>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <read_byte+0x30>
 492:	18 2b       	or	r17, r24
 494:	c7 01       	movw	r24, r14
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <read_byte+0x3c>
 49a:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
 49c:	c8 30       	cpi	r28, 0x08	; 8
 49e:	d1 05       	cpc	r29, r1
 4a0:	69 f7       	brne	.-38     	; 0x47c <read_byte+0x22>
            byte |= (1<<i);
		}
        _delay_us(120);
    }
    return byte;
}
 4a2:	81 2f       	mov	r24, r17
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	cf 90       	pop	r12
 4b2:	08 95       	ret

000004b4 <write_byte>:

void write_byte(unsigned char byte)
{
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	c0 e0       	ldi	r28, 0x00	; 0
 4be:	d0 e0       	ldi	r29, 0x00	; 0
    for(unsigned char i=0; i<8; i++)
	{
        if(byte & (1<<i))
 4c0:	08 2f       	mov	r16, r24
 4c2:	10 e0       	ldi	r17, 0x00	; 0
 4c4:	c8 01       	movw	r24, r16
 4c6:	0c 2e       	mov	r0, r28
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <write_byte+0x1a>
 4ca:	95 95       	asr	r25
 4cc:	87 95       	ror	r24
 4ce:	0a 94       	dec	r0
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <write_byte+0x16>
 4d2:	80 ff       	sbrs	r24, 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <write_byte+0x26>
		{
			write_bit(1);
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <write_byte+0x28>
		}
        else
		{
            write_bit(0);
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	0e 94 22 02 	call	0x444	; 0x444 <write_bit>
 4e0:	21 96       	adiw	r28, 0x01	; 1
    return byte;
}

void write_byte(unsigned char byte)
{
    for(unsigned char i=0; i<8; i++)
 4e2:	c8 30       	cpi	r28, 0x08	; 8
 4e4:	d1 05       	cpc	r29, r1
 4e6:	71 f7       	brne	.-36     	; 0x4c4 <write_byte+0x10>
 4e8:	80 ee       	ldi	r24, 0xE0	; 224
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <write_byte+0x38>
		{
            write_bit(0);
		}
	}
    _delay_us(120);
}  
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <wait_ready>:
	return 0;
}

void wait_ready(void)
{
	while(!(read_bit()));
 4fa:	0e 94 16 02 	call	0x42c	; 0x42c <read_bit>
 4fe:	88 23       	and	r24, r24
 500:	e1 f3       	breq	.-8      	; 0x4fa <wait_ready>
}
 502:	08 95       	ret

00000504 <read_scratchpad>:
	}
    _delay_us(120);
}  

unsigned char read_scratchpad(void)
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29

	if(reset())
 508:	0e 94 01 02 	call	0x402	; 0x402 <reset>
 50c:	88 23       	and	r24, r24
 50e:	e9 f0       	breq	.+58     	; 0x54a <read_scratchpad+0x46>
	{
		write_byte(0xCC);
 510:	8c ec       	ldi	r24, 0xCC	; 204
 512:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <write_byte>
		write_byte(0x44);
 516:	84 e4       	ldi	r24, 0x44	; 68
 518:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <write_byte>
		wait_ready();
 51c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <wait_ready>
		if(reset())
 520:	0e 94 01 02 	call	0x402	; 0x402 <reset>
 524:	88 23       	and	r24, r24
 526:	89 f0       	breq	.+34     	; 0x54a <read_scratchpad+0x46>
		{
			write_byte(0xCC);
 528:	8c ec       	ldi	r24, 0xCC	; 204
 52a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <write_byte>
			write_byte(0xBE);
 52e:	8e eb       	ldi	r24, 0xBE	; 190
 530:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <write_byte>
 534:	cb e2       	ldi	r28, 0x2B	; 43
 536:	d1 e0       	ldi	r29, 0x01	; 1
			for(unsigned char i=0; i<9; i++)
			{
				scratchpad [i] = read_byte();
 538:	0e 94 2d 02 	call	0x45a	; 0x45a <read_byte>
 53c:	89 93       	st	Y+, r24
		wait_ready();
		if(reset())
		{
			write_byte(0xCC);
			write_byte(0xBE);
			for(unsigned char i=0; i<9; i++)
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	c4 33       	cpi	r28, 0x34	; 52
 542:	d8 07       	cpc	r29, r24
 544:	c9 f7       	brne	.-14     	; 0x538 <read_scratchpad+0x34>
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	01 c0       	rjmp	.+2      	; 0x54c <read_scratchpad+0x48>
 54a:	80 e0       	ldi	r24, 0x00	; 0
			}
			return 1;
		}
	}
	return 0;
}
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <i2c_init>:
|== TWPS = 1 => (4^TWPS)= 4  // TWSR = (0<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx01 => TWSR = 1 (DEC) => 4^1 =  4 =|
|== TWPS = 2 => (4^TWPS)=16  // TWSR = (1<<TWPS1)|(0<<TWPS0) => TWSR = 0bxxxxxx10 => TWSR = 2 (DEC) => 4^2 = 16 =|
|== TWPS = 3 => (4^TWPS)=64  // TWSR = (1<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx11 => TWSR = 3 (DEC) => 4^3 = 64 =|
|===============================================================================================================*/

	TWBR = 0b00010010;	// HEX=0x12	or DEC=18	// FCPU = 16 000 000 |-> SCL = 16000000 / (16+(2*TWBR*(4^TWPS)) = 16000000 / (16+(2*18*(4))) = 16000000 / 160 = 100 000 Hz = 100 kHz
 552:	82 e1       	ldi	r24, 0x12	; 18
 554:	80 b9       	out	0x00, r24	; 0
	TWSR = (0<<TWPS1)|(1<<TWPS0);	// SCL = 16 000 000 / 64  = 250 000 = 250kHz
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	81 b9       	out	0x01, r24	; 1
	TWCR = (1<<TWEN);	//	TWCR = 0x04; // TWCR = (x<<TWINT)|(x<<TWEA)|(x<<TWSTA)|(x<<TWSTO)|(x<<TWEN)|(x<<TWIE);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz
 55a:	84 e0       	ldi	r24, 0x04	; 4
 55c:	86 bf       	out	0x36, r24	; 54
	TWDR = 0b00000000;
 55e:	13 b8       	out	0x03, r1	; 3
}
 560:	08 95       	ret

00000562 <i2c_start>:
/*****************************************
** START CONDITION OF I2C COMMUNICATION **
*****************************************/
void i2c_start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 562:	84 ea       	ldi	r24, 0xA4	; 164
 564:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
 566:	06 b6       	in	r0, 0x36	; 54
 568:	07 fe       	sbrs	r0, 7
 56a:	fd cf       	rjmp	.-6      	; 0x566 <i2c_start+0x4>
	{
	}
}
 56c:	08 95       	ret

0000056e <i2c_stop>:
/****************************************
** STOP CONDITION OF I2C COMMUNICATION **
****************************************/
void i2c_stop()
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 56e:	84 e9       	ldi	r24, 0x94	; 148
 570:	86 bf       	out	0x36, r24	; 54
}
 572:	08 95       	ret

00000574 <i2c_write>:
/*******************************************
** WRITE/SEND 1 BYTE OF I2C COMMUNICATION **
*******************************************/
void i2c_write(unsigned char data)
{
	TWDR = data;
 574:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 576:	84 e8       	ldi	r24, 0x84	; 132
 578:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
 57a:	06 b6       	in	r0, 0x36	; 54
 57c:	07 fe       	sbrs	r0, 7
 57e:	fd cf       	rjmp	.-6      	; 0x57a <i2c_write+0x6>
	{
	}
}
 580:	08 95       	ret

00000582 <i2c_read>:
/**********************************************
** READ/RECEIVE BYTE(S) OF I2C COMMUNICATION **
**********************************************/
unsigned char i2c_read(unsigned char isLast)
{
	if(isLast == 0 )
 582:	88 23       	and	r24, r24
 584:	11 f4       	brne	.+4      	; 0x58a <i2c_read+0x8>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);	// to next receive byte
 586:	84 ec       	ldi	r24, 0xC4	; 196
 588:	01 c0       	rjmp	.+2      	; 0x58c <i2c_read+0xa>
	}
	else
	{
		TWCR = (1<<TWINT)|(1<<TWEN);			// to end of communication
 58a:	84 e8       	ldi	r24, 0x84	; 132
 58c:	86 bf       	out	0x36, r24	; 54
	}
	
	while((TWCR & (1<<TWINT)) == 0)
 58e:	06 b6       	in	r0, 0x36	; 54
 590:	07 fe       	sbrs	r0, 7
 592:	fd cf       	rjmp	.-6      	; 0x58e <i2c_read+0xc>
	{
	}
	return TWDR;
 594:	83 b1       	in	r24, 0x03	; 3
}
 596:	08 95       	ret

00000598 <LCD_EXECUTE_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_EXECUTE_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
 598:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 59a:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 59c:	87 ff       	sbrs	r24, 7
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <LCD_EXECUTE_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 5a0:	d8 9a       	sbi	0x1b, 0	; 27
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <LCD_EXECUTE_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
 5a4:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 5a6:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 5a8:	9f 5f       	subi	r25, 0xFF	; 255
 5aa:	98 30       	cpi	r25, 0x08	; 8
 5ac:	11 f0       	breq	.+4      	; 0x5b2 <LCD_EXECUTE_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 5ae:	88 0f       	add	r24, r24
 5b0:	f4 cf       	rjmp	.-24     	; 0x59a <LCD_EXECUTE_COMMAND+0x2>
	}
//update from down comment
	LCD_REGSELECT_low();	// RS = 0
 5b2:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 5b4:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 5b6:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
	LCD_RCK_low();
 5b8:	da 98       	cbi	0x1b, 2	; 27
 5ba:	88 ea       	ldi	r24, 0xA8	; 168
 5bc:	92 e0       	ldi	r25, 0x02	; 2
 5be:	fc 01       	movw	r30, r24
 5c0:	31 97       	sbiw	r30, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <LCD_EXECUTE_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 5c4:	da 9a       	sbi	0x1b, 2	; 27
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <LCD_EXECUTE_COMMAND+0x2e>
	LCD_REGSELECT_low();	// RS = 0
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);			//rcall 180 us
*/
	LCD_ENABLE_low();		// EN = 0
 5ca:	db 98       	cbi	0x1b, 3	; 27
 5cc:	80 e9       	ldi	r24, 0x90	; 144
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <LCD_EXECUTE_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us

}
 5d4:	08 95       	ret

000005d6 <LCD_EXECUTE_DATA>:

/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	a8 ea       	ldi	r26, 0xA8	; 168
 5e0:	b2 e0       	ldi	r27, 0x02	; 2
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];
 5e2:	c0 e9       	ldi	r28, 0x90	; 144
 5e4:	d1 e0       	ldi	r29, 0x01	; 1
 5e6:	22 c0       	rjmp	.+68     	; 0x62c <LCD_EXECUTE_DATA+0x56>
 5e8:	fc 01       	movw	r30, r24
 5ea:	e4 0f       	add	r30, r20
 5ec:	f5 1f       	adc	r31, r21
 5ee:	e0 81       	ld	r30, Z
 5f0:	20 e0       	ldi	r18, 0x00	; 0

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
 5f2:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 5f4:	e7 ff       	sbrs	r30, 7
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <LCD_EXECUTE_DATA+0x26>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 5f8:	d8 9a       	sbi	0x1b, 0	; 27
 5fa:	01 c0       	rjmp	.+2      	; 0x5fe <LCD_EXECUTE_DATA+0x28>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 5fc:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
 5fe:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 600:	2f 5f       	subi	r18, 0xFF	; 255
 602:	28 30       	cpi	r18, 0x08	; 8
 604:	11 f0       	breq	.+4      	; 0x60a <LCD_EXECUTE_DATA+0x34>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 606:	ee 0f       	add	r30, r30
 608:	f4 cf       	rjmp	.-24     	; 0x5f2 <LCD_EXECUTE_DATA+0x1c>
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
 60a:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
 60c:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
 60e:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
 610:	da 98       	cbi	0x1b, 2	; 27
 612:	fd 01       	movw	r30, r26
 614:	31 97       	sbiw	r30, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_EXECUTE_DATA+0x3e>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
 618:	da 9a       	sbi	0x1b, 2	; 27
 61a:	fd 01       	movw	r30, r26
 61c:	31 97       	sbiw	r30, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <LCD_EXECUTE_DATA+0x46>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
 620:	db 98       	cbi	0x1b, 3	; 27
 622:	fe 01       	movw	r30, r28
 624:	31 97       	sbiw	r30, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <LCD_EXECUTE_DATA+0x4e>
/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
 628:	4f 5f       	subi	r20, 0xFF	; 255
 62a:	5f 4f       	sbci	r21, 0xFF	; 255
 62c:	46 17       	cp	r20, r22
 62e:	57 07       	cpc	r21, r23
 630:	dc f2       	brlt	.-74     	; 0x5e8 <LCD_EXECUTE_DATA+0x12>
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}

//	LCD_EXECUTE_DATA_LAST();	// flush -> posleden simvol ili gore v cikala count_ns < numsymbols+1 ili count_ns <= numsymbols
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <LCD_EXECUTE_DATA_ONE>:

/************************************************
** WRITE/TRANSMIT ONE DATA BYTE TO LCD DISPLAY **
************************************************/
void LCD_EXECUTE_DATA_ONE(unsigned char data)	// HELP: LCD_EXECUTE_DATA(unsigned char data_byte_symbols) // LCD shift left out, msb is first
{
 638:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 63a:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 63c:	87 ff       	sbrs	r24, 7
 63e:	02 c0       	rjmp	.+4      	; 0x644 <LCD_EXECUTE_DATA_ONE+0xc>
		{
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 640:	d8 9a       	sbi	0x1b, 0	; 27
 642:	01 c0       	rjmp	.+2      	; 0x646 <LCD_EXECUTE_DATA_ONE+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 644:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 646:	d9 9a       	sbi	0x1b, 1	; 27
{
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 648:	9f 5f       	subi	r25, 0xFF	; 255
 64a:	98 30       	cpi	r25, 0x08	; 8
 64c:	11 f0       	breq	.+4      	; 0x652 <LCD_EXECUTE_DATA_ONE+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 64e:	88 0f       	add	r24, r24
 650:	f4 cf       	rjmp	.-24     	; 0x63a <LCD_EXECUTE_DATA_ONE+0x2>
	}
//update from down comment
	LCD_REGSELECT_high();	// RS = 1
 652:	dd 9a       	sbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 654:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 656:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment

	LCD_RCK_low();
 658:	da 98       	cbi	0x1b, 2	; 27
 65a:	88 ea       	ldi	r24, 0xA8	; 168
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	fc 01       	movw	r30, r24
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <LCD_EXECUTE_DATA_ONE+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 664:	da 9a       	sbi	0x1b, 2	; 27
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <LCD_EXECUTE_DATA_ONE+0x2e>
	LCD_REGSELECT_high();	// RS = 1
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);
*/
	LCD_ENABLE_low();		// EN = 0
 66a:	db 98       	cbi	0x1b, 3	; 27
 66c:	80 e9       	ldi	r24, 0x90	; 144
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <LCD_EXECUTE_DATA_ONE+0x38>
	_delay_us(100);
}
 674:	08 95       	ret

00000676 <LCD_EXECUTE_DATA_LAST>:
/*****************************************************************************
** WRITE/TRANSMIT LAST DATA BYTE TO LCD DISPLAY AND FLUSH SN74HC595 BUFFER  **
*****************************************************************************/
void LCD_EXECUTE_DATA_LAST()	// flush -> izchistvane na bufer - prinuditelno izpisvane na posleden simvol
{
	LCD_ENABLE_low();
 676:	db 98       	cbi	0x1b, 3	; 27
	LCD_READWRITE_low();
 678:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
 67a:	dd 9a       	sbi	0x1b, 5	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 67c:	85 ed       	ldi	r24, 0xD5	; 213
 67e:	98 2f       	mov	r25, r24
 680:	9a 95       	dec	r25
 682:	f1 f7       	brne	.-4      	; 0x680 <LCD_EXECUTE_DATA_LAST+0xa>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
	LCD_ENABLE_high();
 684:	db 9a       	sbi	0x1b, 3	; 27
	LCD_READWRITE_low();
 686:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
 688:	dd 9a       	sbi	0x1b, 5	; 27
 68a:	8a 95       	dec	r24
 68c:	f1 f7       	brne	.-4      	; 0x68a <LCD_EXECUTE_DATA_LAST+0x14>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
}
 68e:	08 95       	ret

00000690 <LCD_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
 690:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 692:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 694:	87 ff       	sbrs	r24, 7
 696:	02 c0       	rjmp	.+4      	; 0x69c <LCD_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 698:	d8 9a       	sbi	0x1b, 0	; 27
 69a:	01 c0       	rjmp	.+2      	; 0x69e <LCD_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
 69c:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 69e:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 6a0:	9f 5f       	subi	r25, 0xFF	; 255
 6a2:	98 30       	cpi	r25, 0x08	; 8
 6a4:	11 f0       	breq	.+4      	; 0x6aa <LCD_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 6a6:	88 0f       	add	r24, r24
 6a8:	f4 cf       	rjmp	.-24     	; 0x692 <LCD_COMMAND+0x2>
	}
//update from down comment
	LCD_REGSELECT_low();	// RS = 0
 6aa:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 6ac:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 6ae:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
	LCD_RCK_low();
 6b0:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6b2:	88 ea       	ldi	r24, 0xA8	; 168
 6b4:	92 e0       	ldi	r25, 0x02	; 2
 6b6:	fc 01       	movw	r30, r24
 6b8:	31 97       	sbiw	r30, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <LCD_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 6bc:	da 9a       	sbi	0x1b, 2	; 27
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <LCD_COMMAND+0x2e>
	_delay_us(170);			//rcall 180 us

	LCD_ENABLE_low();		// EN = 0
 6c2:	db 98       	cbi	0x1b, 3	; 27
 6c4:	80 e9       	ldi	r24, 0x90	; 144
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <LCD_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us
}
 6cc:	08 95       	ret

000006ce <LCD_CLEAR_CONTAIN>:
/**************************************
** CLEAR ALL CONTAINS ON LCD DISPLAY **
**************************************/
void LCD_CLEAR_CONTAIN()
{
	LCD_COMMAND(LCD_CLEAR);						// 0b00000001	// 1. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
 6d4:	80 ec       	ldi	r24, 0xC0	; 192
 6d6:	92 e1       	ldi	r25, 0x12	; 18
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <LCD_CLEAR_CONTAIN+0xa>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
}
 6dc:	08 95       	ret

000006de <LCD_INIT>:
/**********************************
** INITIZLIZATION OF LCD DISPLAY **
**********************************/
void LCD_INIT()
{
	LCD_COMMAND(LCD_8BIT_2ROWS_FONT5X7);		// 0b00111000	// 1. Function set: 8-bit interface data (DL = 1), 2-line display (N = 1), 5 x 7 dot character font (F = 0)
 6de:	88 e3       	ldi	r24, 0x38	; 56
 6e0:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_ENTRY_MODE_INC_NOSHIFT);	// 0b00000110	// 2. Entry mode set: Increment by 1 (I/D = 1), No shift (S = 0)
 6e4:	86 e0       	ldi	r24, 0x06	; 6
 6e6:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_MOVE_FIRST);								// 3.
 6ea:	82 e0       	ldi	r24, 0x02	; 2
 6ec:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_CLEAR);						// 0b00000001	// 4. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 48 03 	call	0x690	; 0x690 <LCD_COMMAND>
 6f6:	80 ec       	ldi	r24, 0xC0	; 192
 6f8:	92 e1       	ldi	r25, 0x12	; 18
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <LCD_INIT+0x1c>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
//	LCD_COMMAND(LCD_ON_BLINK_CURSOR);			// 0b00001111	// 5. Display on/off control: Display on (D = 1), Cursor on (C = 1), Blinking on (B = 1)
//	_delay_us(40);	// 37 uS	// comment for simulation
//	LCD_COMMAND(LCD_OFF);										// 5. Display off
}
 6fe:	08 95       	ret

00000700 <LCD_DATA_STRING>:

/*********************************************************
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void LCD_DATA_STRING(char *data)
{
 700:	fc 01       	movw	r30, r24
 702:	28 ea       	ldi	r18, 0xA8	; 168
 704:	32 e0       	ldi	r19, 0x02	; 2
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
 706:	40 e9       	ldi	r20, 0x90	; 144
 708:	51 e0       	ldi	r21, 0x01	; 1
 70a:	1d c0       	rjmp	.+58     	; 0x746 <LCD_DATA_STRING+0x46>
 70c:	90 e0       	ldi	r25, 0x00	; 0
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
 70e:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 710:	87 ff       	sbrs	r24, 7
 712:	02 c0       	rjmp	.+4      	; 0x718 <LCD_DATA_STRING+0x18>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 714:	d8 9a       	sbi	0x1b, 0	; 27
 716:	01 c0       	rjmp	.+2      	; 0x71a <LCD_DATA_STRING+0x1a>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 718:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
 71a:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 71c:	9f 5f       	subi	r25, 0xFF	; 255
 71e:	98 30       	cpi	r25, 0x08	; 8
 720:	11 f0       	breq	.+4      	; 0x726 <LCD_DATA_STRING+0x26>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 722:	88 0f       	add	r24, r24
 724:	f4 cf       	rjmp	.-24     	; 0x70e <LCD_DATA_STRING+0xe>
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;
 726:	31 96       	adiw	r30, 0x01	; 1
			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
 728:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
 72a:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
 72c:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
 72e:	da 98       	cbi	0x1b, 2	; 27
 730:	c9 01       	movw	r24, r18
 732:	01 97       	sbiw	r24, 0x01	; 1
 734:	f1 f7       	brne	.-4      	; 0x732 <LCD_DATA_STRING+0x32>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
 736:	da 9a       	sbi	0x1b, 2	; 27
 738:	c9 01       	movw	r24, r18
 73a:	01 97       	sbiw	r24, 0x01	; 1
 73c:	f1 f7       	brne	.-4      	; 0x73a <LCD_DATA_STRING+0x3a>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
 73e:	db 98       	cbi	0x1b, 3	; 27
 740:	ca 01       	movw	r24, r20
 742:	01 97       	sbiw	r24, 0x01	; 1
 744:	f1 f7       	brne	.-4      	; 0x742 <LCD_DATA_STRING+0x42>
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void LCD_DATA_STRING(char *data)
{
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
 746:	80 81       	ld	r24, Z
 748:	88 23       	and	r24, r24
 74a:	01 f7       	brne	.-64     	; 0x70c <LCD_DATA_STRING+0xc>
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}
}
 74c:	08 95       	ret

0000074e <LCD_CGRAM_CUSTOM_SYMBOLS>:
	 { 0x0E, 0x1B, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },	// Battery Charging  80%	// addr40-47
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
	for(rows=0; rows<7; rows++)
 752:	10 92 3b 01 	sts	0x013B, r1
 756:	10 92 3a 01 	sts	0x013A, r1
 75a:	25 c0       	rjmp	.+74     	; 0x7a6 <LCD_CGRAM_CUSTOM_SYMBOLS+0x58>
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
 75c:	08 96       	adiw	r24, 0x08	; 8
 75e:	88 0f       	add	r24, r24
 760:	88 0f       	add	r24, r24
 762:	88 0f       	add	r24, r24
 764:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_EXECUTE_COMMAND>
 768:	c0 e0       	ldi	r28, 0x00	; 0
 76a:	d0 e0       	ldi	r29, 0x00	; 0
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
 76c:	e0 91 3a 01 	lds	r30, 0x013A
 770:	f0 91 3b 01 	lds	r31, 0x013B
 774:	83 e0       	ldi	r24, 0x03	; 3
 776:	ee 0f       	add	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	8a 95       	dec	r24
 77c:	e1 f7       	brne	.-8      	; 0x776 <LCD_CGRAM_CUSTOM_SYMBOLS+0x28>
 77e:	ec 0f       	add	r30, r28
 780:	fd 1f       	adc	r31, r29
 782:	ef 50       	subi	r30, 0x0F	; 15
 784:	ff 4f       	sbci	r31, 0xFF	; 255
 786:	80 81       	ld	r24, Z
 788:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_EXECUTE_DATA_ONE>
void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
 78c:	21 96       	adiw	r28, 0x01	; 1
 78e:	c8 30       	cpi	r28, 0x08	; 8
 790:	d1 05       	cpc	r29, r1
 792:	61 f7       	brne	.-40     	; 0x76c <LCD_CGRAM_CUSTOM_SYMBOLS+0x1e>
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
 794:	80 91 3a 01 	lds	r24, 0x013A
 798:	90 91 3b 01 	lds	r25, 0x013B
 79c:	01 96       	adiw	r24, 0x01	; 1
 79e:	90 93 3b 01 	sts	0x013B, r25
 7a2:	80 93 3a 01 	sts	0x013A, r24
 7a6:	80 91 3a 01 	lds	r24, 0x013A
 7aa:	90 91 3b 01 	lds	r25, 0x013B
 7ae:	87 30       	cpi	r24, 0x07	; 7
 7b0:	91 05       	cpc	r25, r1
 7b2:	a4 f2       	brlt	.-88     	; 0x75c <LCD_CGRAM_CUSTOM_SYMBOLS+0xe>
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
		}
	}
}
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

000007ba <LCD_DATA_INT>:
/******************************************************
** WRITE/TRANSMIT MORE DATA INT BYTES TO LCD DISPLAY **
******************************************************/
// USE THIS: lcdDataInt( (int)k + 1 );
void LCD_DATA_INT(int data)		// void lcdDataInt(const int data)
{
 7ba:	df 93       	push	r29
 7bc:	cf 93       	push	r28
 7be:	cd b7       	in	r28, 0x3d	; 61
 7c0:	de b7       	in	r29, 0x3e	; 62
 7c2:	2a 97       	sbiw	r28, 0x0a	; 10
 7c4:	0f b6       	in	r0, 0x3f	; 63
 7c6:	f8 94       	cli
 7c8:	de bf       	out	0x3e, r29	; 62
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(itoa(data, buffer, 10));	// 10 -> DECIMAL
 7ce:	be 01       	movw	r22, r28
 7d0:	6f 5f       	subi	r22, 0xFF	; 255
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	4a e0       	ldi	r20, 0x0A	; 10
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	0e 94 c0 05 	call	0xb80	; 0xb80 <itoa>
 7dc:	0e 94 80 03 	call	0x700	; 0x700 <LCD_DATA_STRING>
}
 7e0:	2a 96       	adiw	r28, 0x0a	; 10
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	cf 91       	pop	r28
 7ee:	df 91       	pop	r29
 7f0:	08 95       	ret

000007f2 <PGA2310_Volume_Update>:

/*************************************
** DEFINITION PGA2310 VOLUME UPDATE **
*************************************/
void PGA2310_Volume_Update(unsigned char pgaVolumeLeft, unsigned char pgaVolumeRight)
{
 7f2:	0f 93       	push	r16
 7f4:	1f 93       	push	r17
 7f6:	18 2f       	mov	r17, r24
 7f8:	06 2f       	mov	r16, r22
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 7fa:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 7fc:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 800:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 802:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 804:	81 2f       	mov	r24, r17
 806:	60 2f       	mov	r22, r16
 808:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 80c:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA7 - /SS ENABLE
 80e:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 810:	81 2f       	mov	r24, r17
 812:	60 2f       	mov	r22, r16
 814:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 818:	df 9a       	sbi	0x1b, 7	; 27

//	return SUCCESS;
}
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	08 95       	ret

00000820 <pga2310_init>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_init()
{
	spi_init();
 820:	0e 94 ef 04 	call	0x9de	; 0x9de <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 824:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 82e:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 830:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 83a:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 83c:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 846:	df 9a       	sbi	0x1b, 7	; 27
}
 848:	08 95       	ret

0000084a <pga2310_reset>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_reset()
{
	spi_init();
 84a:	0e 94 ef 04 	call	0x9de	; 0x9de <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 84e:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	60 e0       	ldi	r22, 0x00	; 0
 854:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 858:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 85a:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 864:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 866:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	0e 94 00 05 	call	0xa00	; 0xa00 <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 870:	df 9a       	sbi	0x1b, 7	; 27
}
 872:	08 95       	ret

00000874 <uart_init>:
{

	// Razpoznavane na baudrate (skorost): 1. Izprashta se byte. 2. Poluchava se byte. 3. Sravnqva se polucheniq byte == izprateniq byte. // This is LOOP TX->RX
	// 4. Ako byte pri sravnqvaneto e edin i sasht to skorostta e izbranata v momenta, ako byte e razlichen - da se probva sas sledvashta baudrate.

	UBRRL = 103;			// Baudrate: 9600; Parity: 0; StopBits: 1 (Error = 0.2%; 16MHz)
 874:	87 e6       	ldi	r24, 0x67	; 103
 876:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
 878:	10 bc       	out	0x20, r1	; 32

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
 87a:	86 e8       	ldi	r24, 0x86	; 134
 87c:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0b10011000;		// TXEN,RXEN,RXCIE					// Enable Uart/Usart TX and RX
 87e:	88 e9       	ldi	r24, 0x98	; 152
 880:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
 882:	1c b8       	out	0x0c, r1	; 12
}
 884:	08 95       	ret

00000886 <uart_setup>:
			
		}
	}

//	UBRRL = 103;			// Baudrate: 9600; Parity: 0; StopBits: 1 (Error = 0.2%; 16MHz)
	UBRRH = 0;
 886:	10 bc       	out	0x20, r1	; 32

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
 888:	86 e8       	ldi	r24, 0x86	; 134
 88a:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0b10011000;		// TXEN,RXEN,RXCIE					// Enable Uart/Usart TX and RX
 88c:	88 e9       	ldi	r24, 0x98	; 152
 88e:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
 890:	1c b8       	out	0x0c, r1	; 12
}
 892:	08 95       	ret

00000894 <uart_transmit>:

/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
 894:	ac 01       	movw	r20, r24
 896:	20 e0       	ldi	r18, 0x00	; 0
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	09 c0       	rjmp	.+18     	; 0x8ae <uart_transmit+0x1a>
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		//UDR = uart_data[count_ns];
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 89c:	5d 9b       	sbis	0x0b, 5	; 11
 89e:	fe cf       	rjmp	.-4      	; 0x89c <uart_transmit+0x8>
		{
		}
		UDR = uart_data[count_ns];
 8a0:	fa 01       	movw	r30, r20
 8a2:	e2 0f       	add	r30, r18
 8a4:	f3 1f       	adc	r31, r19
 8a6:	80 81       	ld	r24, Z
 8a8:	8c b9       	out	0x0c, r24	; 12
/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
 8aa:	2f 5f       	subi	r18, 0xFF	; 255
 8ac:	3f 4f       	sbci	r19, 0xFF	; 255
 8ae:	26 17       	cp	r18, r22
 8b0:	37 07       	cpc	r19, r23
 8b2:	a4 f3       	brlt	.-24     	; 0x89c <uart_transmit+0x8>
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
		{
		}
		UDR = uart_data[count_ns];
	}
}
 8b4:	08 95       	ret

000008b6 <uart_transmit_one>:
/***************************************
** TRANSMIT/SEND 1 BYTE OF UART/USART **
***************************************/
void uart_transmit_one(unsigned char uart_data)
{
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 8b6:	5d 9b       	sbis	0x0b, 5	; 11
 8b8:	fe cf       	rjmp	.-4      	; 0x8b6 <uart_transmit_one>
	{
	}
	UDR = uart_data;
 8ba:	8c b9       	out	0x0c, r24	; 12
}
 8bc:	08 95       	ret

000008be <uart_transmit_DEC_to_BCD>:

/*****************************************************************		// NOT FINISHED
** TRANSMIT/SEND 1 BYTE CONVERTED FROM DEC TO BCD OF UART/USART **		// NOT FINISHED
*****************************************************************/		// NOT FINISHED
void uart_transmit_DEC_to_BCD(unsigned char dec_to_bcd_data)
{// pravi se preobrazuvane ot DEC to BCD i preobrazuvane za izvejdane na parviq simvol s filtar
 8be:	98 2f       	mov	r25, r24
	
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 8c0:	5d 9b       	sbis	0x0b, 5	; 11
 8c2:	fe cf       	rjmp	.-4      	; 0x8c0 <uart_transmit_DEC_to_BCD+0x2>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data>>4));
 8c4:	89 2f       	mov	r24, r25
 8c6:	82 95       	swap	r24
 8c8:	8f 70       	andi	r24, 0x0F	; 15
 8ca:	80 5d       	subi	r24, 0xD0	; 208
 8cc:	8c b9       	out	0x0c, r24	; 12

	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 8ce:	5d 9b       	sbis	0x0b, 5	; 11
 8d0:	fe cf       	rjmp	.-4      	; 0x8ce <uart_transmit_DEC_to_BCD+0x10>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data & 0x0F));
 8d2:	9f 70       	andi	r25, 0x0F	; 15
 8d4:	90 5d       	subi	r25, 0xD0	; 208
 8d6:	9c b9       	out	0x0c, r25	; 12
	byte bcdToDec(byte val)
	{
  		return ( (val/16*10) + (val%16) );
	}
*/
}
 8d8:	08 95       	ret

000008da <transmitUart>:
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
 8da:	5d 9b       	sbis	0x0b, 5	; 11
 8dc:	fe cf       	rjmp	.-4      	; 0x8da <transmitUart>
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
 8de:	8c b9       	out	0x0c, r24	; 12
}
 8e0:	08 95       	ret

000008e2 <transmitUartString>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
 8e2:	fc 01       	movw	r30, r24
 8e4:	04 c0       	rjmp	.+8      	; 0x8ee <transmitUartString+0xc>
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
 8e6:	5d 9b       	sbis	0x0b, 5	; 11
 8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <transmitUartString+0x4>
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
	{
		transmitUart(*data++);
 8ea:	31 96       	adiw	r30, 0x01	; 1
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
 8ec:	8c b9       	out	0x0c, r24	; 12
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
 8ee:	80 81       	ld	r24, Z
 8f0:	88 23       	and	r24, r24
 8f2:	c9 f7       	brne	.-14     	; 0x8e6 <transmitUartString+0x4>
	{
		transmitUart(*data++);
	}
}
 8f4:	08 95       	ret

000008f6 <receiveUart>:
/**************************************************		// NOT FINISHED
** RECEIVE/READ unsigned char BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
unsigned char receiveUart(void)
{
	while (!(UCSRA & (1<<RXC)))
 8f6:	5f 9b       	sbis	0x0b, 7	; 11
 8f8:	fe cf       	rjmp	.-4      	; 0x8f6 <receiveUart>
	{};							/* Wait for data to be received */
	return UDR;					/* Get and return received data from buffer */
 8fa:	8c b1       	in	r24, 0x0c	; 12
}
 8fc:	08 95       	ret

000008fe <transmitUartLong>:
/******************************************		// NOT FINISHED
** TRANSMIT/SEND long BYTE OF UART/USART **		// NOT FINISHED
******************************************/		// NOT FINISHED
// USE THIS: transmitUartLong( (long)k + 1 );
void transmitUartLong(long data)		// void transmitUartLong(const long data)
{
 8fe:	df 93       	push	r29
 900:	cf 93       	push	r28
 902:	cd b7       	in	r28, 0x3d	; 61
 904:	de b7       	in	r29, 0x3e	; 62
 906:	2a 97       	sbiw	r28, 0x0a	; 10
 908:	0f b6       	in	r0, 0x3f	; 63
 90a:	f8 94       	cli
 90c:	de bf       	out	0x3e, r29	; 62
 90e:	0f be       	out	0x3f, r0	; 63
 910:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ltoa(data, buffer, 10));		// 10 -> DECIMAL
 912:	ae 01       	movw	r20, r28
 914:	4f 5f       	subi	r20, 0xFF	; 255
 916:	5f 4f       	sbci	r21, 0xFF	; 255
 918:	2a e0       	ldi	r18, 0x0A	; 10
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <ltoa>
 920:	0e 94 71 04 	call	0x8e2	; 0x8e2 <transmitUartString>
}
 924:	2a 96       	adiw	r28, 0x0a	; 10
 926:	0f b6       	in	r0, 0x3f	; 63
 928:	f8 94       	cli
 92a:	de bf       	out	0x3e, r29	; 62
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	cd bf       	out	0x3d, r28	; 61
 930:	cf 91       	pop	r28
 932:	df 91       	pop	r29
 934:	08 95       	ret

00000936 <transmitUartULong>:
/***************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned long BYTE OF UART/USART **		// NOT FINISHED
***************************************************/		// NOT FINISHED
// USE THIS: transmitUartULong( (unsigned long)k + 1 );
void transmitUartULong(unsigned long data)		// void transmitUartULong(const unsigned long data)
{
 936:	df 93       	push	r29
 938:	cf 93       	push	r28
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
 93e:	2a 97       	sbiw	r28, 0x0a	; 10
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ultoa(data, buffer, 10));		// 10 -> DECIMAL
 94a:	ae 01       	movw	r20, r28
 94c:	4f 5f       	subi	r20, 0xFF	; 255
 94e:	5f 4f       	sbci	r21, 0xFF	; 255
 950:	2a e0       	ldi	r18, 0x0A	; 10
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	0e 94 15 06 	call	0xc2a	; 0xc2a <ultoa>
 958:	0e 94 71 04 	call	0x8e2	; 0x8e2 <transmitUartString>
}
 95c:	2a 96       	adiw	r28, 0x0a	; 10
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	cf 91       	pop	r28
 96a:	df 91       	pop	r29
 96c:	08 95       	ret

0000096e <transmitUartInt>:
/*****************************************		// NOT FINISHED
** TRANSMIT/SEND int BYTE OF UART/USART **		// NOT FINISHED
*****************************************/		// NOT FINISHED
// USE THIS: transmitUartInt( (int)k + 1 );
void transmitUartInt(int data)		// void transmitUartInt(const int data)
{
 96e:	df 93       	push	r29
 970:	cf 93       	push	r28
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62
 976:	2a 97       	sbiw	r28, 0x0a	; 10
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	f8 94       	cli
 97c:	de bf       	out	0x3e, r29	; 62
 97e:	0f be       	out	0x3f, r0	; 63
 980:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(itoa(data, buffer, 10));		// 10 -> DECIMAL
 982:	be 01       	movw	r22, r28
 984:	6f 5f       	subi	r22, 0xFF	; 255
 986:	7f 4f       	sbci	r23, 0xFF	; 255
 988:	4a e0       	ldi	r20, 0x0A	; 10
 98a:	50 e0       	ldi	r21, 0x00	; 0
 98c:	0e 94 c0 05 	call	0xb80	; 0xb80 <itoa>
 990:	0e 94 71 04 	call	0x8e2	; 0x8e2 <transmitUartString>
}
 994:	2a 96       	adiw	r28, 0x0a	; 10
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	f8 94       	cli
 99a:	de bf       	out	0x3e, r29	; 62
 99c:	0f be       	out	0x3f, r0	; 63
 99e:	cd bf       	out	0x3d, r28	; 61
 9a0:	cf 91       	pop	r28
 9a2:	df 91       	pop	r29
 9a4:	08 95       	ret

000009a6 <transmitUartUInt>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned int BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: transmitUartUInt( (unsigned int)k + 1 );
void transmitUartUInt(unsigned int data)		// void transmitUartUInt(const unsigned int data)
{
 9a6:	df 93       	push	r29
 9a8:	cf 93       	push	r28
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
 9ae:	2a 97       	sbiw	r28, 0x0a	; 10
 9b0:	0f b6       	in	r0, 0x3f	; 63
 9b2:	f8 94       	cli
 9b4:	de bf       	out	0x3e, r29	; 62
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(utoa(data, buffer, 10));		// 10 -> DECIMAL
 9ba:	be 01       	movw	r22, r28
 9bc:	6f 5f       	subi	r22, 0xFF	; 255
 9be:	7f 4f       	sbci	r23, 0xFF	; 255
 9c0:	4a e0       	ldi	r20, 0x0A	; 10
 9c2:	50 e0       	ldi	r21, 0x00	; 0
 9c4:	0e 94 3a 06 	call	0xc74	; 0xc74 <utoa>
 9c8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <transmitUartString>
}
 9cc:	2a 96       	adiw	r28, 0x0a	; 10
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	de bf       	out	0x3e, r29	; 62
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	cd bf       	out	0x3d, r28	; 61
 9d8:	cf 91       	pop	r28
 9da:	df 91       	pop	r29
 9dc:	08 95       	ret

000009de <spi_init>:
/**************************
** INITIZLIZATION OF SPI **
***************************/
void spi_init()
{
	SPSR = (0<<SPIF)|(0<<WCOL)|(0<<SPI2X);
 9de:	1e b8       	out	0x0e, r1	; 14
//	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);			//0b01010010	// SPR1   = 1 - 16 000 000 / 64  = 250 000 = 250kHz  // KOMENTAR ZARADI SIMULACIQTA - PROTEUS BLOKIRANE ZARADI BIT V REGISTAR
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz	 // KAKVA KOMBINACIQ OT 4-te BITa VODI DO RAZBLOKIRANETO ???
 9e0:	83 e5       	ldi	r24, 0x53	; 83
 9e2:	8d b9       	out	0x0d, r24	; 13
	SPDR = 0b00000000;
 9e4:	1f b8       	out	0x0f, r1	; 15

	PGA2310_U8_SPI_CS_high();	// /SS - DISABLE
	PGA2310_U8_SPI(0b00000000, 0b00000000);
	*/

	SPCR = (0<<SPE);
 9e6:	1d b8       	out	0x0d, r1	; 13
}
 9e8:	08 95       	ret

000009ea <spi_start>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 9ea:	83 e5       	ldi	r24, 0x53	; 83
 9ec:	8d b9       	out	0x0d, r24	; 13
}
 9ee:	08 95       	ret

000009f0 <spi_stop>:
/**************************************
** DEFINITION SPI FUNCTION STOP ONLY **
**************************************/
void spi_stop()
{
	SPCR = (0<<SPE);
 9f0:	1d b8       	out	0x0d, r1	; 13
}
 9f2:	08 95       	ret

000009f4 <spi_write_one_byte>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 9f4:	93 e5       	ldi	r25, 0x53	; 83
 9f6:	9d b9       	out	0x0d, r25	; 13
void spi_write_one_byte(unsigned char data)	// void PGA2310_U7_SPI(byte volume_left, byte volume_right)	//PGA2310_U7_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data;				//volume_right;
 9f8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
 9fa:	77 9b       	sbis	0x0e, 7	; 14
 9fc:	fe cf       	rjmp	.-4      	; 0x9fa <spi_write_one_byte+0x6>
	{
	}
}
 9fe:	08 95       	ret

00000a00 <spi_write_two_bytes>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 a00:	93 e5       	ldi	r25, 0x53	; 83
 a02:	9d b9       	out	0x0d, r25	; 13
void spi_write_two_bytes(unsigned char data1, unsigned char data2)	// void PGA2310_U6_SPI(byte volume_left, byte volume_right)	//PGA2310_U6_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data1;				//volume_left;
 a04:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
 a06:	77 9b       	sbis	0x0e, 7	; 14
 a08:	fe cf       	rjmp	.-4      	; 0xa06 <spi_write_two_bytes+0x6>
	{
	}

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data2;				//volume_right;
 a0a:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)))
 a0c:	77 9b       	sbis	0x0e, 7	; 14
 a0e:	fe cf       	rjmp	.-4      	; 0xa0c <spi_write_two_bytes+0xc>
	{
	}
}
 a10:	08 95       	ret

00000a12 <spi_write_more_bytes>:

/*********************************************
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
 a12:	fc 01       	movw	r30, r24
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 a14:	93 e5       	ldi	r25, 0x53	; 83
 a16:	06 c0       	rjmp	.+12     	; 0xa24 <spi_write_more_bytes+0x12>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
 a18:	31 96       	adiw	r30, 0x01	; 1
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 a1a:	9d b9       	out	0x0d, r25	; 13
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
	{
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
		spi_start();
		SPDR = *data;			//volume_left;
 a1c:	80 81       	ld	r24, Z
 a1e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)))
 a20:	77 9b       	sbis	0x0e, 7	; 14
 a22:	fe cf       	rjmp	.-4      	; 0xa20 <spi_write_more_bytes+0xe>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
 a24:	80 81       	ld	r24, Z
 a26:	88 23       	and	r24, r24
 a28:	b9 f7       	brne	.-18     	; 0xa18 <spi_write_more_bytes+0x6>
		SPDR = *data;			//volume_left;
		while(!(SPSR & (1<<SPIF)))
		{
		}
	}
}
 a2a:	08 95       	ret

00000a2c <spi_read_more_bytes>:
unsigned char spi_read_more_bytes()	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
	unsigned char data = 0b00000000;
	//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data;			//volume_left;
 a2c:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)))
 a2e:	77 9b       	sbis	0x0e, 7	; 14
 a30:	fe cf       	rjmp	.-4      	; 0xa2e <spi_read_more_bytes+0x2>
	{
	}
	return data;
}
 a32:	80 e0       	ldi	r24, 0x00	; 0
 a34:	08 95       	ret

00000a36 <decToBcd>:

/**************************************************************
**** CONVERT NORMAL DECIMAL NUMBERS TO BINARY CODED DECIMAL ***
**************************************************************/
unsigned char decToBcd(unsigned char val)
{
 a36:	48 2f       	mov	r20, r24
 a38:	6a e0       	ldi	r22, 0x0A	; 10
 a3a:	0e 94 b4 05 	call	0xb68	; 0xb68 <__udivmodqi4>
 a3e:	28 2f       	mov	r18, r24
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	84 e0       	ldi	r24, 0x04	; 4
 a44:	22 0f       	add	r18, r18
 a46:	33 1f       	adc	r19, r19
 a48:	8a 95       	dec	r24
 a4a:	e1 f7       	brne	.-8      	; 0xa44 <decToBcd+0xe>
 a4c:	84 2f       	mov	r24, r20
 a4e:	0e 94 b4 05 	call	0xb68	; 0xb68 <__udivmodqi4>
	return ( (val/10*16) + (val%10) );	// Get DEC format -> convert DEC to HEX
}
 a52:	89 2f       	mov	r24, r25
 a54:	82 0f       	add	r24, r18
 a56:	08 95       	ret

00000a58 <bcdToDec>:

/**************************************************************
**** CONVERT BINARY CODED DECIMAL TO NORMAL DECIMAL NUMBERS ***
**************************************************************/
unsigned char bcdToDec(unsigned char val)
{
 a58:	28 2f       	mov	r18, r24
 a5a:	22 95       	swap	r18
 a5c:	2f 70       	andi	r18, 0x0F	; 15
 a5e:	9a e0       	ldi	r25, 0x0A	; 10
 a60:	29 9f       	mul	r18, r25
 a62:	90 01       	movw	r18, r0
 a64:	11 24       	eor	r1, r1
 a66:	8f 70       	andi	r24, 0x0F	; 15
	return ( (val/16*10) + (val%16) );	// Get HEX format -> convert HEX to DEC
}
 a68:	82 0f       	add	r24, r18
 a6a:	08 95       	ret

00000a6c <shiftRightOutLsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
 a6c:	a0 9a       	sbi	0x14, 0	; 20
 a6e:	94 e4       	ldi	r25, 0x44	; 68
 a70:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regALSB & 0x01)	// maska & za log "1" na LSB 0b00000001
 a72:	90 ff       	sbrs	r25, 0
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <shiftRightOutLsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v LSB
 a76:	a8 9a       	sbi	0x15, 0	; 21
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <shiftRightOutLsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
 a7a:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 a7c:	8f 5f       	subi	r24, 0xFF	; 255
 a7e:	88 30       	cpi	r24, 0x08	; 8
 a80:	11 f0       	breq	.+4      	; 0xa86 <shiftRightOutLsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
		}
		
		regALSB = regALSB >> 1;	// shiftvane na >> nadqsno
 a82:	96 95       	lsr	r25
 a84:	f6 cf       	rjmp	.-20     	; 0xa72 <shiftRightOutLsbFirst+0x6>
 a86:	08 95       	ret

00000a88 <shiftLeftOutMsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
 a88:	a0 9a       	sbi	0x14, 0	; 20
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	84 e4       	ldi	r24, 0x44	; 68

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regAMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 a8e:	87 ff       	sbrs	r24, 7
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <shiftLeftOutMsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v MSB
 a92:	a8 9a       	sbi	0x15, 0	; 21
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <shiftLeftOutMsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
 a96:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 a98:	9f 5f       	subi	r25, 0xFF	; 255
 a9a:	98 30       	cpi	r25, 0x08	; 8
 a9c:	11 f0       	breq	.+4      	; 0xaa2 <shiftLeftOutMsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
		}
		
		regAMSB = regAMSB << 1;	// shiftvane na << nalqvo
 a9e:	88 0f       	add	r24, r24
 aa0:	f6 cf       	rjmp	.-20     	; 0xa8e <shiftLeftOutMsbFirst+0x6>
 aa2:	08 95       	ret

00000aa4 <shiftRightInLsbFirst>:
void shiftRightInLsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
 aa4:	a0 98       	cbi	0x14, 0	; 20
 aa6:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
 aa8:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 aaa:	8f 5f       	subi	r24, 0xFF	; 255
 aac:	88 30       	cpi	r24, 0x08	; 8
 aae:	e1 f7       	brne	.-8      	; 0xaa8 <shiftRightInLsbFirst+0x4>
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
	}

}
 ab0:	08 95       	ret

00000ab2 <shiftLeftInMsbFirst>:
void shiftLeftInMsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
 ab2:	a0 98       	cbi	0x14, 0	; 20
 ab4:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
 ab6:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 ab8:	8f 5f       	subi	r24, 0xFF	; 255
 aba:	88 30       	cpi	r24, 0x08	; 8
 abc:	e1 f7       	brne	.-8      	; 0xab6 <shiftLeftInMsbFirst+0x4>
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
	}

}
 abe:	08 95       	ret

00000ac0 <delay_ms>:

/*************************************************************
*********** FUNCTION SOFTWARE DELAY IN MILISECONDS ***********
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
 ac0:	40 e0       	ldi	r20, 0x00	; 0
 ac2:	50 e0       	ldi	r21, 0x00	; 0
 ac4:	0b c0       	rjmp	.+22     	; 0xadc <delay_ms+0x1c>
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
 ac6:	20 e0       	ldi	r18, 0x00	; 0
 ac8:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(j=0;j<100;j++)
		{
		  asm("nop");
 aca:	00 00       	nop
		  asm("nop");
 acc:	00 00       	nop
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
	{
		for(j=0;j<100;j++)
 ace:	2f 5f       	subi	r18, 0xFF	; 255
 ad0:	3f 4f       	sbci	r19, 0xFF	; 255
 ad2:	24 36       	cpi	r18, 0x64	; 100
 ad4:	31 05       	cpc	r19, r1
 ad6:	c9 f7       	brne	.-14     	; 0xaca <delay_ms+0xa>
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
 ad8:	4f 5f       	subi	r20, 0xFF	; 255
 ada:	5f 4f       	sbci	r21, 0xFF	; 255
 adc:	48 17       	cp	r20, r24
 ade:	59 07       	cpc	r21, r25
 ae0:	94 f3       	brlt	.-28     	; 0xac6 <delay_ms+0x6>
		{
		  asm("nop");
		  asm("nop");
		}
	}
}
 ae2:	08 95       	ret

00000ae4 <rotaryEncoderNikBarzakov>:
** READ/SCAN ROTARY ENCODER OF NIK BARZAKOV **
*********************************************/
unsigned char rotaryEncoderNikBarzakov(unsigned char tempEncoder)
{
//	char tempEncoder = 0;
	if((ENCODER_A_low()) && (ENCODER_B_low()))			// A0, B0
 ae4:	9d 99       	sbic	0x13, 5	; 19
 ae6:	0c c0       	rjmp	.+24     	; 0xb00 <rotaryEncoderNikBarzakov+0x1c>
 ae8:	9c 99       	sbic	0x13, 4	; 19
 aea:	0a c0       	rjmp	.+20     	; 0xb00 <rotaryEncoderNikBarzakov+0x1c>
 aec:	e8 ec       	ldi	r30, 0xC8	; 200
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	31 97       	sbiw	r30, 0x01	; 1
 af2:	f1 f7       	brne	.-4      	; 0xaf0 <rotaryEncoderNikBarzakov+0xc>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_high()) && (ENCODER_B_low()))		// A1, B0
 af4:	9d 9b       	sbis	0x13, 5	; 19
 af6:	10 c0       	rjmp	.+32     	; 0xb18 <rotaryEncoderNikBarzakov+0x34>
 af8:	9c 99       	sbic	0x13, 4	; 19
 afa:	0e c0       	rjmp	.+28     	; 0xb18 <rotaryEncoderNikBarzakov+0x34>
		{
			// ---> Clockwise; Zavartane po posoka na chasovnikovata strelka.
// VOLUME UP
//			tempEncoder++;
			tempEncoder++;
 afc:	8f 5f       	subi	r24, 0xFF	; 255
 afe:	08 95       	ret
			// ---> Clockwise; Zavartane po posoka na chasovnikovata strelka.
		}
	}
	else if((ENCODER_A_high()) && (ENCODER_B_low()))	// A1, B0
 b00:	9d 9b       	sbis	0x13, 5	; 19
 b02:	0a c0       	rjmp	.+20     	; 0xb18 <rotaryEncoderNikBarzakov+0x34>
 b04:	9c 99       	sbic	0x13, 4	; 19
 b06:	08 c0       	rjmp	.+16     	; 0xb18 <rotaryEncoderNikBarzakov+0x34>
 b08:	e8 ec       	ldi	r30, 0xC8	; 200
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	31 97       	sbiw	r30, 0x01	; 1
 b0e:	f1 f7       	brne	.-4      	; 0xb0c <rotaryEncoderNikBarzakov+0x28>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
 b10:	9d 99       	sbic	0x13, 5	; 19
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <rotaryEncoderNikBarzakov+0x34>
 b14:	9c 9b       	sbis	0x13, 4	; 19
		{
			// <--- Counter Clockwise; Zavartane po posoka obratno na chasovnikovata strelka.
// VOLUME DOWN
//			tempEncoder--;
			tempEncoder--;
 b16:	81 50       	subi	r24, 0x01	; 1
	{
			// do nothing
	}
	
	return tempEncoder;// tempEncoder;
}
 b18:	08 95       	ret

00000b1a <rotaryEncoderVer1>:
** READ/SCAN ROTARY ENCODER VERSION 1 / MODEL 1 **
*************************************************/
unsigned char rotaryEncoderVer1(unsigned char tempEncoder)	// Check imediate now bits in PIN register.
{
//	char tempEncoder = 0;							// A1, B1
	if((ENCODER_A_low()) && (ENCODER_B_high()))			// A0, B1
 b1a:	9d 99       	sbic	0x13, 5	; 19
 b1c:	0c c0       	rjmp	.+24     	; 0xb36 <rotaryEncoderVer1+0x1c>
 b1e:	9c 9b       	sbis	0x13, 4	; 19
 b20:	0a c0       	rjmp	.+20     	; 0xb36 <rotaryEncoderVer1+0x1c>
 b22:	e8 ec       	ldi	r30, 0xC8	; 200
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	31 97       	sbiw	r30, 0x01	; 1
 b28:	f1 f7       	brne	.-4      	; 0xb26 <rotaryEncoderVer1+0xc>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
 b2a:	9d 99       	sbic	0x13, 5	; 19
 b2c:	10 c0       	rjmp	.+32     	; 0xb4e <rotaryEncoderVer1+0x34>
 b2e:	9c 99       	sbic	0x13, 4	; 19
 b30:	0e c0       	rjmp	.+28     	; 0xb4e <rotaryEncoderVer1+0x34>
		{												// A1, B0
			tempEncoder++;
 b32:	8f 5f       	subi	r24, 0xFF	; 255
 b34:	08 95       	ret
//			PORTD = volumeMassive[volumeIndex];
			// ---> Clockwise; Zavartane po posoka na chasovnikovata strelka.
		}

	}													// A1. B1
	else if((ENCODER_A_high()) && (ENCODER_B_low()))	// A1, B0
 b36:	9d 9b       	sbis	0x13, 5	; 19
 b38:	0a c0       	rjmp	.+20     	; 0xb4e <rotaryEncoderVer1+0x34>
 b3a:	9c 99       	sbic	0x13, 4	; 19
 b3c:	08 c0       	rjmp	.+16     	; 0xb4e <rotaryEncoderVer1+0x34>
 b3e:	e8 ec       	ldi	r30, 0xC8	; 200
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	31 97       	sbiw	r30, 0x01	; 1
 b44:	f1 f7       	brne	.-4      	; 0xb42 <rotaryEncoderVer1+0x28>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
 b46:	9d 99       	sbic	0x13, 5	; 19
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <rotaryEncoderVer1+0x34>
 b4a:	9c 9b       	sbis	0x13, 4	; 19
		{												// A0, B1
			tempEncoder--;
 b4c:	81 50       	subi	r24, 0x01	; 1
	else
	{
			// do nothing
	}
	return tempEncoder;
}
 b4e:	08 95       	ret

00000b50 <rotaryEncoderVer2>:
 b50:	28 ec       	ldi	r18, 0xC8	; 200
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	f9 01       	movw	r30, r18
 b56:	31 97       	sbiw	r30, 0x01	; 1
 b58:	f1 f7       	brne	.-4      	; 0xb56 <rotaryEncoderVer2+0x6>
 b5a:	f9 01       	movw	r30, r18
 b5c:	31 97       	sbiw	r30, 0x01	; 1
 b5e:	f1 f7       	brne	.-4      	; 0xb5c <rotaryEncoderVer2+0xc>
 b60:	f9 01       	movw	r30, r18
 b62:	31 97       	sbiw	r30, 0x01	; 1
 b64:	f1 f7       	brne	.-4      	; 0xb62 <rotaryEncoderVer2+0x12>
	else
	{
		// do nothing
	}
	return tempEncoder;
}
 b66:	08 95       	ret

00000b68 <__udivmodqi4>:
 b68:	99 1b       	sub	r25, r25
 b6a:	79 e0       	ldi	r23, 0x09	; 9
 b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__udivmodqi4_ep>

00000b6e <__udivmodqi4_loop>:
 b6e:	99 1f       	adc	r25, r25
 b70:	96 17       	cp	r25, r22
 b72:	08 f0       	brcs	.+2      	; 0xb76 <__udivmodqi4_ep>
 b74:	96 1b       	sub	r25, r22

00000b76 <__udivmodqi4_ep>:
 b76:	88 1f       	adc	r24, r24
 b78:	7a 95       	dec	r23
 b7a:	c9 f7       	brne	.-14     	; 0xb6e <__udivmodqi4_loop>
 b7c:	80 95       	com	r24
 b7e:	08 95       	ret

00000b80 <itoa>:
 b80:	fb 01       	movw	r30, r22
 b82:	9f 01       	movw	r18, r30
 b84:	e8 94       	clt
 b86:	42 30       	cpi	r20, 0x02	; 2
 b88:	c4 f0       	brlt	.+48     	; 0xbba <itoa+0x3a>
 b8a:	45 32       	cpi	r20, 0x25	; 37
 b8c:	b4 f4       	brge	.+44     	; 0xbba <itoa+0x3a>
 b8e:	4a 30       	cpi	r20, 0x0A	; 10
 b90:	29 f4       	brne	.+10     	; 0xb9c <itoa+0x1c>
 b92:	97 fb       	bst	r25, 7
 b94:	1e f4       	brtc	.+6      	; 0xb9c <itoa+0x1c>
 b96:	90 95       	com	r25
 b98:	81 95       	neg	r24
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	64 2f       	mov	r22, r20
 b9e:	77 27       	eor	r23, r23
 ba0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__udivmodhi4>
 ba4:	80 5d       	subi	r24, 0xD0	; 208
 ba6:	8a 33       	cpi	r24, 0x3A	; 58
 ba8:	0c f0       	brlt	.+2      	; 0xbac <itoa+0x2c>
 baa:	89 5d       	subi	r24, 0xD9	; 217
 bac:	81 93       	st	Z+, r24
 bae:	cb 01       	movw	r24, r22
 bb0:	00 97       	sbiw	r24, 0x00	; 0
 bb2:	a1 f7       	brne	.-24     	; 0xb9c <itoa+0x1c>
 bb4:	16 f4       	brtc	.+4      	; 0xbba <itoa+0x3a>
 bb6:	5d e2       	ldi	r21, 0x2D	; 45
 bb8:	51 93       	st	Z+, r21
 bba:	10 82       	st	Z, r1
 bbc:	c9 01       	movw	r24, r18
 bbe:	0c 94 50 06 	jmp	0xca0	; 0xca0 <strrev>

00000bc2 <ltoa>:
 bc2:	fa 01       	movw	r30, r20
 bc4:	cf 93       	push	r28
 bc6:	ff 93       	push	r31
 bc8:	ef 93       	push	r30
 bca:	22 30       	cpi	r18, 0x02	; 2
 bcc:	44 f1       	brlt	.+80     	; 0xc1e <ltoa+0x5c>
 bce:	25 32       	cpi	r18, 0x25	; 37
 bd0:	34 f5       	brge	.+76     	; 0xc1e <ltoa+0x5c>
 bd2:	c2 2f       	mov	r28, r18
 bd4:	e8 94       	clt
 bd6:	ca 30       	cpi	r28, 0x0A	; 10
 bd8:	49 f4       	brne	.+18     	; 0xbec <ltoa+0x2a>
 bda:	97 fb       	bst	r25, 7
 bdc:	3e f4       	brtc	.+14     	; 0xbec <ltoa+0x2a>
 bde:	90 95       	com	r25
 be0:	80 95       	com	r24
 be2:	70 95       	com	r23
 be4:	61 95       	neg	r22
 be6:	7f 4f       	sbci	r23, 0xFF	; 255
 be8:	8f 4f       	sbci	r24, 0xFF	; 255
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	2c 2f       	mov	r18, r28
 bee:	33 27       	eor	r19, r19
 bf0:	44 27       	eor	r20, r20
 bf2:	55 27       	eor	r21, r21
 bf4:	ff 93       	push	r31
 bf6:	ef 93       	push	r30
 bf8:	0e 94 74 06 	call	0xce8	; 0xce8 <__udivmodsi4>
 bfc:	ef 91       	pop	r30
 bfe:	ff 91       	pop	r31
 c00:	60 5d       	subi	r22, 0xD0	; 208
 c02:	6a 33       	cpi	r22, 0x3A	; 58
 c04:	0c f0       	brlt	.+2      	; 0xc08 <ltoa+0x46>
 c06:	69 5d       	subi	r22, 0xD9	; 217
 c08:	61 93       	st	Z+, r22
 c0a:	b9 01       	movw	r22, r18
 c0c:	ca 01       	movw	r24, r20
 c0e:	60 50       	subi	r22, 0x00	; 0
 c10:	70 40       	sbci	r23, 0x00	; 0
 c12:	80 40       	sbci	r24, 0x00	; 0
 c14:	90 40       	sbci	r25, 0x00	; 0
 c16:	51 f7       	brne	.-44     	; 0xbec <ltoa+0x2a>
 c18:	16 f4       	brtc	.+4      	; 0xc1e <ltoa+0x5c>
 c1a:	cd e2       	ldi	r28, 0x2D	; 45
 c1c:	c1 93       	st	Z+, r28
 c1e:	10 82       	st	Z, r1
 c20:	8f 91       	pop	r24
 c22:	9f 91       	pop	r25
 c24:	cf 91       	pop	r28
 c26:	0c 94 50 06 	jmp	0xca0	; 0xca0 <strrev>

00000c2a <ultoa>:
 c2a:	fa 01       	movw	r30, r20
 c2c:	cf 93       	push	r28
 c2e:	ff 93       	push	r31
 c30:	ef 93       	push	r30
 c32:	22 30       	cpi	r18, 0x02	; 2
 c34:	cc f0       	brlt	.+50     	; 0xc68 <ultoa+0x3e>
 c36:	25 32       	cpi	r18, 0x25	; 37
 c38:	bc f4       	brge	.+46     	; 0xc68 <ultoa+0x3e>
 c3a:	c2 2f       	mov	r28, r18
 c3c:	2c 2f       	mov	r18, r28
 c3e:	33 27       	eor	r19, r19
 c40:	44 27       	eor	r20, r20
 c42:	55 27       	eor	r21, r21
 c44:	ff 93       	push	r31
 c46:	ef 93       	push	r30
 c48:	0e 94 74 06 	call	0xce8	; 0xce8 <__udivmodsi4>
 c4c:	ef 91       	pop	r30
 c4e:	ff 91       	pop	r31
 c50:	60 5d       	subi	r22, 0xD0	; 208
 c52:	6a 33       	cpi	r22, 0x3A	; 58
 c54:	0c f0       	brlt	.+2      	; 0xc58 <ultoa+0x2e>
 c56:	69 5d       	subi	r22, 0xD9	; 217
 c58:	61 93       	st	Z+, r22
 c5a:	b9 01       	movw	r22, r18
 c5c:	ca 01       	movw	r24, r20
 c5e:	60 50       	subi	r22, 0x00	; 0
 c60:	70 40       	sbci	r23, 0x00	; 0
 c62:	80 40       	sbci	r24, 0x00	; 0
 c64:	90 40       	sbci	r25, 0x00	; 0
 c66:	51 f7       	brne	.-44     	; 0xc3c <ultoa+0x12>
 c68:	10 82       	st	Z, r1
 c6a:	8f 91       	pop	r24
 c6c:	9f 91       	pop	r25
 c6e:	cf 91       	pop	r28
 c70:	0c 94 50 06 	jmp	0xca0	; 0xca0 <strrev>

00000c74 <utoa>:
 c74:	fb 01       	movw	r30, r22
 c76:	9f 01       	movw	r18, r30
 c78:	42 30       	cpi	r20, 0x02	; 2
 c7a:	74 f0       	brlt	.+28     	; 0xc98 <utoa+0x24>
 c7c:	45 32       	cpi	r20, 0x25	; 37
 c7e:	64 f4       	brge	.+24     	; 0xc98 <utoa+0x24>
 c80:	64 2f       	mov	r22, r20
 c82:	77 27       	eor	r23, r23
 c84:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__udivmodhi4>
 c88:	80 5d       	subi	r24, 0xD0	; 208
 c8a:	8a 33       	cpi	r24, 0x3A	; 58
 c8c:	0c f0       	brlt	.+2      	; 0xc90 <utoa+0x1c>
 c8e:	89 5d       	subi	r24, 0xD9	; 217
 c90:	81 93       	st	Z+, r24
 c92:	cb 01       	movw	r24, r22
 c94:	00 97       	sbiw	r24, 0x00	; 0
 c96:	a1 f7       	brne	.-24     	; 0xc80 <utoa+0xc>
 c98:	10 82       	st	Z, r1
 c9a:	c9 01       	movw	r24, r18
 c9c:	0c 94 50 06 	jmp	0xca0	; 0xca0 <strrev>

00000ca0 <strrev>:
 ca0:	dc 01       	movw	r26, r24
 ca2:	fc 01       	movw	r30, r24
 ca4:	67 2f       	mov	r22, r23
 ca6:	71 91       	ld	r23, Z+
 ca8:	77 23       	and	r23, r23
 caa:	e1 f7       	brne	.-8      	; 0xca4 <strrev+0x4>
 cac:	32 97       	sbiw	r30, 0x02	; 2
 cae:	04 c0       	rjmp	.+8      	; 0xcb8 <strrev+0x18>
 cb0:	7c 91       	ld	r23, X
 cb2:	6d 93       	st	X+, r22
 cb4:	70 83       	st	Z, r23
 cb6:	62 91       	ld	r22, -Z
 cb8:	ae 17       	cp	r26, r30
 cba:	bf 07       	cpc	r27, r31
 cbc:	c8 f3       	brcs	.-14     	; 0xcb0 <strrev+0x10>
 cbe:	08 95       	ret

00000cc0 <__udivmodhi4>:
 cc0:	aa 1b       	sub	r26, r26
 cc2:	bb 1b       	sub	r27, r27
 cc4:	51 e1       	ldi	r21, 0x11	; 17
 cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <__udivmodhi4_ep>

00000cc8 <__udivmodhi4_loop>:
 cc8:	aa 1f       	adc	r26, r26
 cca:	bb 1f       	adc	r27, r27
 ccc:	a6 17       	cp	r26, r22
 cce:	b7 07       	cpc	r27, r23
 cd0:	10 f0       	brcs	.+4      	; 0xcd6 <__udivmodhi4_ep>
 cd2:	a6 1b       	sub	r26, r22
 cd4:	b7 0b       	sbc	r27, r23

00000cd6 <__udivmodhi4_ep>:
 cd6:	88 1f       	adc	r24, r24
 cd8:	99 1f       	adc	r25, r25
 cda:	5a 95       	dec	r21
 cdc:	a9 f7       	brne	.-22     	; 0xcc8 <__udivmodhi4_loop>
 cde:	80 95       	com	r24
 ce0:	90 95       	com	r25
 ce2:	bc 01       	movw	r22, r24
 ce4:	cd 01       	movw	r24, r26
 ce6:	08 95       	ret

00000ce8 <__udivmodsi4>:
 ce8:	a1 e2       	ldi	r26, 0x21	; 33
 cea:	1a 2e       	mov	r1, r26
 cec:	aa 1b       	sub	r26, r26
 cee:	bb 1b       	sub	r27, r27
 cf0:	fd 01       	movw	r30, r26
 cf2:	0d c0       	rjmp	.+26     	; 0xd0e <__udivmodsi4_ep>

00000cf4 <__udivmodsi4_loop>:
 cf4:	aa 1f       	adc	r26, r26
 cf6:	bb 1f       	adc	r27, r27
 cf8:	ee 1f       	adc	r30, r30
 cfa:	ff 1f       	adc	r31, r31
 cfc:	a2 17       	cp	r26, r18
 cfe:	b3 07       	cpc	r27, r19
 d00:	e4 07       	cpc	r30, r20
 d02:	f5 07       	cpc	r31, r21
 d04:	20 f0       	brcs	.+8      	; 0xd0e <__udivmodsi4_ep>
 d06:	a2 1b       	sub	r26, r18
 d08:	b3 0b       	sbc	r27, r19
 d0a:	e4 0b       	sbc	r30, r20
 d0c:	f5 0b       	sbc	r31, r21

00000d0e <__udivmodsi4_ep>:
 d0e:	66 1f       	adc	r22, r22
 d10:	77 1f       	adc	r23, r23
 d12:	88 1f       	adc	r24, r24
 d14:	99 1f       	adc	r25, r25
 d16:	1a 94       	dec	r1
 d18:	69 f7       	brne	.-38     	; 0xcf4 <__udivmodsi4_loop>
 d1a:	60 95       	com	r22
 d1c:	70 95       	com	r23
 d1e:	80 95       	com	r24
 d20:	90 95       	com	r25
 d22:	9b 01       	movw	r18, r22
 d24:	ac 01       	movw	r20, r24
 d26:	bd 01       	movw	r22, r26
 d28:	cf 01       	movw	r24, r30
 d2a:	08 95       	ret

00000d2c <_exit>:
 d2c:	f8 94       	cli

00000d2e <__stop_program>:
 d2e:	ff cf       	rjmp	.-2      	; 0xd2e <__stop_program>
