
ATmega32A_GCC_DigitalControlAudioSystem_pLibs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000344  00800060  00001040  000010d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008003a4  008003a4  00001418  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000817  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002529  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bb3  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ef2  00000000  00000000  00004e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000680  00000000  00000000  00006d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009f7  00000000  00000000  000073e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cf9  00000000  00000000  00007dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  00008ad0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_3>
      10:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_4>
      14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 02 	call	0x494	; 0x494 <main>
      8a:	0c 94 1e 08 	jmp	0x103c	; 0x103c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:
*****************************************/
void port_init(void)
{	

// PORT A connections
	DDRA  = 0b11111111;		//  PA7:U8/PGA2310,CS; PA6:U7/PGA2310,CS; PA5:CON2LCD,RS; PA4:CON2LCD,RW; PA3:CON2LCD,E; PA2:U2/74HC595,RCLK(LCD); PA1:U2/74HC595,SCLK(LCD); PA0:U2/74HC595,DATA(LCD);
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//	Interfaces: NOT USED. PULLUP DISABLE in PORTA.
      96:	1b ba       	out	0x1b, r1	; 27

// PORT B connections
	DDRB  = 0b10111000;		//  PB7:U6,U7,U8/PGA2310,SCLK; PB6:U6,U7,U8/PGA2310,SDO(CON33,36,39); PB5:U6,U7,U8/PGA2310,SDI; PB4:U12/74HC595,DATA(REL_OUT); PB3:U6/PGA2310,CS; PB2:CON8/BUTTON,"ESCAPE",INT2; PB1:CON5/BUTTON,"ON/OFF"; PB0:CON14TempSensor/DS18S20,DQ,IN/OUT;
      98:	88 eb       	ldi	r24, 0xB8	; 184
      9a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000111;		//	Interfaces: EXTERNAL INTERRUPT 2; SPI. set pullup to IRTSOP2240 / BUTTON(on/off) / DS18s20.
      9c:	87 e0       	ldi	r24, 0x07	; 7
      9e:	88 bb       	out	0x18, r24	; 24

// PORT C connections
	DDRC  = 0b11001100;		//  PC7:U10/74HC595,DATA(REL_IN); PC6:U10/74HC595,SCLK(REL_IN); PC5:EncoderED1112S,A; PC4:EncoderED1112S,B; PC3:U10/74HC595,RCLK(REL_IN); PC2:Q2/BD237(RELAY_POWER_SUPPLY); PC1:DS1307/24C64,I2C/SDA; PC0:DS1307/24C64,I2C/SCL;
      a0:	8c ec       	ldi	r24, 0xCC	; 204
      a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;		//	Interfaces: I2C. PULLUP DISABLE in PORTC.
      a4:	15 ba       	out	0x15, r1	; 21

// PORT D connections
	DDRD  = 0b11110000;		//  PD7:U12/74HC595,RCLK(REL_OUT); PD6:U12/74HC595,SCLK(REL_OUT); PD5:Q1/BD237(FAN_CONTROL_PWM); PD4:LED5/"ON/OFF AUDIO SYSTEM"; PD3:CON11/EncoderBUTTON,"MENU/ENTER"/INT1; PD2:CON12/IR/TSOP2240,/INT0; PD1:CON14/MAX232,UART/TXD; PD0:CON14/MAX232,UART/RXD;
      a6:	80 ef       	ldi	r24, 0xF0	; 240
      a8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;		//	Interfaces: TIMER1; UART/USART; EXTERNAL INTERRUPT 0, 1. PULLUP DISABLE in PORTD.
      aa:	8c e0       	ldi	r24, 0x0C	; 12
      ac:	82 bb       	out	0x12, r24	; 18
//	DDRD&=~_BV(0);// DDD0 = "0"  (DDD0=DDRD nulev bit) set PORTD pin0 to zero as input
//	PORTD|=_BV(0);// PD0  = "1"  Enable pull up
//	PORTD|=_BV(1);// PD1  = "1"  led
//	DDRD|=_BV(1); // DDD1 = "1"  (DDD1=DDRD parvi bit) set PORTD pin1 to one as output

}
      ae:	08 95       	ret

000000b0 <timer2_init>:
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init(void)
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
      b0:	82 e0       	ldi	r24, 0x02	; 2
      b2:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
      b4:	81 e8       	ldi	r24, 0x81	; 129
      b6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
      b8:	13 bc       	out	0x23, r1	; 35
}
      ba:	08 95       	ret

000000bc <timer2_on>:
/*************************************
******** DEFINITIONS OF TIMER ********
*************************************/
void timer2_on(void)	// Timer2 On
{
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
      bc:	81 e8       	ldi	r24, 0x81	; 129
      be:	85 bd       	out	0x25, r24	; 37
	OCR2 = 1; // FAN PWM ON
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	83 bd       	out	0x23, r24	; 35
}
      c4:	08 95       	ret

000000c6 <timer2_off>:

void timer2_off(void)	// Timer2 Off
{
	TCCR2 = 0b00000000;		// DISABLED OCOC1A - PWM, OC1B - Disabled, normal port.
      c6:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0; // FAN PWM OFF
      c8:	13 bc       	out	0x23, r1	; 35
}
      ca:	08 95       	ret

000000cc <__vector_1>:

/*****************************************
**** EXTERNAL INTERRUPT 0 VECTOR 01 ******
*****************************************/
ISR(INT0_vect)
{
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
}
      d6:	0f 90       	pop	r0
      d8:	0f be       	out	0x3f, r0	; 63
      da:	0f 90       	pop	r0
      dc:	1f 90       	pop	r1
      de:	18 95       	reti

000000e0 <__vector_2>:

/*****************************************
**** EXTERNAL INTERRUPT 1 VECTOR 02 ******
*****************************************/
ISR(INT1_vect)
{
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
}
      ea:	0f 90       	pop	r0
      ec:	0f be       	out	0x3f, r0	; 63
      ee:	0f 90       	pop	r0
      f0:	1f 90       	pop	r1
      f2:	18 95       	reti

000000f4 <__vector_3>:

/*****************************************
**** EXTERNAL INTERRUPT 2 VECTOR 03 ******
*****************************************/
ISR(INT2_vect)
{
      f4:	1f 92       	push	r1
      f6:	0f 92       	push	r0
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	0f 92       	push	r0
      fc:	11 24       	eor	r1, r1
}
      fe:	0f 90       	pop	r0
     100:	0f be       	out	0x3f, r0	; 63
     102:	0f 90       	pop	r0
     104:	1f 90       	pop	r1
     106:	18 95       	reti

00000108 <__vector_4>:

/*****************************************
**** TIMER 2 OUTPUT COMPARE VECTOR 04 ****
*****************************************/
ISR(TIMER2_COMP_vect)
{
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
}
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <__vector_5>:

/*****************************************
**** TIMER 2 OVERFLOW VECTOR 05 **********
*****************************************/
ISR(TIMER2_OVF_vect)
{
     11c:	1f 92       	push	r1
     11e:	0f 92       	push	r0
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	0f 92       	push	r0
     124:	11 24       	eor	r1, r1
}
     126:	0f 90       	pop	r0
     128:	0f be       	out	0x3f, r0	; 63
     12a:	0f 90       	pop	r0
     12c:	1f 90       	pop	r1
     12e:	18 95       	reti

00000130 <init_all>:
*********************************** START OF APPLICATION ************************************
********************************************************************************************/

void init_all()
{
	port_init();		// IO init and configure all port
     130:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
//	timer2_init();
	LCD_INIT();			// LCD init and reset all lcd contain
     134:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_INIT>
	uart_init();		// UART debug init
     138:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <uart_init>
	pga2310_init();		// SPI init and reset all (U6, U7, U8) PGA2310 volume values to null
     13c:	0e 94 12 05 	call	0xa24	; 0xa24 <pga2310_init>
	relays_in_init();	// ?? nujno li e ?
     140:	0e 94 11 07 	call	0xe22	; 0xe22 <relays_in_init>
	relays_out_init();	// ?? nujno li e ?
     144:	0e 94 38 07 	call	0xe70	; 0xe70 <relays_out_init>
}
     148:	08 95       	ret

0000014a <commonEncoder>:
**********************************************/
void commonEncoder(void)	// not finished
{
	static signed char saveValue = 0;	// zadaljitelno signed char!!! ima osobenost pri vrashtaneto na rezultat ot funkciq!!!
	signed char temp = 0;				// zadaljitelno signed char!!! ima osobenost pri vrashtaneto na rezultat ot funkciq!!!
	temp = rotaryEncoderNikBarzakov();
     14a:	0e 94 90 06 	call	0xd20	; 0xd20 <rotaryEncoderNikBarzakov>
	if(0==temp)
     14e:	88 23       	and	r24, r24
     150:	09 f4       	brne	.+2      	; 0x154 <commonEncoder+0xa>
     152:	4f c0       	rjmp	.+158    	; 0x1f2 <commonEncoder+0xa8>
	{
		// do nothing, encoder havn't been rotated  // ne e bil zavartan
	}
	else if(-1==temp)
     154:	8f 3f       	cpi	r24, 0xFF	; 255
     156:	41 f5       	brne	.+80     	; 0x1a8 <commonEncoder+0x5e>
	{
		// encoder is decrement
		if(saveValue < -127)
     158:	80 91 a5 03 	lds	r24, 0x03A5
     15c:	80 38       	cpi	r24, 0x80	; 128
     15e:	11 f4       	brne	.+4      	; 0x164 <commonEncoder+0x1a>
		{
			saveValue = 127;	// SIGNED CHAR MIN VALUE = -127
     160:	8f e7       	ldi	r24, 0x7F	; 127
     162:	01 c0       	rjmp	.+2      	; 0x166 <commonEncoder+0x1c>
		}
		else
		{
			saveValue += temp;	// sabirane s polojitelno chislo, kratak zapis na: volumeIndex = volumeIndex + temp;
     164:	81 50       	subi	r24, 0x01	; 1
     166:	80 93 a5 03 	sts	0x03A5, r24
		}
// LCD PRINT VALUE
	LED_low_DISPLAYLED_high();		// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
     16a:	94 98       	cbi	0x12, 4	; 18
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
     16c:	8c e0       	ldi	r24, 0x0C	; 12
     16e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
		LCD_COMMAND(LCD_SELECT_4ROW);	// select row 3								// and next is update volume lcd information
     172:	84 ed       	ldi	r24, 0xD4	; 212
     174:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
		if (saveValue > 99)
     178:	80 91 a5 03 	lds	r24, 0x03A5
     17c:	84 36       	cpi	r24, 0x64	; 100
     17e:	1c f0       	brlt	.+6      	; 0x186 <commonEncoder+0x3c>
		{
			LCD_DATA_STRING("Volume: ");	// 20 symbols
     180:	80 e6       	ldi	r24, 0x60	; 96
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	07 c0       	rjmp	.+14     	; 0x194 <commonEncoder+0x4a>
		}
		else if (saveValue > 9)
     186:	8a 30       	cpi	r24, 0x0A	; 10
     188:	1c f0       	brlt	.+6      	; 0x190 <commonEncoder+0x46>
		{
			LCD_DATA_STRING("Volume: 0");	// 20 symbols
     18a:	89 e6       	ldi	r24, 0x69	; 105
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	02 c0       	rjmp	.+4      	; 0x194 <commonEncoder+0x4a>
		}
		else
		{
			LCD_DATA_STRING("Volume: 00");	// 20 symbols			
     190:	83 e7       	ldi	r24, 0x73	; 115
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
		}
		LCD_DATA_INT(saveValue);		// 20 symbols
     198:	80 91 a5 03 	lds	r24, 0x03A5
     19c:	99 27       	eor	r25, r25
     19e:	87 fd       	sbrc	r24, 7
     1a0:	90 95       	com	r25
     1a2:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_DATA_INT>
     1a6:	08 95       	ret
	}
	else if(1==temp)
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	19 f5       	brne	.+70     	; 0x1f2 <commonEncoder+0xa8>
		{
			saveValue = 128;	// SIGNED CHAR MAX VALUE = +128
		}
		else
		{
			saveValue += temp;	// sabirane s polojitelno chislo, kratak zapis na: volumeIndex = volumeIndex + temp;
     1ac:	80 91 a5 03 	lds	r24, 0x03A5
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	80 93 a5 03 	sts	0x03A5, r24
		}
// LCD PRINT VALUE
// LCD PRINT VALUE
	LED_low_DISPLAYLED_high();		// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
     1b6:	94 98       	cbi	0x12, 4	; 18
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
     1b8:	8c e0       	ldi	r24, 0x0C	; 12
     1ba:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
		LCD_COMMAND(LCD_SELECT_4ROW);	// select row 3								// and next is update volume lcd information
     1be:	84 ed       	ldi	r24, 0xD4	; 212
     1c0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
		if (saveValue > 99)
     1c4:	80 91 a5 03 	lds	r24, 0x03A5
     1c8:	84 36       	cpi	r24, 0x64	; 100
     1ca:	1c f0       	brlt	.+6      	; 0x1d2 <commonEncoder+0x88>
		{
			LCD_DATA_STRING("Volume: ");	// 20 symbols
     1cc:	80 e6       	ldi	r24, 0x60	; 96
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <commonEncoder+0x96>
		}
		else if (saveValue > 9)
     1d2:	8a 30       	cpi	r24, 0x0A	; 10
     1d4:	1c f0       	brlt	.+6      	; 0x1dc <commonEncoder+0x92>
		{
			LCD_DATA_STRING("Volume: 0");	// 20 symbols
     1d6:	89 e6       	ldi	r24, 0x69	; 105
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <commonEncoder+0x96>
		}
		else
		{
			LCD_DATA_STRING("Volume: 00");	// 20 symbols			
     1dc:	83 e7       	ldi	r24, 0x73	; 115
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
		}
		LCD_DATA_INT(saveValue);		// 20 symbols
     1e4:	80 91 a5 03 	lds	r24, 0x03A5
     1e8:	99 27       	eor	r25, r25
     1ea:	87 fd       	sbrc	r24, 7
     1ec:	90 95       	com	r25
     1ee:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_DATA_INT>
     1f2:	08 95       	ret

000001f4 <volumeUpdate>:
/*************************************
**** VOLUME UPDATE and LCD UPDATE ****
*************************************/
void volumeUpdate(void)
{
	PGA2310_Volume_Update(volumeValue[volumeIndex], volumeValue[volumeIndex]);	// update volume value on all channels
     1f4:	e0 91 a4 03 	lds	r30, 0x03A4
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	e9 53       	subi	r30, 0x39	; 57
     1fc:	fd 4f       	sbci	r31, 0xFD	; 253
     1fe:	60 81       	ld	r22, Z
     200:	86 2f       	mov	r24, r22
     202:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <PGA2310_Volume_Update>
	LCD_COMMAND(LCD_SELECT_4ROW);	// select row 3								// and next is update volume lcd information
     206:	84 ed       	ldi	r24, 0xD4	; 212
     208:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
//		LCD_DATA_STRING("Volume: ");	// 20 symbols
	if (volumeIndex > 9)
     20c:	80 91 a4 03 	lds	r24, 0x03A4
     210:	8a 30       	cpi	r24, 0x0A	; 10
     212:	18 f0       	brcs	.+6      	; 0x21a <volumeUpdate+0x26>
	{
		LCD_DATA_STRING("Volume: ");	// 20 symbols
     214:	80 e6       	ldi	r24, 0x60	; 96
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	02 c0       	rjmp	.+4      	; 0x21e <volumeUpdate+0x2a>
	}
	else
	{
		LCD_DATA_STRING("Volume: 0");	// 20 symbols
     21a:	89 e6       	ldi	r24, 0x69	; 105
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
	}
	LCD_DATA_INT(volumeIndex);			// 20 symbols
     222:	80 91 a4 03 	lds	r24, 0x03A4
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_DATA_INT>
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Volume: ");		// uart debug information string
     22c:	8e e7       	ldi	r24, 0x7E	; 126
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
	transmitUartInt(volumeIndex);		// uart debug information string 
     234:	80 91 a4 03 	lds	r24, 0x03A4
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 b0 05 	call	0xb60	; 0xb60 <transmitUartInt>
	transmitUartString("\r\n");			// uart debug information string
     23e:	83 e9       	ldi	r24, 0x93	; 147
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
}
     246:	08 95       	ret

00000248 <volumeEncoder>:
**** ROTARY ENCODER for VOLUME FUNCTION ****
*******************************************/
void volumeEncoder(void)
{
	signed char temp = 0;				// zadaljitelno signed char!!! ima osobenost pri vrashtaneto na rezultat ot funkciq!!!
	temp = rotaryEncoderNikBarzakov();
     248:	0e 94 90 06 	call	0xd20	; 0xd20 <rotaryEncoderNikBarzakov>
	if(0==temp)
     24c:	88 23       	and	r24, r24
     24e:	e1 f0       	breq	.+56     	; 0x288 <volumeEncoder+0x40>
	{
		// do nothing, encoder havn't been rotated  // ne e bil zavartan
	}
	else if(-1==temp)
     250:	8f 3f       	cpi	r24, 0xFF	; 255
     252:	69 f4       	brne	.+26     	; 0x26e <volumeEncoder+0x26>
	{
		// encoder is decrement
		if(volumeIndex < (VOLUME_MIN + 1))
     254:	80 91 a4 03 	lds	r24, 0x03A4
     258:	88 23       	and	r24, r24
     25a:	19 f4       	brne	.+6      	; 0x262 <volumeEncoder+0x1a>
		{
			volumeIndex = VOLUME_MIN;
     25c:	10 92 a4 03 	sts	0x03A4, r1
     260:	03 c0       	rjmp	.+6      	; 0x268 <volumeEncoder+0x20>
		}
		else
		{
			volumeIndex += temp;	// sabirane s polojitelno chislo, kratak zapis na: volumeIndex = volumeIndex + temp;
     262:	81 50       	subi	r24, 0x01	; 1
     264:	80 93 a4 03 	sts	0x03A4, r24
		}
		volumeUpdate();
     268:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <volumeUpdate>
     26c:	08 95       	ret
	}
	else if(1==temp)
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	59 f4       	brne	.+22     	; 0x288 <volumeEncoder+0x40>
	{
		// encoder is increment
		if (volumeIndex > (VOLUME_MAX - 2))
     272:	80 91 a4 03 	lds	r24, 0x03A4
     276:	83 31       	cpi	r24, 0x13	; 19
     278:	10 f0       	brcs	.+4      	; 0x27e <volumeEncoder+0x36>
		{
			volumeIndex = (VOLUME_MAX - 1);
     27a:	83 e1       	ldi	r24, 0x13	; 19
     27c:	01 c0       	rjmp	.+2      	; 0x280 <volumeEncoder+0x38>
		}
		else
		{
			volumeIndex += temp;	// sabirane s polojitelno chislo, kratak zapis na: volumeIndex = volumeIndex + temp;
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	80 93 a4 03 	sts	0x03A4, r24
		}
		volumeUpdate();
     284:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <volumeUpdate>
     288:	08 95       	ret

0000028a <ampliferOff>:
/*********************
**** AMPLIFER OFF ****
*********************/
void ampliferOff(void)
{
	LCD_COMMAND(LCD_SELECT_1ROW);				// select row 1
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
	LCD_DATA_STRING("    Amplifer Off    ");	// 20 symbols
     290:	86 e9       	ldi	r24, 0x96	; 150
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>

	LCD_COMMAND(LCD_OFF);						// LCD ON without CURSOR
     298:	88 e0       	ldi	r24, 0x08	; 8
     29a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>

//			FAN_low();		// PORTD5 - FAN OFF (logic "0")  NON PWM, NON TIMER1

// RELAYS OFF
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch off relays out for all 6 channels\r\n");		// uart debug information string
     29e:	8b ea       	ldi	r24, 0xAB	; 171
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
	relays_out_off();	// RELAYS OUT CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
     2a6:	0e 94 34 07 	call	0xe68	; 0xe68 <relays_out_off>
     2aa:	88 e5       	ldi	r24, 0x58	; 88
     2ac:	9b e1       	ldi	r25, 0x1B	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ae:	20 e9       	ldi	r18, 0x90	; 144
     2b0:	31 e0       	ldi	r19, 0x01	; 1
     2b2:	f9 01       	movw	r30, r18
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <ampliferOff+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <ampliferOff+0x28>
	_delay_ms(700);								// PESHO COMMENT 14.08.2015, 21:10
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch off relays in for all 6 channels\r\n");		// uart debug information string
     2bc:	89 ee       	ldi	r24, 0xE9	; 233
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
	relays_in_off();	// RELAYS IN1 CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
     2c4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <relays_in_off>
     2c8:	88 e5       	ldi	r24, 0x58	; 88
     2ca:	9b e1       	ldi	r25, 0x1B	; 27
     2cc:	20 e9       	ldi	r18, 0x90	; 144
     2ce:	31 e0       	ldi	r19, 0x01	; 1
     2d0:	f9 01       	movw	r30, r18
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <ampliferOff+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d8:	d9 f7       	brne	.-10     	; 0x2d0 <ampliferOff+0x46>
	_delay_ms(700);								// PESHO COMMENT 14.08.2015, 21:10
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch off relays for power 220V\r\n");		// uart debug information string
     2da:	86 e2       	ldi	r24, 0x26	; 38
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
	REL_POWER_low();// RELAY POWER OFF				// PESHO COMMENT 14.08.2015, 21:10
     2e2:	aa 98       	cbi	0x15, 2	; 21

//	_delay_ms(50);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton

//	FAN_PWM_OFF();
//			LCD_EXECUTE_COMMAND(LCD_OFF);			// LCD OFF
	LCD_CLEAR_CONTAIN();
     2e4:	0e 94 15 04 	call	0x82a	; 0x82a <LCD_CLEAR_CONTAIN>
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Display off and status led on\r\n");
     2e8:	8c e5       	ldi	r24, 0x5C	; 92
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
     2f0:	94 9a       	sbi	0x12, 4	; 18
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Amplifer is off\r\n");
     2f2:	88 e8       	ldi	r24, 0x88	; 136
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
}
     2fa:	08 95       	ret

000002fc <ampliferOn>:
**** AMPLIFER ON ****
********************/
void ampliferOn(void)
{
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Amplifer is on\r\n");
     2fc:	86 ea       	ldi	r24, 0xA6	; 166
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Display on and status led off\r\n");
     304:	83 ec       	ldi	r24, 0xC3	; 195
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
	LED_low_DISPLAYLED_high();		// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
     30c:	94 98       	cbi	0x12, 4	; 18

	LCD_CLEAR_CONTAIN();						// clear all contain on display
     30e:	0e 94 15 04 	call	0x82a	; 0x82a <LCD_CLEAR_CONTAIN>
	LCD_COMMAND(LCD_SELECT_1ROW);				// select row 1
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
	LCD_DATA_STRING("    Amplifer On     ");	// 20 symbols
     318:	8f ee       	ldi	r24, 0xEF	; 239
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
	LCD_COMMAND(LCD_SELECT_2ROW);				// select row 2
     320:	80 ec       	ldi	r24, 0xC0	; 192
     322:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
	LCD_DATA_STRING("P.UPINOV  P.STOYANOV");	// 20 symbols //	LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
     326:	84 e0       	ldi	r24, 0x04	; 4
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
     32e:	8c e0       	ldi	r24, 0x0C	; 12
     330:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
//			LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
//	LCD_EXECUTE_COMMAND(LCD_ON);			// LCD ON without CURSOR

// RELAYS ON
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch on relays for power 220V\r\n");		// uart debug information string
     334:	89 e1       	ldi	r24, 0x19	; 25
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
	REL_POWER_high();// RELAY POWER ON TRAFs		// PESHO COMMENT 14.08.2015, 21:10
     33c:	aa 9a       	sbi	0x15, 2	; 21
     33e:	80 e4       	ldi	r24, 0x40	; 64
     340:	9c e9       	ldi	r25, 0x9C	; 156
     342:	20 e9       	ldi	r18, 0x90	; 144
     344:	31 e0       	ldi	r19, 0x01	; 1
     346:	f9 01       	movw	r30, r18
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <ampliferOn+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34e:	d9 f7       	brne	.-10     	; 0x346 <ampliferOn+0x4a>
	_delay_ms(4000);								// PESHO COMMENT 14.08.2015, 21:10
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch on relays in for all 6 channels\r\n");		// uart debug information string
     350:	8e e4       	ldi	r24, 0x4E	; 78
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
	relays_in1_6ch();	// RELAYS IN1 CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
     358:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <relays_in1_6ch>
     35c:	88 e5       	ldi	r24, 0x58	; 88
     35e:	9b e1       	ldi	r25, 0x1B	; 27
     360:	20 e9       	ldi	r18, 0x90	; 144
     362:	31 e0       	ldi	r19, 0x01	; 1
     364:	f9 01       	movw	r30, r18
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <ampliferOn+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     36c:	d9 f7       	brne	.-10     	; 0x364 <ampliferOn+0x68>
	_delay_ms(700);									// PESHO COMMENT 14.08.2015, 21:10
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch on relays out for all 6 channels\r\n");		// uart debug information string
     36e:	8a e8       	ldi	r24, 0x8A	; 138
     370:	92 e0       	ldi	r25, 0x02	; 2
     372:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
	relays_out_6ch();	// RELAYS OUT CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
     376:	0e 94 30 07 	call	0xe60	; 0xe60 <relays_out_6ch>

//			PGA2310_U8_SPI(volumeLeft, volumeRight);	// 'A', 'A', 0b01111110, 0b01111110
}
     37a:	08 95       	ret

0000037c <buttons_press>:
	relays_in_init();	// ?? nujno li e ?
	relays_out_init();	// ?? nujno li e ?
}

void buttons_press()
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
{
	unsigned int flagPower;//	: 1;	// bit0: '0' = Power OFF, '1' = Power ON	// ne sa inicializirani
	unsigned int flagMute;//	: 1;	// bit1: '0' = Mute OFF, '1' = Mute ON		// ne sa inicializirani
} fSB, *flagStatusBits;
*/
	flagStatusBits = &fSB;
     380:	85 eb       	ldi	r24, 0xB5	; 181
     382:	93 e0       	ldi	r25, 0x03	; 3
     384:	90 93 b2 03 	sts	0x03B2, r25
     388:	80 93 b1 03 	sts	0x03B1, r24
	flagStatusBits->flagPower=0;	// inicializirane s nuli, no nai veroqtno poradi tova che e globalna stru
     38c:	80 91 b5 03 	lds	r24, 0x03B5
	flagStatusBits->flagMute=0;		// inicializirane
     390:	8c 7f       	andi	r24, 0xFC	; 252
     392:	80 93 b5 03 	sts	0x03B5, r24
     396:	c0 e9       	ldi	r28, 0x90	; 144
     398:	d1 e0       	ldi	r29, 0x01	; 1
		LCD_DATA_INT(flagStatusBits->flagMute);		// 20 symbols
	_delay_ms(2000);
*/
	while(1)
	{
		if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 0)//fSB.flagPower == 0)//flagStatusBits->flagPower == 0)	// obj ptr flagStatusBtnRegister from struct flagStatusBtnOnOff
     39a:	b1 99       	sbic	0x16, 1	; 22
     39c:	13 c0       	rjmp	.+38     	; 0x3c4 <buttons_press+0x48>
     39e:	e0 91 b1 03 	lds	r30, 0x03B1
     3a2:	f0 91 b2 03 	lds	r31, 0x03B2
     3a6:	80 81       	ld	r24, Z
     3a8:	80 fd       	sbrc	r24, 0
     3aa:	0c c0       	rjmp	.+24     	; 0x3c4 <buttons_press+0x48>
		{
			flagStatusBits->flagPower = 1;			// filter za buton ON
     3ac:	81 60       	ori	r24, 0x01	; 1
     3ae:	80 83       	st	Z, r24
			ampliferOn();
     3b0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ampliferOn>
     3b4:	80 e1       	ldi	r24, 0x10	; 16
     3b6:	97 e2       	ldi	r25, 0x27	; 39
     3b8:	fe 01       	movw	r30, r28
     3ba:	31 97       	sbiw	r30, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <buttons_press+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c0:	d9 f7       	brne	.-10     	; 0x3b8 <buttons_press+0x3c>
     3c2:	eb cf       	rjmp	.-42     	; 0x39a <buttons_press+0x1e>
			_delay_ms(1000);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton
		}
		else if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 1)//fSB.flagPower == 1)//flagStatusBits->flagPower == 1)
     3c4:	b1 99       	sbic	0x16, 1	; 22
     3c6:	13 c0       	rjmp	.+38     	; 0x3ee <buttons_press+0x72>
     3c8:	e0 91 b1 03 	lds	r30, 0x03B1
     3cc:	f0 91 b2 03 	lds	r31, 0x03B2
     3d0:	80 81       	ld	r24, Z
     3d2:	80 ff       	sbrs	r24, 0
     3d4:	0c c0       	rjmp	.+24     	; 0x3ee <buttons_press+0x72>
		{
			flagStatusBits->flagPower = 0;			// filter za buton OFF
     3d6:	8e 7f       	andi	r24, 0xFE	; 254
     3d8:	80 83       	st	Z, r24
			ampliferOff();
     3da:	0e 94 45 01 	call	0x28a	; 0x28a <ampliferOff>
     3de:	88 e8       	ldi	r24, 0x88	; 136
     3e0:	93 e1       	ldi	r25, 0x13	; 19
     3e2:	fe 01       	movw	r30, r28
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <buttons_press+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ea:	d9 f7       	brne	.-10     	; 0x3e2 <buttons_press+0x66>
     3ec:	d6 cf       	rjmp	.-84     	; 0x39a <buttons_press+0x1e>
			_delay_ms(500);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton
		}
		else if(BUTTON_ESC_low() && flagStatusBits->flagPower == 1)//fSB.flagPower == 1)//flagStatusBits->flagPower == 1)
     3ee:	b2 99       	sbic	0x16, 2	; 22
     3f0:	11 c0       	rjmp	.+34     	; 0x414 <buttons_press+0x98>
     3f2:	e0 91 b1 03 	lds	r30, 0x03B1
     3f6:	f0 91 b2 03 	lds	r31, 0x03B2
     3fa:	80 81       	ld	r24, Z
     3fc:	80 ff       	sbrs	r24, 0
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <buttons_press+0x98>
		{
//			LCD_DATA_STRING("PRESSED BTN ESCAPE  ");	// 20 symbols
//			LCD_COMMAND(LCD_ON);
			LCD_CLEAR_CONTAIN();
     400:	0e 94 15 04 	call	0x82a	; 0x82a <LCD_CLEAR_CONTAIN>
     404:	88 e8       	ldi	r24, 0x88	; 136
     406:	93 e1       	ldi	r25, 0x13	; 19
     408:	fe 01       	movw	r30, r28
     40a:	31 97       	sbiw	r30, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <buttons_press+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     40e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     410:	d9 f7       	brne	.-10     	; 0x408 <buttons_press+0x8c>
     412:	c3 cf       	rjmp	.-122    	; 0x39a <buttons_press+0x1e>
			_delay_ms(500);
//			volumeUp();
//			_delay_ms(200);
		}
		else if(BUTTON_ENCODER_low() && flagStatusBits->flagPower == 1)//fSB.flagPower == 1)//flagStatusBits->flagPower == 1)
     414:	83 99       	sbic	0x10, 3	; 16
     416:	0f c0       	rjmp	.+30     	; 0x436 <buttons_press+0xba>
     418:	e0 91 b1 03 	lds	r30, 0x03B1
     41c:	f0 91 b2 03 	lds	r31, 0x03B2
     420:	80 81       	ld	r24, Z
     422:	80 ff       	sbrs	r24, 0
     424:	08 c0       	rjmp	.+16     	; 0x436 <buttons_press+0xba>
     426:	88 e8       	ldi	r24, 0x88	; 136
     428:	93 e1       	ldi	r25, 0x13	; 19
     42a:	fe 01       	movw	r30, r28
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <buttons_press+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     430:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     432:	d9 f7       	brne	.-10     	; 0x42a <buttons_press+0xae>
     434:	b2 cf       	rjmp	.-156    	; 0x39a <buttons_press+0x1e>
			_delay_ms(500);
//			volumeDown();
//			_delay_ms(200);

		}
		else if(BUTTON_ESC_low() && flagStatusBits->flagPower == 0)//fSB.flagPower == 0)//flagStatusBits->flagPower == 0)
     436:	b2 99       	sbic	0x16, 2	; 22
     438:	0f c0       	rjmp	.+30     	; 0x458 <buttons_press+0xdc>
     43a:	e0 91 b1 03 	lds	r30, 0x03B1
     43e:	f0 91 b2 03 	lds	r31, 0x03B2
     442:	80 81       	ld	r24, Z
     444:	80 fd       	sbrc	r24, 0
     446:	08 c0       	rjmp	.+16     	; 0x458 <buttons_press+0xdc>
     448:	88 e8       	ldi	r24, 0x88	; 136
     44a:	93 e1       	ldi	r25, 0x13	; 19
     44c:	fe 01       	movw	r30, r28
     44e:	31 97       	sbiw	r30, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <buttons_press+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     452:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     454:	d9 f7       	brne	.-10     	; 0x44c <buttons_press+0xd0>
     456:	a1 cf       	rjmp	.-190    	; 0x39a <buttons_press+0x1e>
//			LCD_COMMAND(LCD_ON);
			_delay_ms(500);
//			setupMode();
//			_delay_ms(1000);
		}
		else if(BUTTON_ENCODER_low() && flagStatusBits->flagPower == 0)//fSB.flagPower == 0)//flagStatusBits->flagPower == 0)
     458:	83 99       	sbic	0x10, 3	; 16
     45a:	0f c0       	rjmp	.+30     	; 0x47a <buttons_press+0xfe>
     45c:	e0 91 b1 03 	lds	r30, 0x03B1
     460:	f0 91 b2 03 	lds	r31, 0x03B2
     464:	80 81       	ld	r24, Z
     466:	80 fd       	sbrc	r24, 0
     468:	08 c0       	rjmp	.+16     	; 0x47a <buttons_press+0xfe>
     46a:	88 e8       	ldi	r24, 0x88	; 136
     46c:	93 e1       	ldi	r25, 0x13	; 19
     46e:	fe 01       	movw	r30, r28
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <buttons_press+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     474:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     476:	d9 f7       	brne	.-10     	; 0x46e <buttons_press+0xf2>
     478:	90 cf       	rjmp	.-224    	; 0x39a <buttons_press+0x1e>
//			LCD_COMMAND(LCD_OFF);
			_delay_ms(500);
//			about();
//			_delay_ms(1000);
		}
		else if(flagStatusBits->flagPower == 1)//fSB.flagPower == 1)//flagStatusBits->flagPower == 1)	// zashto ne raboti encoder-a kogato se proverqva bita flagPower?
     47a:	e0 91 b1 03 	lds	r30, 0x03B1
     47e:	f0 91 b2 03 	lds	r31, 0x03B2
     482:	80 81       	ld	r24, Z
     484:	80 ff       	sbrs	r24, 0
     486:	03 c0       	rjmp	.+6      	; 0x48e <buttons_press+0x112>
		{
			volumeEncoder();	// v momenta na zavartane na encodera flaga stava nula flagStatusBits->flagPower = 0, zashto ???
     488:	0e 94 24 01 	call	0x248	; 0x248 <volumeEncoder>
     48c:	86 cf       	rjmp	.-244    	; 0x39a <buttons_press+0x1e>
		}						// za tova Power Button srabotva ot vtoriq pat kato za Power OFF
		else if(flagStatusBits->flagPower == 0)	// zashto ne raboti encoder-a kogato se proverqva bita flagPower?
		{
			commonEncoder();	// v momenta na zavartane na encodera flaga stava nula flagStatusBits->flagPower = 0, zashto ???
     48e:	0e 94 a5 00 	call	0x14a	; 0x14a <commonEncoder>
     492:	83 cf       	rjmp	.-250    	; 0x39a <buttons_press+0x1e>

00000494 <main>:
********************************************************************************************/

int main(void)
{

	init_all();				// inicializacia na vsichko
     494:	0e 94 98 00 	call	0x130	; 0x130 <init_all>

	sei();							// file "avr/interrupt.h"
     498:	78 94       	sei
//	SREG = (1<<I);

	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
     49a:	94 9a       	sbi	0x12, 4	; 18
	while(1)
	{
//		struct flagStatusBtnOnOff flagStatusBtnRegister;	// obj flagStatusBtnRegister from struct flagStatusBtnOnOff
//		flagStatusBtnRegister.bit0 = 0;
		
		buttons_press();	// izchakvane za natiskane na buton
     49c:	0e 94 be 01 	call	0x37c	; 0x37c <buttons_press>
     4a0:	fd cf       	rjmp	.-6      	; 0x49c <main+0x8>

000004a2 <eeprom_24c64_read>:
	// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
	// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !
	
	byte eepromReceiveByte0, eepromReceiveByte1, eepromReceiveByte2, eepromReceiveByte3, eepromReceiveByte4, eepromReceiveByte5;
// EEPROM READ
	i2c_start();
     4a2:	0e 94 5f 03 	call	0x6be	; 0x6be <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);		// EEPROM 24C64 ADDRESS ACCESS WRITE
     4a6:	80 ea       	ldi	r24, 0xA0	; 160
     4a8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>

	i2c_start();
     4b8:	0e 94 5f 03 	call	0x6be	; 0x6be <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_READ);		// EEPROM 24C64 ADDRESS ACCESS READ
     4bc:	81 ea       	ldi	r24, 0xA1	; 161
     4be:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	eepromReceiveByte0	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_read>
	eepromReceiveByte1	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_read>
	eepromReceiveByte2	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_read>
	eepromReceiveByte3	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_read>
	eepromReceiveByte4	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_read>
	eepromReceiveByte5	= i2c_read(1);				// EEPROM DATA READ BYTE	// i2c_read(1) parametar razlichen ot 0 spira komunikaciqta NACK
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_read>
	i2c_stop();
     4e6:	0e 94 65 03 	call	0x6ca	; 0x6ca <i2c_stop>
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte2);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte3);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte4);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte5);
*/
}
     4ea:	08 95       	ret

000004ec <eeprom_24c64_write>:
// Za da se vijda tova koeto se e zapisalo v pametta, a ne ot tozi bibliotechen fail !!!!!!!!!
// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !

// EEPROM WRITE
	i2c_start();
     4ec:	0e 94 5f 03 	call	0x6be	; 0x6be <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
     4f0:	80 ea       	ldi	r24, 0xA0	; 160
     4f2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
// Write data
	i2c_write(0x30);	// Data is stored: 0x30 - '0'
     502:	80 e3       	ldi	r24, 0x30	; 48
     504:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	i2c_write(0x31);	// Data is stored: 0x31 - '1'
     508:	81 e3       	ldi	r24, 0x31	; 49
     50a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	i2c_write(0x32);	// Data is stored: 0x32 - '2'
     50e:	82 e3       	ldi	r24, 0x32	; 50
     510:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	i2c_write(0x33);	// Data is stored: 0x33 - '3'
     514:	83 e3       	ldi	r24, 0x33	; 51
     516:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	i2c_write(0x34);	// Data is stored: 0x34 - '4'
     51a:	84 e3       	ldi	r24, 0x34	; 52
     51c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	i2c_stop();
     520:	0e 94 65 03 	call	0x6ca	; 0x6ca <i2c_stop>
}
     524:	08 95       	ret

00000526 <eeprom_24c64_reset>:

/*************************************
** RESET AND ZERO FILL EEPROM 24C64 **
*************************************/
void eeprom_24c64_reset()
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
	unsigned int i;	// 16 bits
// EEPROM WRITE
	i2c_start();
     52a:	0e 94 5f 03 	call	0x6be	; 0x6be <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
     52e:	80 ea       	ldi	r24, 0xA0	; 160
     530:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
     540:	c0 e0       	ldi	r28, 0x00	; 0
     542:	d0 e0       	ldi	r29, 0x00	; 0
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
     54a:	21 96       	adiw	r28, 0x01	; 1
     54c:	8f e1       	ldi	r24, 0x1F	; 31
     54e:	cf 3f       	cpi	r28, 0xFF	; 255
     550:	d8 07       	cpc	r29, r24
     552:	c1 f7       	brne	.-16     	; 0x544 <eeprom_24c64_reset+0x1e>
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
	}
	i2c_stop();
     554:	0e 94 65 03 	call	0x6ca	; 0x6ca <i2c_stop>
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <reset>:
}
*/

unsigned char reset(void)
{
    DDRx |= (1<<Px);            //Ausgang
     55e:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
     560:	c0 98       	cbi	0x18, 0	; 24
     562:	80 e8       	ldi	r24, 0x80	; 128
     564:	97 e0       	ldi	r25, 0x07	; 7
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <reset+0x8>
    _delay_us(480);
	DDRx &= ~(1<<Px);
     56a:	b8 98       	cbi	0x17, 0	; 23
     56c:	80 e4       	ldi	r24, 0x40	; 64
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <reset+0x12>
    _delay_us(80);
	if(!(PINx & (1<<Px)))     //Prüfe Slave-Antwort
     574:	b0 9b       	sbis	0x16, 0	; 22
     576:	02 c0       	rjmp	.+4      	; 0x57c <reset+0x1e>
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	08 95       	ret
     57c:	88 e0       	ldi	r24, 0x08	; 8
     57e:	97 e0       	ldi	r25, 0x07	; 7
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <reset+0x22>
     584:	81 e0       	ldi	r24, 0x01	; 1
	}
    else
	{
        return 0;
	}
}
     586:	08 95       	ret

00000588 <read_bit>:

unsigned char read_bit(void)
{
    DDRx |= (1<<Px);            //Ausgang
     588:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
     58a:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     58c:	85 e0       	ldi	r24, 0x05	; 5
     58e:	8a 95       	dec	r24
     590:	f1 f7       	brne	.-4      	; 0x58e <read_bit+0x6>
    _delay_us(1);
	DDRx &= ~(1<<Px);
     592:	b8 98       	cbi	0x17, 0	; 23
     594:	80 e4       	ldi	r24, 0x40	; 64
     596:	8a 95       	dec	r24
     598:	f1 f7       	brne	.-4      	; 0x596 <read_bit+0xe>
    _delay_us(12);
    if(!(PINx & (1<<Px)))       //Abtastung innerhalb von 15µs
     59a:	86 b3       	in	r24, 0x16	; 22
	}
	else
    {
		return 1;
	}
}
     59c:	81 70       	andi	r24, 0x01	; 1
     59e:	08 95       	ret

000005a0 <write_bit>:

void write_bit(unsigned char bitval)    //kann 0 oder 1 sein
{
    DDRx |= (1<<Px);            //Ausgang
     5a0:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
     5a2:	c0 98       	cbi	0x18, 0	; 24
    if(bitval)
     5a4:	81 11       	cpse	r24, r1
	{
        PORTx |= (1<<Px);      //H-Pegel
     5a6:	c0 9a       	sbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5a8:	88 eb       	ldi	r24, 0xB8	; 184
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <write_bit+0xc>
    }
	_delay_us(110);        
    DDRx &= ~(1<<Px);
     5b0:	b8 98       	cbi	0x17, 0	; 23
    PORTx &= ~(1<<Px);
     5b2:	c0 98       	cbi	0x18, 0	; 24
}
     5b4:	08 95       	ret

000005b6 <read_byte>:

unsigned char read_byte(void)
{
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	10 e0       	ldi	r17, 0x00	; 0
     5c6:	c0 e0       	ldi	r28, 0x00	; 0
     5c8:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
		{
            byte |= (1<<i);
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	c9 2e       	mov	r12, r25
     5ce:	d1 2c       	mov	r13, r1
     5d0:	80 ee       	ldi	r24, 0xE0	; 224
     5d2:	e8 2e       	mov	r14, r24
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	f8 2e       	mov	r15, r24
unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
     5d8:	0e 94 c4 02 	call	0x588	; 0x588 <read_bit>
     5dc:	88 23       	and	r24, r24
     5de:	41 f0       	breq	.+16     	; 0x5f0 <read_byte+0x3a>
		{
            byte |= (1<<i);
     5e0:	c6 01       	movw	r24, r12
     5e2:	0c 2e       	mov	r0, r28
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <read_byte+0x34>
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	0a 94       	dec	r0
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <read_byte+0x30>
     5ee:	18 2b       	or	r17, r24
     5f0:	c7 01       	movw	r24, r14
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <read_byte+0x3c>
     5f6:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
     5f8:	c8 30       	cpi	r28, 0x08	; 8
     5fa:	d1 05       	cpc	r29, r1
     5fc:	69 f7       	brne	.-38     	; 0x5d8 <read_byte+0x22>
            byte |= (1<<i);
		}
        _delay_us(120);
    }
    return byte;
}
     5fe:	81 2f       	mov	r24, r17
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	08 95       	ret

00000610 <write_byte>:

void write_byte(unsigned char byte)
{
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	c0 e0       	ldi	r28, 0x00	; 0
     61a:	d0 e0       	ldi	r29, 0x00	; 0
    for(unsigned char i=0; i<8; i++)
	{
        if(byte & (1<<i))
     61c:	08 2f       	mov	r16, r24
     61e:	10 e0       	ldi	r17, 0x00	; 0
     620:	c8 01       	movw	r24, r16
     622:	0c 2e       	mov	r0, r28
     624:	02 c0       	rjmp	.+4      	; 0x62a <write_byte+0x1a>
     626:	95 95       	asr	r25
     628:	87 95       	ror	r24
     62a:	0a 94       	dec	r0
     62c:	e2 f7       	brpl	.-8      	; 0x626 <write_byte+0x16>
     62e:	80 ff       	sbrs	r24, 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <write_byte+0x26>
		{
			write_bit(1);
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	01 c0       	rjmp	.+2      	; 0x638 <write_byte+0x28>
		}
        else
		{
            write_bit(0);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <write_bit>
     63c:	21 96       	adiw	r28, 0x01	; 1
    return byte;
}

void write_byte(unsigned char byte)
{
    for(unsigned char i=0; i<8; i++)
     63e:	c8 30       	cpi	r28, 0x08	; 8
     640:	d1 05       	cpc	r29, r1
     642:	71 f7       	brne	.-36     	; 0x620 <write_byte+0x10>
     644:	80 ee       	ldi	r24, 0xE0	; 224
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <write_byte+0x38>
		{
            write_bit(0);
		}
	}
    _delay_us(120);
}  
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	08 95       	ret

00000656 <wait_ready>:
	return 0;
}

void wait_ready(void)
{
	while(!(read_bit()));
     656:	0e 94 c4 02 	call	0x588	; 0x588 <read_bit>
     65a:	88 23       	and	r24, r24
     65c:	e1 f3       	breq	.-8      	; 0x656 <wait_ready>
}
     65e:	08 95       	ret

00000660 <read_scratchpad>:
	}
    _delay_us(120);
}  

unsigned char read_scratchpad(void)
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29

	if(reset())
     664:	0e 94 af 02 	call	0x55e	; 0x55e <reset>
     668:	88 23       	and	r24, r24
     66a:	e9 f0       	breq	.+58     	; 0x6a6 <read_scratchpad+0x46>
	{
		write_byte(0xCC);
     66c:	8c ec       	ldi	r24, 0xCC	; 204
     66e:	0e 94 08 03 	call	0x610	; 0x610 <write_byte>
		write_byte(0x44);
     672:	84 e4       	ldi	r24, 0x44	; 68
     674:	0e 94 08 03 	call	0x610	; 0x610 <write_byte>
		wait_ready();
     678:	0e 94 2b 03 	call	0x656	; 0x656 <wait_ready>
		if(reset())
     67c:	0e 94 af 02 	call	0x55e	; 0x55e <reset>
     680:	88 23       	and	r24, r24
     682:	89 f0       	breq	.+34     	; 0x6a6 <read_scratchpad+0x46>
		{
			write_byte(0xCC);
     684:	8c ec       	ldi	r24, 0xCC	; 204
     686:	0e 94 08 03 	call	0x610	; 0x610 <write_byte>
			write_byte(0xBE);
     68a:	8e eb       	ldi	r24, 0xBE	; 190
     68c:	0e 94 08 03 	call	0x610	; 0x610 <write_byte>
     690:	c6 ea       	ldi	r28, 0xA6	; 166
     692:	d3 e0       	ldi	r29, 0x03	; 3
			for(unsigned char i=0; i<9; i++)
			{
				scratchpad [i] = read_byte();
     694:	0e 94 db 02 	call	0x5b6	; 0x5b6 <read_byte>
     698:	89 93       	st	Y+, r24
		wait_ready();
		if(reset())
		{
			write_byte(0xCC);
			write_byte(0xBE);
			for(unsigned char i=0; i<9; i++)
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	cf 3a       	cpi	r28, 0xAF	; 175
     69e:	d8 07       	cpc	r29, r24
     6a0:	c9 f7       	brne	.-14     	; 0x694 <read_scratchpad+0x34>
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <read_scratchpad+0x48>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
			}
			return 1;
		}
	}
	return 0;
}
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <i2c_init>:
|== TWPS = 1 => (4^TWPS)= 4  // TWSR = (0<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx01 => TWSR = 1 (DEC) => 4^1 =  4 =|
|== TWPS = 2 => (4^TWPS)=16  // TWSR = (1<<TWPS1)|(0<<TWPS0) => TWSR = 0bxxxxxx10 => TWSR = 2 (DEC) => 4^2 = 16 =|
|== TWPS = 3 => (4^TWPS)=64  // TWSR = (1<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx11 => TWSR = 3 (DEC) => 4^3 = 64 =|
|===============================================================================================================*/

	TWBR = 0b00010010;	// HEX=0x12	or DEC=18	// FCPU = 16 000 000 |-> SCL = 16000000 / (16+(2*TWBR*(4^TWPS)) = 16000000 / (16+(2*18*(4))) = 16000000 / 160 = 100 000 Hz = 100 kHz
     6ae:	82 e1       	ldi	r24, 0x12	; 18
     6b0:	80 b9       	out	0x00, r24	; 0
	TWSR = (0<<TWPS1)|(1<<TWPS0);	// SCL = 16 000 000 / 64  = 250 000 = 250kHz
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	81 b9       	out	0x01, r24	; 1
	TWCR = (1<<TWEN);	//	TWCR = 0x04; // TWCR = (x<<TWINT)|(x<<TWEA)|(x<<TWSTA)|(x<<TWSTO)|(x<<TWEN)|(x<<TWIE);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	86 bf       	out	0x36, r24	; 54
	TWDR = 0b00000000;
     6ba:	13 b8       	out	0x03, r1	; 3
}
     6bc:	08 95       	ret

000006be <i2c_start>:
/*****************************************
** START CONDITION OF I2C COMMUNICATION **
*****************************************/
void i2c_start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     6be:	84 ea       	ldi	r24, 0xA4	; 164
     6c0:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
     6c2:	06 b6       	in	r0, 0x36	; 54
     6c4:	07 fe       	sbrs	r0, 7
     6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <i2c_start+0x4>
	{
	}
}
     6c8:	08 95       	ret

000006ca <i2c_stop>:
/****************************************
** STOP CONDITION OF I2C COMMUNICATION **
****************************************/
void i2c_stop()
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ca:	84 e9       	ldi	r24, 0x94	; 148
     6cc:	86 bf       	out	0x36, r24	; 54
}
     6ce:	08 95       	ret

000006d0 <i2c_write>:
/*******************************************
** WRITE/SEND 1 BYTE OF I2C COMMUNICATION **
*******************************************/
void i2c_write(unsigned char data)
{
	TWDR = data;
     6d0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
     6d2:	84 e8       	ldi	r24, 0x84	; 132
     6d4:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
     6d6:	06 b6       	in	r0, 0x36	; 54
     6d8:	07 fe       	sbrs	r0, 7
     6da:	fd cf       	rjmp	.-6      	; 0x6d6 <i2c_write+0x6>
	{
	}
}
     6dc:	08 95       	ret

000006de <i2c_read>:
/**********************************************
** READ/RECEIVE BYTE(S) OF I2C COMMUNICATION **
**********************************************/
unsigned char i2c_read(unsigned char isLast)
{
	if(isLast == 0 )
     6de:	88 23       	and	r24, r24
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <i2c_read+0x8>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);	// to next receive byte
     6e2:	84 ec       	ldi	r24, 0xC4	; 196
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <i2c_read+0xa>
	}
	else
	{
		TWCR = (1<<TWINT)|(1<<TWEN);			// to end of communication
     6e6:	84 e8       	ldi	r24, 0x84	; 132
     6e8:	86 bf       	out	0x36, r24	; 54
	}
	
	while((TWCR & (1<<TWINT)) == 0)
     6ea:	06 b6       	in	r0, 0x36	; 54
     6ec:	07 fe       	sbrs	r0, 7
     6ee:	fd cf       	rjmp	.-6      	; 0x6ea <i2c_read+0xc>
	{
	}
	return TWDR;
     6f0:	83 b1       	in	r24, 0x03	; 3
}
     6f2:	08 95       	ret

000006f4 <LCD_EXECUTE_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_EXECUTE_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
     6f4:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
     6f6:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     6f8:	87 ff       	sbrs	r24, 7
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <LCD_EXECUTE_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     6fc:	d8 9a       	sbi	0x1b, 0	; 27
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <LCD_EXECUTE_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
     700:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
     702:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     704:	9f 5f       	subi	r25, 0xFF	; 255
     706:	98 30       	cpi	r25, 0x08	; 8
     708:	11 f0       	breq	.+4      	; 0x70e <LCD_EXECUTE_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     70a:	88 0f       	add	r24, r24
     70c:	f4 cf       	rjmp	.-24     	; 0x6f6 <LCD_EXECUTE_COMMAND+0x2>
	}
//update from down comment
	LCD_REGSELECT_low();	// RS = 0
     70e:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
     710:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
     712:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
	LCD_RCK_low();
     714:	da 98       	cbi	0x1b, 2	; 27
     716:	88 ea       	ldi	r24, 0xA8	; 168
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	fc 01       	movw	r30, r24
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <LCD_EXECUTE_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
     720:	da 9a       	sbi	0x1b, 2	; 27
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <LCD_EXECUTE_COMMAND+0x2e>
	LCD_REGSELECT_low();	// RS = 0
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);			//rcall 180 us
*/
	LCD_ENABLE_low();		// EN = 0
     726:	db 98       	cbi	0x1b, 3	; 27
     728:	80 e9       	ldi	r24, 0x90	; 144
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <LCD_EXECUTE_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us

}
     730:	08 95       	ret

00000732 <LCD_EXECUTE_DATA>:

/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	a8 ea       	ldi	r26, 0xA8	; 168
     73c:	b2 e0       	ldi	r27, 0x02	; 2
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];
     73e:	c0 e9       	ldi	r28, 0x90	; 144
     740:	d1 e0       	ldi	r29, 0x01	; 1
     742:	22 c0       	rjmp	.+68     	; 0x788 <LCD_EXECUTE_DATA+0x56>
     744:	fc 01       	movw	r30, r24
     746:	e4 0f       	add	r30, r20
     748:	f5 1f       	adc	r31, r21
     74a:	e0 81       	ld	r30, Z
     74c:	20 e0       	ldi	r18, 0x00	; 0

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
     74e:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     750:	e7 ff       	sbrs	r30, 7
     752:	02 c0       	rjmp	.+4      	; 0x758 <LCD_EXECUTE_DATA+0x26>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     754:	d8 9a       	sbi	0x1b, 0	; 27
     756:	01 c0       	rjmp	.+2      	; 0x75a <LCD_EXECUTE_DATA+0x28>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
     758:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
     75a:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     75c:	2f 5f       	subi	r18, 0xFF	; 255
     75e:	28 30       	cpi	r18, 0x08	; 8
     760:	11 f0       	breq	.+4      	; 0x766 <LCD_EXECUTE_DATA+0x34>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     762:	ee 0f       	add	r30, r30
     764:	f4 cf       	rjmp	.-24     	; 0x74e <LCD_EXECUTE_DATA+0x1c>
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
     766:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
     768:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
     76a:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
     76c:	da 98       	cbi	0x1b, 2	; 27
     76e:	fd 01       	movw	r30, r26
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <LCD_EXECUTE_DATA+0x3e>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
     774:	da 9a       	sbi	0x1b, 2	; 27
     776:	fd 01       	movw	r30, r26
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <LCD_EXECUTE_DATA+0x46>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
     77c:	db 98       	cbi	0x1b, 3	; 27
     77e:	fe 01       	movw	r30, r28
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <LCD_EXECUTE_DATA+0x4e>
/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
     784:	4f 5f       	subi	r20, 0xFF	; 255
     786:	5f 4f       	sbci	r21, 0xFF	; 255
     788:	46 17       	cp	r20, r22
     78a:	57 07       	cpc	r21, r23
     78c:	dc f2       	brlt	.-74     	; 0x744 <LCD_EXECUTE_DATA+0x12>
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}

//	LCD_EXECUTE_DATA_LAST();	// flush -> posleden simvol ili gore v cikala count_ns < numsymbols+1 ili count_ns <= numsymbols
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <LCD_EXECUTE_DATA_ONE>:

/************************************************
** WRITE/TRANSMIT ONE DATA BYTE TO LCD DISPLAY **
************************************************/
void LCD_EXECUTE_DATA_ONE(unsigned char data)	// HELP: LCD_EXECUTE_DATA(unsigned char data_byte_symbols) // LCD shift left out, msb is first
{
     794:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
     796:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     798:	87 ff       	sbrs	r24, 7
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <LCD_EXECUTE_DATA_ONE+0xc>
		{
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     79c:	d8 9a       	sbi	0x1b, 0	; 27
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <LCD_EXECUTE_DATA_ONE+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
     7a0:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
     7a2:	d9 9a       	sbi	0x1b, 1	; 27
{
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     7a4:	9f 5f       	subi	r25, 0xFF	; 255
     7a6:	98 30       	cpi	r25, 0x08	; 8
     7a8:	11 f0       	breq	.+4      	; 0x7ae <LCD_EXECUTE_DATA_ONE+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     7aa:	88 0f       	add	r24, r24
     7ac:	f4 cf       	rjmp	.-24     	; 0x796 <LCD_EXECUTE_DATA_ONE+0x2>
	}
//update from down comment
	LCD_REGSELECT_high();	// RS = 1
     7ae:	dd 9a       	sbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
     7b0:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
     7b2:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment

	LCD_RCK_low();
     7b4:	da 98       	cbi	0x1b, 2	; 27
     7b6:	88 ea       	ldi	r24, 0xA8	; 168
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	fc 01       	movw	r30, r24
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <LCD_EXECUTE_DATA_ONE+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
     7c0:	da 9a       	sbi	0x1b, 2	; 27
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <LCD_EXECUTE_DATA_ONE+0x2e>
	LCD_REGSELECT_high();	// RS = 1
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);
*/
	LCD_ENABLE_low();		// EN = 0
     7c6:	db 98       	cbi	0x1b, 3	; 27
     7c8:	80 e9       	ldi	r24, 0x90	; 144
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <LCD_EXECUTE_DATA_ONE+0x38>
	_delay_us(100);
}
     7d0:	08 95       	ret

000007d2 <LCD_EXECUTE_DATA_LAST>:
/*****************************************************************************
** WRITE/TRANSMIT LAST DATA BYTE TO LCD DISPLAY AND FLUSH SN74HC595 BUFFER  **
*****************************************************************************/
void LCD_EXECUTE_DATA_LAST()	// flush -> izchistvane na bufer - prinuditelno izpisvane na posleden simvol
{
	LCD_ENABLE_low();
     7d2:	db 98       	cbi	0x1b, 3	; 27
	LCD_READWRITE_low();
     7d4:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
     7d6:	dd 9a       	sbi	0x1b, 5	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7d8:	85 ed       	ldi	r24, 0xD5	; 213
     7da:	98 2f       	mov	r25, r24
     7dc:	9a 95       	dec	r25
     7de:	f1 f7       	brne	.-4      	; 0x7dc <LCD_EXECUTE_DATA_LAST+0xa>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
	LCD_ENABLE_high();
     7e0:	db 9a       	sbi	0x1b, 3	; 27
	LCD_READWRITE_low();
     7e2:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
     7e4:	dd 9a       	sbi	0x1b, 5	; 27
     7e6:	8a 95       	dec	r24
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <LCD_EXECUTE_DATA_LAST+0x14>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
}
     7ea:	08 95       	ret

000007ec <LCD_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
     7ec:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
     7ee:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     7f0:	87 ff       	sbrs	r24, 7
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <LCD_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     7f4:	d8 9a       	sbi	0x1b, 0	; 27
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <LCD_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
     7f8:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
     7fa:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     7fc:	9f 5f       	subi	r25, 0xFF	; 255
     7fe:	98 30       	cpi	r25, 0x08	; 8
     800:	11 f0       	breq	.+4      	; 0x806 <LCD_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     802:	88 0f       	add	r24, r24
     804:	f4 cf       	rjmp	.-24     	; 0x7ee <LCD_COMMAND+0x2>
	}
//update from down comment
	LCD_REGSELECT_low();	// RS = 0
     806:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
     808:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
     80a:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
	LCD_RCK_low();
     80c:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     80e:	88 ea       	ldi	r24, 0xA8	; 168
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	fc 01       	movw	r30, r24
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <LCD_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
     818:	da 9a       	sbi	0x1b, 2	; 27
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <LCD_COMMAND+0x2e>
	_delay_us(170);			//rcall 180 us

	LCD_ENABLE_low();		// EN = 0
     81e:	db 98       	cbi	0x1b, 3	; 27
     820:	80 e9       	ldi	r24, 0x90	; 144
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <LCD_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us
}
     828:	08 95       	ret

0000082a <LCD_CLEAR_CONTAIN>:
/**************************************
** CLEAR ALL CONTAINS ON LCD DISPLAY **
**************************************/
void LCD_CLEAR_CONTAIN()
{
	LCD_COMMAND(LCD_CLEAR);						// 0b00000001	// 1. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
     830:	80 ec       	ldi	r24, 0xC0	; 192
     832:	92 e1       	ldi	r25, 0x12	; 18
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <LCD_CLEAR_CONTAIN+0xa>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
}
     838:	08 95       	ret

0000083a <LCD_INIT>:
/**********************************
** INITIZLIZATION OF LCD DISPLAY **
**********************************/
void LCD_INIT()
{
	LCD_COMMAND(LCD_8BIT_2ROWS_FONT5X7);		// 0b00111000	// 1. Function set: 8-bit interface data (DL = 1), 2-line display (N = 1), 5 x 7 dot character font (F = 0)
     83a:	88 e3       	ldi	r24, 0x38	; 56
     83c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_ENTRY_MODE_INC_NOSHIFT);	// 0b00000110	// 2. Entry mode set: Increment by 1 (I/D = 1), No shift (S = 0)
     840:	86 e0       	ldi	r24, 0x06	; 6
     842:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_MOVE_FIRST);								// 3.
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_CLEAR);						// 0b00000001	// 4. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
     852:	80 ec       	ldi	r24, 0xC0	; 192
     854:	92 e1       	ldi	r25, 0x12	; 18
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <LCD_INIT+0x1c>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
//	LCD_COMMAND(LCD_ON_BLINK_CURSOR);			// 0b00001111	// 5. Display on/off control: Display on (D = 1), Cursor on (C = 1), Blinking on (B = 1)
//	_delay_us(40);	// 37 uS	// comment for simulation
//	LCD_COMMAND(LCD_OFF);										// 5. Display off
}
     85a:	08 95       	ret

0000085c <LCD_DATA_STRING>:

/*********************************************************
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void LCD_DATA_STRING(char *data)
{
     85c:	fc 01       	movw	r30, r24
     85e:	28 ea       	ldi	r18, 0xA8	; 168
     860:	32 e0       	ldi	r19, 0x02	; 2
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
     862:	40 e9       	ldi	r20, 0x90	; 144
     864:	51 e0       	ldi	r21, 0x01	; 1
     866:	1d c0       	rjmp	.+58     	; 0x8a2 <__stack+0x43>
     868:	90 e0       	ldi	r25, 0x00	; 0
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
     86a:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     86c:	87 ff       	sbrs	r24, 7
     86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     870:	d8 9a       	sbi	0x1b, 0	; 27
     872:	01 c0       	rjmp	.+2      	; 0x876 <__stack+0x17>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
     874:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
     876:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     878:	9f 5f       	subi	r25, 0xFF	; 255
     87a:	98 30       	cpi	r25, 0x08	; 8
     87c:	11 f0       	breq	.+4      	; 0x882 <__stack+0x23>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     87e:	88 0f       	add	r24, r24
     880:	f4 cf       	rjmp	.-24     	; 0x86a <__stack+0xb>
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;
     882:	31 96       	adiw	r30, 0x01	; 1
			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
     884:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
     886:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
     888:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
     88a:	da 98       	cbi	0x1b, 2	; 27
     88c:	c9 01       	movw	r24, r18
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <__stack+0x2f>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
     892:	da 9a       	sbi	0x1b, 2	; 27
     894:	c9 01       	movw	r24, r18
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <__stack+0x37>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
     89a:	db 98       	cbi	0x1b, 3	; 27
     89c:	ca 01       	movw	r24, r20
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <__stack+0x3f>
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void LCD_DATA_STRING(char *data)
{
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
     8a2:	80 81       	ld	r24, Z
     8a4:	88 23       	and	r24, r24
     8a6:	01 f7       	brne	.-64     	; 0x868 <__stack+0x9>
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}
}
     8a8:	08 95       	ret

000008aa <LCD_CGRAM_CUSTOM_SYMBOLS>:
	 { 0x0E, 0x1B, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },	// Battery Charging  80%	// addr40-47
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
	for(rows=0; rows<7; rows++)
     8ae:	10 92 b7 03 	sts	0x03B7, r1
     8b2:	10 92 b6 03 	sts	0x03B6, r1
     8b6:	25 c0       	rjmp	.+74     	; 0x902 <LCD_CGRAM_CUSTOM_SYMBOLS+0x58>
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
     8b8:	08 96       	adiw	r24, 0x08	; 8
     8ba:	88 0f       	add	r24, r24
     8bc:	88 0f       	add	r24, r24
     8be:	88 0f       	add	r24, r24
     8c0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_EXECUTE_COMMAND>
     8c4:	c0 e0       	ldi	r28, 0x00	; 0
     8c6:	d0 e0       	ldi	r29, 0x00	; 0
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
     8c8:	e0 91 b6 03 	lds	r30, 0x03B6
     8cc:	f0 91 b7 03 	lds	r31, 0x03B7
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	8a 95       	dec	r24
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <LCD_CGRAM_CUSTOM_SYMBOLS+0x28>
     8da:	ec 0f       	add	r30, r28
     8dc:	fd 1f       	adc	r31, r29
     8de:	e5 52       	subi	r30, 0x25	; 37
     8e0:	fd 4f       	sbci	r31, 0xFD	; 253
     8e2:	80 81       	ld	r24, Z
     8e4:	0e 94 ca 03 	call	0x794	; 0x794 <LCD_EXECUTE_DATA_ONE>
void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
     8e8:	21 96       	adiw	r28, 0x01	; 1
     8ea:	c8 30       	cpi	r28, 0x08	; 8
     8ec:	d1 05       	cpc	r29, r1
     8ee:	61 f7       	brne	.-40     	; 0x8c8 <LCD_CGRAM_CUSTOM_SYMBOLS+0x1e>
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
     8f0:	80 91 b6 03 	lds	r24, 0x03B6
     8f4:	90 91 b7 03 	lds	r25, 0x03B7
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	90 93 b7 03 	sts	0x03B7, r25
     8fe:	80 93 b6 03 	sts	0x03B6, r24
     902:	80 91 b6 03 	lds	r24, 0x03B6
     906:	90 91 b7 03 	lds	r25, 0x03B7
     90a:	87 30       	cpi	r24, 0x07	; 7
     90c:	91 05       	cpc	r25, r1
     90e:	a4 f2       	brlt	.-88     	; 0x8b8 <LCD_CGRAM_CUSTOM_SYMBOLS+0xe>
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
		}
	}
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <LCD_DATA_ULONG>:
/****************************************************************
** WRITE/TRANSMIT MORE DATA UNSIGNED LONG BYTES TO LCD DISPLAY **
****************************************************************/
// USE THIS: lcdDataULong( (unsigned long)k + 1 );
void LCD_DATA_ULONG(unsigned long data)		// void lcdDataULong(const unsigned long data)
{
     916:	df 93       	push	r29
     918:	cf 93       	push	r28
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	2a 97       	sbiw	r28, 0x0a	; 10
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(ultoa(data, buffer, 10));	// 10 -> DECIMAL
     92a:	ae 01       	movw	r20, r28
     92c:	4f 5f       	subi	r20, 0xFF	; 255
     92e:	5f 4f       	sbci	r21, 0xFF	; 255
     930:	2a e0       	ldi	r18, 0x0A	; 10
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	0e 94 9d 07 	call	0xf3a	; 0xf3a <ultoa>
     938:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
}
     93c:	2a 96       	adiw	r28, 0x0a	; 10
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	cf 91       	pop	r28
     94a:	df 91       	pop	r29
     94c:	08 95       	ret

0000094e <LCD_DATA_LONG>:
/*******************************************************
** WRITE/TRANSMIT MORE DATA LONG BYTES TO LCD DISPLAY **
*******************************************************/
// USE THIS: lcdDataLong( (long)k + 1 );
void LCD_DATA_LONG(long data)		// void lcdDataLong(const long data)
{
     94e:	df 93       	push	r29
     950:	cf 93       	push	r28
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	2a 97       	sbiw	r28, 0x0a	; 10
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(ltoa(data, buffer, 10));	// 10 -> DECIMAL
     962:	ae 01       	movw	r20, r28
     964:	4f 5f       	subi	r20, 0xFF	; 255
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	2a e0       	ldi	r18, 0x0A	; 10
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	0e 94 69 07 	call	0xed2	; 0xed2 <ltoa>
     970:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
}
     974:	2a 96       	adiw	r28, 0x0a	; 10
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	cf 91       	pop	r28
     982:	df 91       	pop	r29
     984:	08 95       	ret

00000986 <LCD_DATA_INT>:
/******************************************************
** WRITE/TRANSMIT MORE DATA INT BYTES TO LCD DISPLAY **
******************************************************/
// USE THIS: lcdDataInt( (int)k + 1 );
void LCD_DATA_INT(int data)		// void lcdDataInt(const int data)
{
     986:	df 93       	push	r29
     988:	cf 93       	push	r28
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	2a 97       	sbiw	r28, 0x0a	; 10
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(itoa(data, buffer, 10));	// 10 -> DECIMAL
     99a:	be 01       	movw	r22, r28
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	4a e0       	ldi	r20, 0x0A	; 10
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	0e 94 48 07 	call	0xe90	; 0xe90 <itoa>
     9a8:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
}
     9ac:	2a 96       	adiw	r28, 0x0a	; 10
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	cf 91       	pop	r28
     9ba:	df 91       	pop	r29
     9bc:	08 95       	ret

000009be <LCD_DATA_UINT>:
/******************************************************
** WRITE/TRANSMIT MORE DATA INT BYTES TO LCD DISPLAY **
******************************************************/
// USE THIS: lcdDataUInt( (unsigned int)k + 1 );
void LCD_DATA_UINT(unsigned int data)		// void lcdDataUInt(const unsigned int data)
{
     9be:	df 93       	push	r29
     9c0:	cf 93       	push	r28
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	2a 97       	sbiw	r28, 0x0a	; 10
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(utoa(data, buffer, 10));	// 10 -> DECIMAL
     9d2:	be 01       	movw	r22, r28
     9d4:	6f 5f       	subi	r22, 0xFF	; 255
     9d6:	7f 4f       	sbci	r23, 0xFF	; 255
     9d8:	4a e0       	ldi	r20, 0x0A	; 10
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	0e 94 c2 07 	call	0xf84	; 0xf84 <utoa>
     9e0:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
}
     9e4:	2a 96       	adiw	r28, 0x0a	; 10
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	cf 91       	pop	r28
     9f2:	df 91       	pop	r29
     9f4:	08 95       	ret

000009f6 <PGA2310_Volume_Update>:

/*************************************
** DEFINITION PGA2310 VOLUME UPDATE **
*************************************/
void PGA2310_Volume_Update(unsigned char pgaVolumeLeft, unsigned char pgaVolumeRight)
{
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	18 2f       	mov	r17, r24
     9fc:	06 2f       	mov	r16, r22
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
     9fe:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
     a00:	0e 94 1e 06 	call	0xc3c	; 0xc3c <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
     a04:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a06:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
     a08:	81 2f       	mov	r24, r17
     a0a:	60 2f       	mov	r22, r16
     a0c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
     a10:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA7 - /SS ENABLE
     a12:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
     a14:	81 2f       	mov	r24, r17
     a16:	60 2f       	mov	r22, r16
     a18:	0e 94 1e 06 	call	0xc3c	; 0xc3c <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
     a1c:	df 9a       	sbi	0x1b, 7	; 27

//	return SUCCESS;
}
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	08 95       	ret

00000a24 <pga2310_init>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_init()
{
	spi_init();
     a24:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
     a28:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
     a32:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a34:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
     a3e:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a40:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	0e 94 1e 06 	call	0xc3c	; 0xc3c <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
     a4a:	df 9a       	sbi	0x1b, 7	; 27
}
     a4c:	08 95       	ret

00000a4e <pga2310_reset>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_reset()
{
	spi_init();
     a4e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
     a52:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	0e 94 1e 06 	call	0xc3c	; 0xc3c <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
     a5c:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a5e:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	0e 94 1e 06 	call	0xc3c	; 0xc3c <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
     a68:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a6a:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	0e 94 1e 06 	call	0xc3c	; 0xc3c <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
     a74:	df 9a       	sbi	0x1b, 7	; 27
}
     a76:	08 95       	ret

00000a78 <uart_setup>:
			
		}
	}

//	UBRRL = 103;			// Baudrate: 9600; Parity: 0; StopBits: 1 (Error = 0.2%; 16MHz)
	UBRRH = 0;
     a78:	10 bc       	out	0x20, r1	; 32

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
     a7a:	86 e8       	ldi	r24, 0x86	; 134
     a7c:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0b10011000;		// TXEN,RXEN,RXCIE					// Enable Uart/Usart TX and RX
     a7e:	88 e9       	ldi	r24, 0x98	; 152
     a80:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
     a82:	1c b8       	out	0x0c, r1	; 12
}
     a84:	08 95       	ret

00000a86 <uart_transmit>:

/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
     a86:	ac 01       	movw	r20, r24
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <uart_transmit+0x1a>
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		//UDR = uart_data[count_ns];
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
     a8e:	5d 9b       	sbis	0x0b, 5	; 11
     a90:	fe cf       	rjmp	.-4      	; 0xa8e <uart_transmit+0x8>
		{
		}
		UDR = uart_data[count_ns];
     a92:	fa 01       	movw	r30, r20
     a94:	e2 0f       	add	r30, r18
     a96:	f3 1f       	adc	r31, r19
     a98:	80 81       	ld	r24, Z
     a9a:	8c b9       	out	0x0c, r24	; 12
/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
     a9c:	2f 5f       	subi	r18, 0xFF	; 255
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	26 17       	cp	r18, r22
     aa2:	37 07       	cpc	r19, r23
     aa4:	a4 f3       	brlt	.-24     	; 0xa8e <uart_transmit+0x8>
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
		{
		}
		UDR = uart_data[count_ns];
	}
}
     aa6:	08 95       	ret

00000aa8 <uart_transmit_one>:
/***************************************
** TRANSMIT/SEND 1 BYTE OF UART/USART **
***************************************/
void uart_transmit_one(unsigned char uart_data)
{
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
     aa8:	5d 9b       	sbis	0x0b, 5	; 11
     aaa:	fe cf       	rjmp	.-4      	; 0xaa8 <uart_transmit_one>
	{
	}
	UDR = uart_data;
     aac:	8c b9       	out	0x0c, r24	; 12
}
     aae:	08 95       	ret

00000ab0 <uart_transmit_DEC_to_BCD>:

/*****************************************************************		// NOT FINISHED
** TRANSMIT/SEND 1 BYTE CONVERTED FROM DEC TO BCD OF UART/USART **		// NOT FINISHED
*****************************************************************/		// NOT FINISHED
void uart_transmit_DEC_to_BCD(unsigned char dec_to_bcd_data)
{// pravi se preobrazuvane ot DEC to BCD i preobrazuvane za izvejdane na parviq simvol s filtar
     ab0:	98 2f       	mov	r25, r24
	
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
     ab2:	5d 9b       	sbis	0x0b, 5	; 11
     ab4:	fe cf       	rjmp	.-4      	; 0xab2 <uart_transmit_DEC_to_BCD+0x2>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data>>4));
     ab6:	89 2f       	mov	r24, r25
     ab8:	82 95       	swap	r24
     aba:	8f 70       	andi	r24, 0x0F	; 15
     abc:	80 5d       	subi	r24, 0xD0	; 208
     abe:	8c b9       	out	0x0c, r24	; 12

	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
     ac0:	5d 9b       	sbis	0x0b, 5	; 11
     ac2:	fe cf       	rjmp	.-4      	; 0xac0 <uart_transmit_DEC_to_BCD+0x10>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data & 0x0F));
     ac4:	9f 70       	andi	r25, 0x0F	; 15
     ac6:	90 5d       	subi	r25, 0xD0	; 208
     ac8:	9c b9       	out	0x0c, r25	; 12
	byte bcdToDec(byte val)
	{
  		return ( (val/16*10) + (val%16) );
	}
*/
}
     aca:	08 95       	ret

00000acc <transmitUart>:
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
     acc:	5d 9b       	sbis	0x0b, 5	; 11
     ace:	fe cf       	rjmp	.-4      	; 0xacc <transmitUart>
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
     ad0:	8c b9       	out	0x0c, r24	; 12
}
     ad2:	08 95       	ret

00000ad4 <transmitUartString>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
     ad4:	fc 01       	movw	r30, r24
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <transmitUartString+0xc>
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
     ad8:	5d 9b       	sbis	0x0b, 5	; 11
     ada:	fe cf       	rjmp	.-4      	; 0xad8 <transmitUartString+0x4>
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
	{
		transmitUart(*data++);
     adc:	31 96       	adiw	r30, 0x01	; 1
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
     ade:	8c b9       	out	0x0c, r24	; 12
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
     ae0:	80 81       	ld	r24, Z
     ae2:	88 23       	and	r24, r24
     ae4:	c9 f7       	brne	.-14     	; 0xad8 <transmitUartString+0x4>
	{
		transmitUart(*data++);
	}
}
     ae6:	08 95       	ret

00000ae8 <receiveUart>:
/**************************************************		// NOT FINISHED
** RECEIVE/READ unsigned char BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
unsigned char receiveUart(void)
{
	while (!(UCSRA & (1<<RXC)))
     ae8:	5f 9b       	sbis	0x0b, 7	; 11
     aea:	fe cf       	rjmp	.-4      	; 0xae8 <receiveUart>
	{};							/* Wait for data to be received */
	return UDR;					/* Get and return received data from buffer */
     aec:	8c b1       	in	r24, 0x0c	; 12
}
     aee:	08 95       	ret

00000af0 <transmitUartLong>:
/******************************************		// NOT FINISHED
** TRANSMIT/SEND long BYTE OF UART/USART **		// NOT FINISHED
******************************************/		// NOT FINISHED
// USE THIS: transmitUartLong( (long)k + 1 );
void transmitUartLong(long data)		// void transmitUartLong(const long data)
{
     af0:	df 93       	push	r29
     af2:	cf 93       	push	r28
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	2a 97       	sbiw	r28, 0x0a	; 10
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ltoa(data, buffer, 10));		// 10 -> DECIMAL
     b04:	ae 01       	movw	r20, r28
     b06:	4f 5f       	subi	r20, 0xFF	; 255
     b08:	5f 4f       	sbci	r21, 0xFF	; 255
     b0a:	2a e0       	ldi	r18, 0x0A	; 10
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	0e 94 69 07 	call	0xed2	; 0xed2 <ltoa>
     b12:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
}
     b16:	2a 96       	adiw	r28, 0x0a	; 10
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	08 95       	ret

00000b28 <transmitUartULong>:
/***************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned long BYTE OF UART/USART **		// NOT FINISHED
***************************************************/		// NOT FINISHED
// USE THIS: transmitUartULong( (unsigned long)k + 1 );
void transmitUartULong(unsigned long data)		// void transmitUartULong(const unsigned long data)
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2a 97       	sbiw	r28, 0x0a	; 10
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ultoa(data, buffer, 10));		// 10 -> DECIMAL
     b3c:	ae 01       	movw	r20, r28
     b3e:	4f 5f       	subi	r20, 0xFF	; 255
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	2a e0       	ldi	r18, 0x0A	; 10
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	0e 94 9d 07 	call	0xf3a	; 0xf3a <ultoa>
     b4a:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
}
     b4e:	2a 96       	adiw	r28, 0x0a	; 10
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <transmitUartInt>:
/*****************************************		// NOT FINISHED
** TRANSMIT/SEND int BYTE OF UART/USART **		// NOT FINISHED
*****************************************/		// NOT FINISHED
// USE THIS: transmitUartInt( (int)k + 1 );
void transmitUartInt(int data)		// void transmitUartInt(const int data)
{
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	2a 97       	sbiw	r28, 0x0a	; 10
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(itoa(data, buffer, 10));		// 10 -> DECIMAL
     b74:	be 01       	movw	r22, r28
     b76:	6f 5f       	subi	r22, 0xFF	; 255
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	4a e0       	ldi	r20, 0x0A	; 10
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	0e 94 48 07 	call	0xe90	; 0xe90 <itoa>
     b82:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
}
     b86:	2a 96       	adiw	r28, 0x0a	; 10
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <transmitUartUInt>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned int BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: transmitUartUInt( (unsigned int)k + 1 );
void transmitUartUInt(unsigned int data)		// void transmitUartUInt(const unsigned int data)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	2a 97       	sbiw	r28, 0x0a	; 10
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(utoa(data, buffer, 10));		// 10 -> DECIMAL
     bac:	be 01       	movw	r22, r28
     bae:	6f 5f       	subi	r22, 0xFF	; 255
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	4a e0       	ldi	r20, 0x0A	; 10
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	0e 94 c2 07 	call	0xf84	; 0xf84 <utoa>
     bba:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
}
     bbe:	2a 96       	adiw	r28, 0x0a	; 10
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <uart_init>:
{
	switch(F_CPU)
	{
		case 16000000UL:
		{
			UBRRL = 103;	// Baudrate: 9600; (Error = 0.2%; 16MHz)
     bd0:	87 e6       	ldi	r24, 0x67	; 103
     bd2:	89 b9       	out	0x09, r24	; 9
			UBRRH = 0;
     bd4:	10 bc       	out	0x20, r1	; 32
		{
			break;
		}
	}
#ifdef DEBUG_SETTING
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
     bd6:	8c e0       	ldi	r24, 0x0C	; 12
     bd8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
	LCD_COMMAND(LCD_SELECT_4ROW);	// select row 2								// and next is update volume lcd information
     bdc:	84 ed       	ldi	r24, 0xD4	; 212
     bde:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_COMMAND>
	LCD_DATA_STRING("Freq: ");		// 20 symbols			
     be2:	83 e1       	ldi	r24, 0x13	; 19
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
	LCD_DATA_ULONG(F_CPU);			// 20 symbols
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	74 e2       	ldi	r23, 0x24	; 36
     bee:	84 ef       	ldi	r24, 0xF4	; 244
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 8b 04 	call	0x916	; 0x916 <LCD_DATA_ULONG>
	LCD_DATA_STRING(" MHz");		// 20 symbols
     bf6:	8a e1       	ldi	r24, 0x1A	; 26
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_DATA_STRING>
//	debug_print();

	// Razpoznavane na baudrate (skorost): 1. Izprashta se byte. 2. Poluchava se byte. 3. Sravnqva se polucheniq byte == izprateniq byte. // This is LOOP TX->RX
	// 4. Ako byte pri sravnqvaneto e edin i sasht to skorostta e izbranata v momenta, ako byte e razlichen - da se probva sas sledvashta baudrate.

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
     bfe:	86 e8       	ldi	r24, 0x86	; 134
     c00:	80 bd       	out	0x20, r24	; 32
//	UCSRB = 0b10011000;		// Enable TXEN,RXEN,RXCIE	// Enable Uart/Usart TX and RX
	UCSRB = 0b00001000;		// Enable only TXEN			// Enable Uart/Usart only TX
     c02:	88 e0       	ldi	r24, 0x08	; 8
     c04:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
     c06:	1c b8       	out	0x0c, r1	; 12

#ifdef DEBUG_INFO
	transmitUartString("\r\n");
     c08:	8f e1       	ldi	r24, 0x1F	; 31
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
#if DEBUG_SETTING
	transmitUartString("[UART Serial Port Settings] Baud rate: 9600, Data bits: 8 bits, Stop bits: 1 bit, Parity: None, Flow control: None or XON/XOFF\r\n");
     c10:	82 e2       	ldi	r24, 0x22	; 34
     c12:	93 e0       	ldi	r25, 0x03	; 3
     c14:	0e 94 6a 05 	call	0xad4	; 0xad4 <transmitUartString>
#endif
}
     c18:	08 95       	ret

00000c1a <spi_init>:
/**************************
** INITIZLIZATION OF SPI **
***************************/
void spi_init()
{
	SPSR = (0<<SPIF)|(0<<WCOL)|(0<<SPI2X);
     c1a:	1e b8       	out	0x0e, r1	; 14
//	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);			//0b01010010	// SPR1   = 1 - 16 000 000 / 64  = 250 000 = 250kHz  // KOMENTAR ZARADI SIMULACIQTA - PROTEUS BLOKIRANE ZARADI BIT V REGISTAR
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz	 // KAKVA KOMBINACIQ OT 4-te BITa VODI DO RAZBLOKIRANETO ???
     c1c:	83 e5       	ldi	r24, 0x53	; 83
     c1e:	8d b9       	out	0x0d, r24	; 13
	SPDR = 0b00000000;
     c20:	1f b8       	out	0x0f, r1	; 15

	PGA2310_U8_SPI_CS_high();	// /SS - DISABLE
	PGA2310_U8_SPI(0b00000000, 0b00000000);
	*/

	SPCR = (0<<SPE);
     c22:	1d b8       	out	0x0d, r1	; 13
}
     c24:	08 95       	ret

00000c26 <spi_start>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c26:	83 e5       	ldi	r24, 0x53	; 83
     c28:	8d b9       	out	0x0d, r24	; 13
}
     c2a:	08 95       	ret

00000c2c <spi_stop>:
/**************************************
** DEFINITION SPI FUNCTION STOP ONLY **
**************************************/
void spi_stop()
{
	SPCR = (0<<SPE);
     c2c:	1d b8       	out	0x0d, r1	; 13
}
     c2e:	08 95       	ret

00000c30 <spi_write_one_byte>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c30:	93 e5       	ldi	r25, 0x53	; 83
     c32:	9d b9       	out	0x0d, r25	; 13
void spi_write_one_byte(unsigned char data)	// void PGA2310_U7_SPI(byte volume_left, byte volume_right)	//PGA2310_U7_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data;				//volume_right;
     c34:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
     c36:	77 9b       	sbis	0x0e, 7	; 14
     c38:	fe cf       	rjmp	.-4      	; 0xc36 <spi_write_one_byte+0x6>
	{
	}
}
     c3a:	08 95       	ret

00000c3c <spi_write_two_bytes>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c3c:	93 e5       	ldi	r25, 0x53	; 83
     c3e:	9d b9       	out	0x0d, r25	; 13
void spi_write_two_bytes(unsigned char data1, unsigned char data2)	// void PGA2310_U6_SPI(byte volume_left, byte volume_right)	//PGA2310_U6_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data1;				//volume_left;
     c40:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
     c42:	77 9b       	sbis	0x0e, 7	; 14
     c44:	fe cf       	rjmp	.-4      	; 0xc42 <spi_write_two_bytes+0x6>
	{
	}

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data2;				//volume_right;
     c46:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)))
     c48:	77 9b       	sbis	0x0e, 7	; 14
     c4a:	fe cf       	rjmp	.-4      	; 0xc48 <spi_write_two_bytes+0xc>
	{
	}
}
     c4c:	08 95       	ret

00000c4e <spi_write_more_bytes>:

/*********************************************
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
     c4e:	fc 01       	movw	r30, r24
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c50:	93 e5       	ldi	r25, 0x53	; 83
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <spi_write_more_bytes+0x12>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
     c54:	31 96       	adiw	r30, 0x01	; 1
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c56:	9d b9       	out	0x0d, r25	; 13
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
	{
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
		spi_start();
		SPDR = *data;			//volume_left;
     c58:	80 81       	ld	r24, Z
     c5a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)))
     c5c:	77 9b       	sbis	0x0e, 7	; 14
     c5e:	fe cf       	rjmp	.-4      	; 0xc5c <spi_write_more_bytes+0xe>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
     c60:	80 81       	ld	r24, Z
     c62:	88 23       	and	r24, r24
     c64:	b9 f7       	brne	.-18     	; 0xc54 <spi_write_more_bytes+0x6>
		SPDR = *data;			//volume_left;
		while(!(SPSR & (1<<SPIF)))
		{
		}
	}
}
     c66:	08 95       	ret

00000c68 <spi_read_more_bytes>:
unsigned char spi_read_more_bytes()	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
	unsigned char data = 0b00000000;
	//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data;			//volume_left;
     c68:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)))
     c6a:	77 9b       	sbis	0x0e, 7	; 14
     c6c:	fe cf       	rjmp	.-4      	; 0xc6a <spi_read_more_bytes+0x2>
	{
	}
	return data;
}
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	08 95       	ret

00000c72 <decToBcd>:

/**************************************************************
**** CONVERT NORMAL DECIMAL NUMBERS TO BINARY CODED DECIMAL ***
**************************************************************/
unsigned char decToBcd(unsigned char val)
{
     c72:	48 2f       	mov	r20, r24
     c74:	6a e0       	ldi	r22, 0x0A	; 10
     c76:	0e 94 3c 07 	call	0xe78	; 0xe78 <__udivmodqi4>
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	84 e0       	ldi	r24, 0x04	; 4
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	8a 95       	dec	r24
     c86:	e1 f7       	brne	.-8      	; 0xc80 <decToBcd+0xe>
     c88:	84 2f       	mov	r24, r20
     c8a:	0e 94 3c 07 	call	0xe78	; 0xe78 <__udivmodqi4>
	return ( (val/10*16) + (val%10) );	// Get DEC format -> convert DEC to HEX
}
     c8e:	89 2f       	mov	r24, r25
     c90:	82 0f       	add	r24, r18
     c92:	08 95       	ret

00000c94 <bcdToDec>:

/**************************************************************
**** CONVERT BINARY CODED DECIMAL TO NORMAL DECIMAL NUMBERS ***
**************************************************************/
unsigned char bcdToDec(unsigned char val)
{
     c94:	28 2f       	mov	r18, r24
     c96:	22 95       	swap	r18
     c98:	2f 70       	andi	r18, 0x0F	; 15
     c9a:	9a e0       	ldi	r25, 0x0A	; 10
     c9c:	29 9f       	mul	r18, r25
     c9e:	90 01       	movw	r18, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	8f 70       	andi	r24, 0x0F	; 15
	return ( (val/16*10) + (val%16) );	// Get HEX format -> convert HEX to DEC
}
     ca4:	82 0f       	add	r24, r18
     ca6:	08 95       	ret

00000ca8 <shiftRightOutLsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
     ca8:	a0 9a       	sbi	0x14, 0	; 20
     caa:	94 e4       	ldi	r25, 0x44	; 68
     cac:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regALSB & 0x01)	// maska & za log "1" na LSB 0b00000001
     cae:	90 ff       	sbrs	r25, 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <shiftRightOutLsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v LSB
     cb2:	a8 9a       	sbi	0x15, 0	; 21
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <shiftRightOutLsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
     cb6:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	88 30       	cpi	r24, 0x08	; 8
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <shiftRightOutLsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
		}
		
		regALSB = regALSB >> 1;	// shiftvane na >> nadqsno
     cbe:	96 95       	lsr	r25
     cc0:	f6 cf       	rjmp	.-20     	; 0xcae <shiftRightOutLsbFirst+0x6>
     cc2:	08 95       	ret

00000cc4 <shiftLeftOutMsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
     cc4:	a0 9a       	sbi	0x14, 0	; 20
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	84 e4       	ldi	r24, 0x44	; 68

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regAMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     cca:	87 ff       	sbrs	r24, 7
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <shiftLeftOutMsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v MSB
     cce:	a8 9a       	sbi	0x15, 0	; 21
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <shiftLeftOutMsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
     cd2:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     cd4:	9f 5f       	subi	r25, 0xFF	; 255
     cd6:	98 30       	cpi	r25, 0x08	; 8
     cd8:	11 f0       	breq	.+4      	; 0xcde <shiftLeftOutMsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
		}
		
		regAMSB = regAMSB << 1;	// shiftvane na << nalqvo
     cda:	88 0f       	add	r24, r24
     cdc:	f6 cf       	rjmp	.-20     	; 0xcca <shiftLeftOutMsbFirst+0x6>
     cde:	08 95       	ret

00000ce0 <shiftRightInLsbFirst>:
void shiftRightInLsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
     ce0:	a0 98       	cbi	0x14, 0	; 20
     ce2:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
     ce4:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	88 30       	cpi	r24, 0x08	; 8
     cea:	e1 f7       	brne	.-8      	; 0xce4 <shiftRightInLsbFirst+0x4>
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
	}

}
     cec:	08 95       	ret

00000cee <shiftLeftInMsbFirst>:
void shiftLeftInMsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
     cee:	a0 98       	cbi	0x14, 0	; 20
     cf0:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
     cf2:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	88 30       	cpi	r24, 0x08	; 8
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <shiftLeftInMsbFirst+0x4>
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
	}

}
     cfa:	08 95       	ret

00000cfc <delay_ms>:

/*************************************************************
*********** FUNCTION SOFTWARE DELAY IN MILISECONDS ***********
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	0b c0       	rjmp	.+22     	; 0xd18 <delay_ms+0x1c>
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(j=0;j<100;j++)
		{
		  asm("nop");
     d06:	00 00       	nop
		  asm("nop");
     d08:	00 00       	nop
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
	{
		for(j=0;j<100;j++)
     d0a:	2f 5f       	subi	r18, 0xFF	; 255
     d0c:	3f 4f       	sbci	r19, 0xFF	; 255
     d0e:	24 36       	cpi	r18, 0x64	; 100
     d10:	31 05       	cpc	r19, r1
     d12:	c9 f7       	brne	.-14     	; 0xd06 <delay_ms+0xa>
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
     d14:	4f 5f       	subi	r20, 0xFF	; 255
     d16:	5f 4f       	sbci	r21, 0xFF	; 255
     d18:	48 17       	cp	r20, r24
     d1a:	59 07       	cpc	r21, r25
     d1c:	94 f3       	brlt	.-28     	; 0xd02 <delay_ms+0x6>
		{
		  asm("nop");
		  asm("nop");
		}
	}
}
     d1e:	08 95       	ret

00000d20 <rotaryEncoderNikBarzakov>:
** READ/SCAN ROTARY ENCODER OF NIK BARZAKOV **
*********************************************/
char rotaryEncoderNikBarzakov()
{
	char tempEncoder = 0;
	if((ENCODER_A_low()) && (ENCODER_B_low()))			// A0, B0
     d20:	9d 99       	sbic	0x13, 5	; 19
     d22:	0e c0       	rjmp	.+28     	; 0xd40 <rotaryEncoderNikBarzakov+0x20>
     d24:	9c 99       	sbic	0x13, 4	; 19
     d26:	0c c0       	rjmp	.+24     	; 0xd40 <rotaryEncoderNikBarzakov+0x20>
     d28:	88 ec       	ldi	r24, 0xC8	; 200
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <rotaryEncoderNikBarzakov+0xc>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_high()) && (ENCODER_B_low()))		// A1, B0
     d30:	9d 9b       	sbis	0x13, 5	; 19
     d32:	14 c0       	rjmp	.+40     	; 0xd5c <rotaryEncoderNikBarzakov+0x3c>
     d34:	83 b3       	in	r24, 0x13	; 19
     d36:	82 95       	swap	r24
     d38:	8f 70       	andi	r24, 0x0F	; 15
     d3a:	80 95       	com	r24
     d3c:	81 70       	andi	r24, 0x01	; 1
     d3e:	08 95       	ret
// VOLUME UP
			tempEncoder = 1;	//	tempEncoder++;
			// ---> Clockwise; Zavartane po posoka na chasovnikovata strelka.
		}
	}
	else if((ENCODER_A_high()) && (ENCODER_B_low()))	// A1, B0
     d40:	9d 9b       	sbis	0x13, 5	; 19
     d42:	0c c0       	rjmp	.+24     	; 0xd5c <rotaryEncoderNikBarzakov+0x3c>
     d44:	9c 99       	sbic	0x13, 4	; 19
     d46:	0a c0       	rjmp	.+20     	; 0xd5c <rotaryEncoderNikBarzakov+0x3c>
     d48:	88 ec       	ldi	r24, 0xC8	; 200
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <rotaryEncoderNikBarzakov+0x2c>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
     d50:	9d 99       	sbic	0x13, 5	; 19
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <rotaryEncoderNikBarzakov+0x3c>
     d54:	9c 99       	sbic	0x13, 4	; 19
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <rotaryEncoderNikBarzakov+0x3c>
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	08 95       	ret
     d5c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// do nothing
	}
	return tempEncoder;
}
     d5e:	08 95       	ret

00000d60 <rotaryEncoderVer1>:
** READ/SCAN ROTARY ENCODER VERSION 1 / MODEL 1 **
*************************************************/
char rotaryEncoderVer1()	// Check imediate now bits in PIN register.
{
	char tempEncoder = 0;							// A1, B1
	if((ENCODER_A_low()) && (ENCODER_B_high()))			// A0, B1
     d60:	9d 99       	sbic	0x13, 5	; 19
     d62:	0e c0       	rjmp	.+28     	; 0xd80 <rotaryEncoderVer1+0x20>
     d64:	9c 9b       	sbis	0x13, 4	; 19
     d66:	0c c0       	rjmp	.+24     	; 0xd80 <rotaryEncoderVer1+0x20>
     d68:	88 ec       	ldi	r24, 0xC8	; 200
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <rotaryEncoderVer1+0xc>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
     d70:	9d 99       	sbic	0x13, 5	; 19
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <rotaryEncoderVer1+0x3c>
     d74:	83 b3       	in	r24, 0x13	; 19
     d76:	82 95       	swap	r24
     d78:	8f 70       	andi	r24, 0x0F	; 15
     d7a:	80 95       	com	r24
     d7c:	81 70       	andi	r24, 0x01	; 1
     d7e:	08 95       	ret
//			PORTD = volumeMassive[volumeIndex];
			// ---> Clockwise; Zavartane po posoka na chasovnikovata strelka.
		}

	}													// A1. B1
	else if((ENCODER_A_high()) && (ENCODER_B_low()))	// A1, B0
     d80:	9d 9b       	sbis	0x13, 5	; 19
     d82:	0c c0       	rjmp	.+24     	; 0xd9c <rotaryEncoderVer1+0x3c>
     d84:	9c 99       	sbic	0x13, 4	; 19
     d86:	0a c0       	rjmp	.+20     	; 0xd9c <rotaryEncoderVer1+0x3c>
     d88:	88 ec       	ldi	r24, 0xC8	; 200
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <rotaryEncoderVer1+0x2c>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
     d90:	9d 99       	sbic	0x13, 5	; 19
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <rotaryEncoderVer1+0x3c>
     d94:	9c 99       	sbic	0x13, 4	; 19
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <rotaryEncoderVer1+0x3c>
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	08 95       	ret
     d9c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// do nothing
	}
	return tempEncoder;
}
     d9e:	08 95       	ret

00000da0 <rotaryEncoderVer2>:
     da0:	88 ec       	ldi	r24, 0xC8	; 200
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	fc 01       	movw	r30, r24
     da6:	31 97       	sbiw	r30, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <rotaryEncoderVer2+0x6>
     daa:	fc 01       	movw	r30, r24
     dac:	31 97       	sbiw	r30, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <rotaryEncoderVer2+0xc>
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <rotaryEncoderVer2+0x10>
	else
	{
		// do nothing
	}
	return tempEncoder;
}
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	08 95       	ret

00000db8 <RELAYS_IN_INIT>:
/*********************************************
** INITIZLIZATION OF SHIFT REGISTER 74HC595 **
*********************************************/
void RELAYS_IN_INIT()
{
}
     db8:	08 95       	ret

00000dba <RELAYS_OUT_INIT>:

void RELAYS_OUT_INIT()
{
}
     dba:	08 95       	ret

00000dbc <RELAYS_IN_CHOOSE>:

/****************************************************************************************************************
** DEFINITION RELAYS IN FUNCTIONS, WRITE/TRANSMIT 8bits (1Byte) TO SHIFT REGISTER 74HC595 AND CHOOSE RELAYS IN **
****************************************************************************************************************/
void RELAYS_IN_CHOOSE(unsigned char rel_in)	// HELP: RELAYS_IN_CHOOSE(unsigned char byte_of_choosing_combination_of_relay_in) // 74HC595 shift right out, lsb is first
{
     dbc:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeLSB = rel_in;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		RELIN_SCK_low();
     dbe:	ae 98       	cbi	0x15, 6	; 21

		if(storeLSB & 0x01)	// maska & za log "1" na LSB 0b00000001
     dc0:	80 ff       	sbrs	r24, 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <RELAYS_IN_CHOOSE+0xc>
		{
			RELIN_SDI_high();	// izvejdane na log "1" v MSB	// PORTC |= (1<<RELIN_SDI_PIN);
     dc4:	af 9a       	sbi	0x15, 7	; 21
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <RELAYS_IN_CHOOSE+0xe>
		}
		else
		{
			RELIN_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
     dc8:	af 98       	cbi	0x15, 7	; 21
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno

		RELIN_SCK_high();
     dca:	ae 9a       	sbi	0x15, 6	; 21
{
	unsigned char storeLSB;
	unsigned char x;
	storeLSB = rel_in;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     dcc:	9f 5f       	subi	r25, 0xFF	; 255
     dce:	98 30       	cpi	r25, 0x08	; 8
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <RELAYS_IN_CHOOSE+0x1a>
		else
		{
			RELIN_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno
     dd2:	86 95       	lsr	r24
     dd4:	f4 cf       	rjmp	.-24     	; 0xdbe <RELAYS_IN_CHOOSE+0x2>

		RELIN_SCK_high();
	}

	RELIN_RCK_low();
     dd6:	ab 98       	cbi	0x15, 3	; 21
     dd8:	88 ea       	ldi	r24, 0xA8	; 168
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	fc 01       	movw	r30, r24
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <RELAYS_IN_CHOOSE+0x22>
	_delay_us(170);			//rcall 180 us
	RELIN_RCK_high();
     de2:	ab 9a       	sbi	0x15, 3	; 21
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <RELAYS_IN_CHOOSE+0x28>
	_delay_us(170);			//rcall 180 us

}
     de8:	08 95       	ret

00000dea <relays_in1_2ch>:

void relays_in1_2ch()
{
	RELAYS_IN_CHOOSE(0b00100000);	// RELE 1
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	0e 94 de 06 	call	0xdbc	; 0xdbc <RELAYS_IN_CHOOSE>
}
     df0:	08 95       	ret

00000df2 <relays_in1_6ch>:

void relays_in1_6ch()
{
	RELAYS_IN_CHOOSE(0b01100001);	// RELE 1,2,3
     df2:	81 e6       	ldi	r24, 0x61	; 97
     df4:	0e 94 de 06 	call	0xdbc	; 0xdbc <RELAYS_IN_CHOOSE>
}
     df8:	08 95       	ret

00000dfa <relays_in2_2ch>:

void relays_in2_2ch()
{
	RELAYS_IN_CHOOSE(0b00001010);	// RELE 4,5
     dfa:	8a e0       	ldi	r24, 0x0A	; 10
     dfc:	0e 94 de 06 	call	0xdbc	; 0xdbc <RELAYS_IN_CHOOSE>
}
     e00:	08 95       	ret

00000e02 <relays_in2_6ch>:

void relays_in2_6ch()
{
	RELAYS_IN_CHOOSE(0b10011010);	// RELE 4,5,6,7
     e02:	8a e9       	ldi	r24, 0x9A	; 154
     e04:	0e 94 de 06 	call	0xdbc	; 0xdbc <RELAYS_IN_CHOOSE>
}
     e08:	08 95       	ret

00000e0a <relays_in3_2ch>:

void relays_in3_2ch()
{
	RELAYS_IN_CHOOSE(0b00001100);	// RELE 8,5
     e0a:	8c e0       	ldi	r24, 0x0C	; 12
     e0c:	0e 94 de 06 	call	0xdbc	; 0xdbc <RELAYS_IN_CHOOSE>
}
     e10:	08 95       	ret

00000e12 <relays_in3_6ch>:

void relays_in3_6ch()
{
	RELAYS_IN_CHOOSE(0b10011100);	// RELE 8,5,6,7
     e12:	8c e9       	ldi	r24, 0x9C	; 156
     e14:	0e 94 de 06 	call	0xdbc	; 0xdbc <RELAYS_IN_CHOOSE>
}
     e18:	08 95       	ret

00000e1a <relays_in_off>:

void relays_in_off()
{
	RELAYS_IN_CHOOSE(0b00000000);	// 0b00000000 // [8][7][6][5][4][3][2][1] // RELETA IZKLIUCHENI 
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	0e 94 de 06 	call	0xdbc	; 0xdbc <RELAYS_IN_CHOOSE>
}
     e20:	08 95       	ret

00000e22 <relays_in_init>:

void relays_in_init()
{
	RELAYS_IN_CHOOSE(0b00000000);	// 0b00000000 // [8][7][6][5][4][3][2][1] // RELETA IZKLIUCHENI 
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 de 06 	call	0xdbc	; 0xdbc <RELAYS_IN_CHOOSE>
}
     e28:	08 95       	ret

00000e2a <RELAYS_OUT_CHOOSE>:
/******************************************************************************************************************
** DEFINITION RELAYS OUT FUNCTIONS, WRITE/TRANSMIT 8bits (1Byte) TO SHIFT REGISTER 74HC595 AND CHOOSE RELAYS OUT **
******************************************************************************************************************/
void RELAYS_OUT_CHOOSE(unsigned char rel_out)	// HELP: RELAYS_OUT_CHOOSE(unsigned char byte_of_choosing_combination_of_relay_in) // 74HC595 shift right out, lsb is first
{
     e2a:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeLSB = rel_out;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		RELOUT_SCK_low();
     e2c:	96 98       	cbi	0x12, 6	; 18

		if(storeLSB & 0x01)	// maska & za log "1" na LSB 0b00000001
     e2e:	80 ff       	sbrs	r24, 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <RELAYS_OUT_CHOOSE+0xc>
		{
			RELOUT_SDI_high();	// izvejdane na log "1" v MSB	// PORTC |= (1<<RELIN_SDI_PIN);
     e32:	c4 9a       	sbi	0x18, 4	; 24
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <RELAYS_OUT_CHOOSE+0xe>
		}
		else
		{
			RELOUT_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
     e36:	c4 98       	cbi	0x18, 4	; 24
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno

		RELOUT_SCK_high();
     e38:	96 9a       	sbi	0x12, 6	; 18
{
	unsigned char storeLSB;
	unsigned char x;
	storeLSB = rel_out;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     e3a:	9f 5f       	subi	r25, 0xFF	; 255
     e3c:	98 30       	cpi	r25, 0x08	; 8
     e3e:	11 f0       	breq	.+4      	; 0xe44 <RELAYS_OUT_CHOOSE+0x1a>
		else
		{
			RELOUT_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno
     e40:	86 95       	lsr	r24
     e42:	f4 cf       	rjmp	.-24     	; 0xe2c <RELAYS_OUT_CHOOSE+0x2>

		RELOUT_SCK_high();
	}

	RELOUT_RCK_low();
     e44:	97 98       	cbi	0x12, 7	; 18
     e46:	88 ea       	ldi	r24, 0xA8	; 168
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	fc 01       	movw	r30, r24
     e4c:	31 97       	sbiw	r30, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <RELAYS_OUT_CHOOSE+0x22>
	_delay_us(170);			//rcall 180 us
	RELOUT_RCK_high();
     e50:	97 9a       	sbi	0x12, 7	; 18
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <RELAYS_OUT_CHOOSE+0x28>
	_delay_us(170);			//rcall 180 us

}
     e56:	08 95       	ret

00000e58 <relays_out_1ch>:

void relays_out_1ch()
{
	RELAYS_OUT_CHOOSE(0b10000000);	// RELE 1
     e58:	80 e8       	ldi	r24, 0x80	; 128
     e5a:	0e 94 15 07 	call	0xe2a	; 0xe2a <RELAYS_OUT_CHOOSE>
}
     e5e:	08 95       	ret

00000e60 <relays_out_6ch>:

void relays_out_6ch()
{
	RELAYS_OUT_CHOOSE(0b11111100);	// RELE 1,2,3,4,5,6
     e60:	8c ef       	ldi	r24, 0xFC	; 252
     e62:	0e 94 15 07 	call	0xe2a	; 0xe2a <RELAYS_OUT_CHOOSE>
}
     e66:	08 95       	ret

00000e68 <relays_out_off>:
void relays_out_off()
{
	RELAYS_OUT_CHOOSE(0b00000000);	// RELE 1,2,3,4,5,6
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 15 07 	call	0xe2a	; 0xe2a <RELAYS_OUT_CHOOSE>
}
     e6e:	08 95       	ret

00000e70 <relays_out_init>:
void relays_out_init()
{
	RELAYS_OUT_CHOOSE(0b00000000);	// RELE 1,2,3,4,5,6
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0e 94 15 07 	call	0xe2a	; 0xe2a <RELAYS_OUT_CHOOSE>
}
     e76:	08 95       	ret

00000e78 <__udivmodqi4>:
     e78:	99 1b       	sub	r25, r25
     e7a:	79 e0       	ldi	r23, 0x09	; 9
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <__udivmodqi4_ep>

00000e7e <__udivmodqi4_loop>:
     e7e:	99 1f       	adc	r25, r25
     e80:	96 17       	cp	r25, r22
     e82:	08 f0       	brcs	.+2      	; 0xe86 <__udivmodqi4_ep>
     e84:	96 1b       	sub	r25, r22

00000e86 <__udivmodqi4_ep>:
     e86:	88 1f       	adc	r24, r24
     e88:	7a 95       	dec	r23
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__udivmodqi4_loop>
     e8c:	80 95       	com	r24
     e8e:	08 95       	ret

00000e90 <itoa>:
     e90:	fb 01       	movw	r30, r22
     e92:	9f 01       	movw	r18, r30
     e94:	e8 94       	clt
     e96:	42 30       	cpi	r20, 0x02	; 2
     e98:	c4 f0       	brlt	.+48     	; 0xeca <itoa+0x3a>
     e9a:	45 32       	cpi	r20, 0x25	; 37
     e9c:	b4 f4       	brge	.+44     	; 0xeca <itoa+0x3a>
     e9e:	4a 30       	cpi	r20, 0x0A	; 10
     ea0:	29 f4       	brne	.+10     	; 0xeac <itoa+0x1c>
     ea2:	97 fb       	bst	r25, 7
     ea4:	1e f4       	brtc	.+6      	; 0xeac <itoa+0x1c>
     ea6:	90 95       	com	r25
     ea8:	81 95       	neg	r24
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	64 2f       	mov	r22, r20
     eae:	77 27       	eor	r23, r23
     eb0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__udivmodhi4>
     eb4:	80 5d       	subi	r24, 0xD0	; 208
     eb6:	8a 33       	cpi	r24, 0x3A	; 58
     eb8:	0c f0       	brlt	.+2      	; 0xebc <itoa+0x2c>
     eba:	89 5d       	subi	r24, 0xD9	; 217
     ebc:	81 93       	st	Z+, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	a1 f7       	brne	.-24     	; 0xeac <itoa+0x1c>
     ec4:	16 f4       	brtc	.+4      	; 0xeca <itoa+0x3a>
     ec6:	5d e2       	ldi	r21, 0x2D	; 45
     ec8:	51 93       	st	Z+, r21
     eca:	10 82       	st	Z, r1
     ecc:	c9 01       	movw	r24, r18
     ece:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <strrev>

00000ed2 <ltoa>:
     ed2:	fa 01       	movw	r30, r20
     ed4:	cf 93       	push	r28
     ed6:	ff 93       	push	r31
     ed8:	ef 93       	push	r30
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	44 f1       	brlt	.+80     	; 0xf2e <ltoa+0x5c>
     ede:	25 32       	cpi	r18, 0x25	; 37
     ee0:	34 f5       	brge	.+76     	; 0xf2e <ltoa+0x5c>
     ee2:	c2 2f       	mov	r28, r18
     ee4:	e8 94       	clt
     ee6:	ca 30       	cpi	r28, 0x0A	; 10
     ee8:	49 f4       	brne	.+18     	; 0xefc <ltoa+0x2a>
     eea:	97 fb       	bst	r25, 7
     eec:	3e f4       	brtc	.+14     	; 0xefc <ltoa+0x2a>
     eee:	90 95       	com	r25
     ef0:	80 95       	com	r24
     ef2:	70 95       	com	r23
     ef4:	61 95       	neg	r22
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	2c 2f       	mov	r18, r28
     efe:	33 27       	eor	r19, r19
     f00:	44 27       	eor	r20, r20
     f02:	55 27       	eor	r21, r21
     f04:	ff 93       	push	r31
     f06:	ef 93       	push	r30
     f08:	0e 94 fc 07 	call	0xff8	; 0xff8 <__udivmodsi4>
     f0c:	ef 91       	pop	r30
     f0e:	ff 91       	pop	r31
     f10:	60 5d       	subi	r22, 0xD0	; 208
     f12:	6a 33       	cpi	r22, 0x3A	; 58
     f14:	0c f0       	brlt	.+2      	; 0xf18 <ltoa+0x46>
     f16:	69 5d       	subi	r22, 0xD9	; 217
     f18:	61 93       	st	Z+, r22
     f1a:	b9 01       	movw	r22, r18
     f1c:	ca 01       	movw	r24, r20
     f1e:	60 50       	subi	r22, 0x00	; 0
     f20:	70 40       	sbci	r23, 0x00	; 0
     f22:	80 40       	sbci	r24, 0x00	; 0
     f24:	90 40       	sbci	r25, 0x00	; 0
     f26:	51 f7       	brne	.-44     	; 0xefc <ltoa+0x2a>
     f28:	16 f4       	brtc	.+4      	; 0xf2e <ltoa+0x5c>
     f2a:	cd e2       	ldi	r28, 0x2D	; 45
     f2c:	c1 93       	st	Z+, r28
     f2e:	10 82       	st	Z, r1
     f30:	8f 91       	pop	r24
     f32:	9f 91       	pop	r25
     f34:	cf 91       	pop	r28
     f36:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <strrev>

00000f3a <ultoa>:
     f3a:	fa 01       	movw	r30, r20
     f3c:	cf 93       	push	r28
     f3e:	ff 93       	push	r31
     f40:	ef 93       	push	r30
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	cc f0       	brlt	.+50     	; 0xf78 <ultoa+0x3e>
     f46:	25 32       	cpi	r18, 0x25	; 37
     f48:	bc f4       	brge	.+46     	; 0xf78 <ultoa+0x3e>
     f4a:	c2 2f       	mov	r28, r18
     f4c:	2c 2f       	mov	r18, r28
     f4e:	33 27       	eor	r19, r19
     f50:	44 27       	eor	r20, r20
     f52:	55 27       	eor	r21, r21
     f54:	ff 93       	push	r31
     f56:	ef 93       	push	r30
     f58:	0e 94 fc 07 	call	0xff8	; 0xff8 <__udivmodsi4>
     f5c:	ef 91       	pop	r30
     f5e:	ff 91       	pop	r31
     f60:	60 5d       	subi	r22, 0xD0	; 208
     f62:	6a 33       	cpi	r22, 0x3A	; 58
     f64:	0c f0       	brlt	.+2      	; 0xf68 <ultoa+0x2e>
     f66:	69 5d       	subi	r22, 0xD9	; 217
     f68:	61 93       	st	Z+, r22
     f6a:	b9 01       	movw	r22, r18
     f6c:	ca 01       	movw	r24, r20
     f6e:	60 50       	subi	r22, 0x00	; 0
     f70:	70 40       	sbci	r23, 0x00	; 0
     f72:	80 40       	sbci	r24, 0x00	; 0
     f74:	90 40       	sbci	r25, 0x00	; 0
     f76:	51 f7       	brne	.-44     	; 0xf4c <ultoa+0x12>
     f78:	10 82       	st	Z, r1
     f7a:	8f 91       	pop	r24
     f7c:	9f 91       	pop	r25
     f7e:	cf 91       	pop	r28
     f80:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <strrev>

00000f84 <utoa>:
     f84:	fb 01       	movw	r30, r22
     f86:	9f 01       	movw	r18, r30
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	74 f0       	brlt	.+28     	; 0xfa8 <utoa+0x24>
     f8c:	45 32       	cpi	r20, 0x25	; 37
     f8e:	64 f4       	brge	.+24     	; 0xfa8 <utoa+0x24>
     f90:	64 2f       	mov	r22, r20
     f92:	77 27       	eor	r23, r23
     f94:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__udivmodhi4>
     f98:	80 5d       	subi	r24, 0xD0	; 208
     f9a:	8a 33       	cpi	r24, 0x3A	; 58
     f9c:	0c f0       	brlt	.+2      	; 0xfa0 <utoa+0x1c>
     f9e:	89 5d       	subi	r24, 0xD9	; 217
     fa0:	81 93       	st	Z+, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	a1 f7       	brne	.-24     	; 0xf90 <utoa+0xc>
     fa8:	10 82       	st	Z, r1
     faa:	c9 01       	movw	r24, r18
     fac:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <strrev>

00000fb0 <strrev>:
     fb0:	dc 01       	movw	r26, r24
     fb2:	fc 01       	movw	r30, r24
     fb4:	67 2f       	mov	r22, r23
     fb6:	71 91       	ld	r23, Z+
     fb8:	77 23       	and	r23, r23
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <strrev+0x4>
     fbc:	32 97       	sbiw	r30, 0x02	; 2
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <strrev+0x18>
     fc0:	7c 91       	ld	r23, X
     fc2:	6d 93       	st	X+, r22
     fc4:	70 83       	st	Z, r23
     fc6:	62 91       	ld	r22, -Z
     fc8:	ae 17       	cp	r26, r30
     fca:	bf 07       	cpc	r27, r31
     fcc:	c8 f3       	brcs	.-14     	; 0xfc0 <strrev+0x10>
     fce:	08 95       	ret

00000fd0 <__udivmodhi4>:
     fd0:	aa 1b       	sub	r26, r26
     fd2:	bb 1b       	sub	r27, r27
     fd4:	51 e1       	ldi	r21, 0x11	; 17
     fd6:	07 c0       	rjmp	.+14     	; 0xfe6 <__udivmodhi4_ep>

00000fd8 <__udivmodhi4_loop>:
     fd8:	aa 1f       	adc	r26, r26
     fda:	bb 1f       	adc	r27, r27
     fdc:	a6 17       	cp	r26, r22
     fde:	b7 07       	cpc	r27, r23
     fe0:	10 f0       	brcs	.+4      	; 0xfe6 <__udivmodhi4_ep>
     fe2:	a6 1b       	sub	r26, r22
     fe4:	b7 0b       	sbc	r27, r23

00000fe6 <__udivmodhi4_ep>:
     fe6:	88 1f       	adc	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	5a 95       	dec	r21
     fec:	a9 f7       	brne	.-22     	; 0xfd8 <__udivmodhi4_loop>
     fee:	80 95       	com	r24
     ff0:	90 95       	com	r25
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	08 95       	ret

00000ff8 <__udivmodsi4>:
     ff8:	a1 e2       	ldi	r26, 0x21	; 33
     ffa:	1a 2e       	mov	r1, r26
     ffc:	aa 1b       	sub	r26, r26
     ffe:	bb 1b       	sub	r27, r27
    1000:	fd 01       	movw	r30, r26
    1002:	0d c0       	rjmp	.+26     	; 0x101e <__udivmodsi4_ep>

00001004 <__udivmodsi4_loop>:
    1004:	aa 1f       	adc	r26, r26
    1006:	bb 1f       	adc	r27, r27
    1008:	ee 1f       	adc	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	a2 17       	cp	r26, r18
    100e:	b3 07       	cpc	r27, r19
    1010:	e4 07       	cpc	r30, r20
    1012:	f5 07       	cpc	r31, r21
    1014:	20 f0       	brcs	.+8      	; 0x101e <__udivmodsi4_ep>
    1016:	a2 1b       	sub	r26, r18
    1018:	b3 0b       	sbc	r27, r19
    101a:	e4 0b       	sbc	r30, r20
    101c:	f5 0b       	sbc	r31, r21

0000101e <__udivmodsi4_ep>:
    101e:	66 1f       	adc	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	88 1f       	adc	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	1a 94       	dec	r1
    1028:	69 f7       	brne	.-38     	; 0x1004 <__udivmodsi4_loop>
    102a:	60 95       	com	r22
    102c:	70 95       	com	r23
    102e:	80 95       	com	r24
    1030:	90 95       	com	r25
    1032:	9b 01       	movw	r18, r22
    1034:	ac 01       	movw	r20, r24
    1036:	bd 01       	movw	r22, r26
    1038:	cf 01       	movw	r24, r30
    103a:	08 95       	ret

0000103c <_exit>:
    103c:	f8 94       	cli

0000103e <__stop_program>:
    103e:	ff cf       	rjmp	.-2      	; 0x103e <__stop_program>
