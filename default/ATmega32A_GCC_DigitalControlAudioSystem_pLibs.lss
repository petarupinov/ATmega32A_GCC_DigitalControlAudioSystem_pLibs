
ATmega32A_GCC_DigitalControlAudioSystem_pLibs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000108e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000476  00800060  0000108e  00001122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008004d6  008004d6  00001598  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000821  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002541  00000000  00000000  00001f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bca  00000000  00000000  0000445a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f4a  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  00006f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009fd  00000000  00000000  00007600  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cf9  00000000  00000000  00007ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  00008cf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_3>
      10:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_4>
      14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 02 	call	0x498	; 0x498 <main>
      8a:	0c 94 45 08 	jmp	0x108a	; 0x108a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:
*****************************************/
void port_init(void)
{	

// PORT A connections
	DDRA  = 0b11111111;		//  PA7:U8/PGA2310,CS; PA6:U7/PGA2310,CS; PA5:CON2LCD,RS; PA4:CON2LCD,RW; PA3:CON2LCD,E; PA2:U2/74HC595,RCLK(LCD); PA1:U2/74HC595,SCLK(LCD); PA0:U2/74HC595,DATA(LCD);
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//	Interfaces: NOT USED. PULLUP DISABLE in PORTA.
      96:	1b ba       	out	0x1b, r1	; 27

// PORT B connections
	DDRB  = 0b10111000;		//  PB7:U6,U7,U8/PGA2310,SCLK; PB6:U6,U7,U8/PGA2310,SDO(CON33,36,39); PB5:U6,U7,U8/PGA2310,SDI; PB4:U12/74HC595,DATA(REL_OUT); PB3:U6/PGA2310,CS; PB2:CON8/BUTTON,"ESCAPE",INT2; PB1:CON5/BUTTON,"ON/OFF"; PB0:CON14TempSensor/DS18S20,DQ,IN/OUT;
      98:	88 eb       	ldi	r24, 0xB8	; 184
      9a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000111;		//	Interfaces: EXTERNAL INTERRUPT 2; SPI. set pullup to IRTSOP2240 / BUTTON(on/off) / DS18s20.
      9c:	87 e0       	ldi	r24, 0x07	; 7
      9e:	88 bb       	out	0x18, r24	; 24

// PORT C connections
	DDRC  = 0b11001100;		//  PC7:U10/74HC595,DATA(REL_IN); PC6:U10/74HC595,SCLK(REL_IN); PC5:EncoderED1112S,A; PC4:EncoderED1112S,B; PC3:U10/74HC595,RCLK(REL_IN); PC2:Q2/BD237(RELAY_POWER_SUPPLY); PC1:DS1307/24C64,I2C/SDA; PC0:DS1307/24C64,I2C/SCL;
      a0:	8c ec       	ldi	r24, 0xCC	; 204
      a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;		//	Interfaces: I2C. PULLUP DISABLE in PORTC.
      a4:	15 ba       	out	0x15, r1	; 21

// PORT D connections
	DDRD  = 0b11110000;		//  PD7:U12/74HC595,RCLK(REL_OUT); PD6:U12/74HC595,SCLK(REL_OUT); PD5:Q1/BD237(FAN_CONTROL_PWM); PD4:LED5/"ON/OFF AUDIO SYSTEM"; PD3:CON11/EncoderBUTTON,"MENU/ENTER"/INT1; PD2:CON12/IR/TSOP2240,/INT0; PD1:CON14/MAX232,UART/TXD; PD0:CON14/MAX232,UART/RXD;
      a6:	80 ef       	ldi	r24, 0xF0	; 240
      a8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;		//	Interfaces: TIMER1; UART/USART; EXTERNAL INTERRUPT 0, 1. PULLUP DISABLE in PORTD.
      aa:	8c e0       	ldi	r24, 0x0C	; 12
      ac:	82 bb       	out	0x12, r24	; 18
//	DDRD&=~_BV(0);// DDD0 = "0"  (DDD0=DDRD nulev bit) set PORTD pin0 to zero as input
//	PORTD|=_BV(0);// PD0  = "1"  Enable pull up
//	PORTD|=_BV(1);// PD1  = "1"  led
//	DDRD|=_BV(1); // DDD1 = "1"  (DDD1=DDRD parvi bit) set PORTD pin1 to one as output

}
      ae:	08 95       	ret

000000b0 <timer2_init>:
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init(void)
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
      b0:	82 e0       	ldi	r24, 0x02	; 2
      b2:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
      b4:	81 e8       	ldi	r24, 0x81	; 129
      b6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
      b8:	13 bc       	out	0x23, r1	; 35
}
      ba:	08 95       	ret

000000bc <timer2_on>:
/*************************************
******** DEFINITIONS OF TIMER ********
*************************************/
void timer2_on(void)	// Timer2 On
{
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
      bc:	81 e8       	ldi	r24, 0x81	; 129
      be:	85 bd       	out	0x25, r24	; 37
	OCR2 = 1; // FAN PWM ON
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	83 bd       	out	0x23, r24	; 35
}
      c4:	08 95       	ret

000000c6 <timer2_off>:

void timer2_off(void)	// Timer2 Off
{
	TCCR2 = 0b00000000;		// DISABLED OCOC1A - PWM, OC1B - Disabled, normal port.
      c6:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0; // FAN PWM OFF
      c8:	13 bc       	out	0x23, r1	; 35
}
      ca:	08 95       	ret

000000cc <__vector_1>:

/*****************************************
**** EXTERNAL INTERRUPT 0 VECTOR 01 ******
*****************************************/
ISR(INT0_vect)
{
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
}
      d6:	0f 90       	pop	r0
      d8:	0f be       	out	0x3f, r0	; 63
      da:	0f 90       	pop	r0
      dc:	1f 90       	pop	r1
      de:	18 95       	reti

000000e0 <__vector_2>:

/*****************************************
**** EXTERNAL INTERRUPT 1 VECTOR 02 ******
*****************************************/
ISR(INT1_vect)
{
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
}
      ea:	0f 90       	pop	r0
      ec:	0f be       	out	0x3f, r0	; 63
      ee:	0f 90       	pop	r0
      f0:	1f 90       	pop	r1
      f2:	18 95       	reti

000000f4 <__vector_3>:

/*****************************************
**** EXTERNAL INTERRUPT 2 VECTOR 03 ******
*****************************************/
ISR(INT2_vect)
{
      f4:	1f 92       	push	r1
      f6:	0f 92       	push	r0
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	0f 92       	push	r0
      fc:	11 24       	eor	r1, r1
}
      fe:	0f 90       	pop	r0
     100:	0f be       	out	0x3f, r0	; 63
     102:	0f 90       	pop	r0
     104:	1f 90       	pop	r1
     106:	18 95       	reti

00000108 <__vector_4>:

/*****************************************
**** TIMER 2 OUTPUT COMPARE VECTOR 04 ****
*****************************************/
ISR(TIMER2_COMP_vect)
{
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
}
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <__vector_5>:

/*****************************************
**** TIMER 2 OVERFLOW VECTOR 05 **********
*****************************************/
ISR(TIMER2_OVF_vect)
{
     11c:	1f 92       	push	r1
     11e:	0f 92       	push	r0
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	0f 92       	push	r0
     124:	11 24       	eor	r1, r1
}
     126:	0f 90       	pop	r0
     128:	0f be       	out	0x3f, r0	; 63
     12a:	0f 90       	pop	r0
     12c:	1f 90       	pop	r1
     12e:	18 95       	reti

00000130 <init_all>:
*********************************** START OF APPLICATION ************************************
********************************************************************************************/

void init_all()
{
	port_init();		// IO init and configure all port
     130:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
//	timer2_init();
	LCD_INIT();			// LCD init and reset all lcd contain
     134:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_INIT>
	uart_init();		// UART debug init
     138:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <uart_init>
	about();			// Any debug important information
     13c:	0e 94 92 06 	call	0xd24	; 0xd24 <about>

	pga2310_init();		// SPI init and reset all (U6, U7, U8) PGA2310 volume values to null
     140:	0e 94 14 05 	call	0xa28	; 0xa28 <pga2310_init>
	relays_in_init();	// ?? nujno li e ?
     144:	0e 94 38 07 	call	0xe70	; 0xe70 <relays_in_init>
	relays_out_init();	// ?? nujno li e ?
     148:	0e 94 5f 07 	call	0xebe	; 0xebe <relays_out_init>


}
     14c:	08 95       	ret

0000014e <commonEncoder>:
**********************************************/
void commonEncoder(void)	// not finished
{
	static signed char saveValue = 0;	// zadaljitelno signed char!!! ima osobenost pri vrashtaneto na rezultat ot funkciq!!!
	signed char temp = 0;				// zadaljitelno signed char!!! ima osobenost pri vrashtaneto na rezultat ot funkciq!!!
	temp = rotaryEncoderNikBarzakov();
     14e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <rotaryEncoderNikBarzakov>
	if(0==temp)
     152:	88 23       	and	r24, r24
     154:	09 f4       	brne	.+2      	; 0x158 <commonEncoder+0xa>
     156:	4f c0       	rjmp	.+158    	; 0x1f6 <commonEncoder+0xa8>
	{
		// do nothing, encoder havn't been rotated  // ne e bil zavartan
	}
	else if(-1==temp)
     158:	8f 3f       	cpi	r24, 0xFF	; 255
     15a:	41 f5       	brne	.+80     	; 0x1ac <commonEncoder+0x5e>
	{
		// encoder is decrement
		if(saveValue < -127)
     15c:	80 91 d7 04 	lds	r24, 0x04D7
     160:	80 38       	cpi	r24, 0x80	; 128
     162:	11 f4       	brne	.+4      	; 0x168 <commonEncoder+0x1a>
		{
			saveValue = 127;	// SIGNED CHAR MIN VALUE = -127
     164:	8f e7       	ldi	r24, 0x7F	; 127
     166:	01 c0       	rjmp	.+2      	; 0x16a <commonEncoder+0x1c>
		}
		else
		{
			saveValue += temp;	// sabirane s polojitelno chislo, kratak zapis na: volumeIndex = volumeIndex + temp;
     168:	81 50       	subi	r24, 0x01	; 1
     16a:	80 93 d7 04 	sts	0x04D7, r24
		}
// LCD PRINT VALUE
	LED_low_DISPLAYLED_high();		// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
     16e:	94 98       	cbi	0x12, 4	; 18
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
     170:	8c e0       	ldi	r24, 0x0C	; 12
     172:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
		LCD_COMMAND(LCD_SELECT_4ROW);	// select row 3								// and next is update volume lcd information
     176:	84 ed       	ldi	r24, 0xD4	; 212
     178:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
		if (saveValue > 99)
     17c:	80 91 d7 04 	lds	r24, 0x04D7
     180:	84 36       	cpi	r24, 0x64	; 100
     182:	1c f0       	brlt	.+6      	; 0x18a <commonEncoder+0x3c>
		{
			LCD_DATA_STRING("Volume: ");	// 20 symbols
     184:	80 e6       	ldi	r24, 0x60	; 96
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	07 c0       	rjmp	.+14     	; 0x198 <commonEncoder+0x4a>
		}
		else if (saveValue > 9)
     18a:	8a 30       	cpi	r24, 0x0A	; 10
     18c:	1c f0       	brlt	.+6      	; 0x194 <commonEncoder+0x46>
		{
			LCD_DATA_STRING("Volume: 0");	// 20 symbols
     18e:	89 e6       	ldi	r24, 0x69	; 105
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <commonEncoder+0x4a>
		}
		else
		{
			LCD_DATA_STRING("Volume: 00");	// 20 symbols			
     194:	83 e7       	ldi	r24, 0x73	; 115
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
		}
		LCD_DATA_INT(saveValue);		// 20 symbols
     19c:	80 91 d7 04 	lds	r24, 0x04D7
     1a0:	99 27       	eor	r25, r25
     1a2:	87 fd       	sbrc	r24, 7
     1a4:	90 95       	com	r25
     1a6:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_DATA_INT>
     1aa:	08 95       	ret
	}
	else if(1==temp)
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	19 f5       	brne	.+70     	; 0x1f6 <commonEncoder+0xa8>
		{
			saveValue = 128;	// SIGNED CHAR MAX VALUE = +128
		}
		else
		{
			saveValue += temp;	// sabirane s polojitelno chislo, kratak zapis na: volumeIndex = volumeIndex + temp;
     1b0:	80 91 d7 04 	lds	r24, 0x04D7
     1b4:	8f 5f       	subi	r24, 0xFF	; 255
     1b6:	80 93 d7 04 	sts	0x04D7, r24
		}
// LCD PRINT VALUE
// LCD PRINT VALUE
	LED_low_DISPLAYLED_high();		// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
     1ba:	94 98       	cbi	0x12, 4	; 18
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
     1bc:	8c e0       	ldi	r24, 0x0C	; 12
     1be:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
		LCD_COMMAND(LCD_SELECT_4ROW);	// select row 3								// and next is update volume lcd information
     1c2:	84 ed       	ldi	r24, 0xD4	; 212
     1c4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
		if (saveValue > 99)
     1c8:	80 91 d7 04 	lds	r24, 0x04D7
     1cc:	84 36       	cpi	r24, 0x64	; 100
     1ce:	1c f0       	brlt	.+6      	; 0x1d6 <commonEncoder+0x88>
		{
			LCD_DATA_STRING("Volume: ");	// 20 symbols
     1d0:	80 e6       	ldi	r24, 0x60	; 96
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <commonEncoder+0x96>
		}
		else if (saveValue > 9)
     1d6:	8a 30       	cpi	r24, 0x0A	; 10
     1d8:	1c f0       	brlt	.+6      	; 0x1e0 <commonEncoder+0x92>
		{
			LCD_DATA_STRING("Volume: 0");	// 20 symbols
     1da:	89 e6       	ldi	r24, 0x69	; 105
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <commonEncoder+0x96>
		}
		else
		{
			LCD_DATA_STRING("Volume: 00");	// 20 symbols			
     1e0:	83 e7       	ldi	r24, 0x73	; 115
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
		}
		LCD_DATA_INT(saveValue);		// 20 symbols
     1e8:	80 91 d7 04 	lds	r24, 0x04D7
     1ec:	99 27       	eor	r25, r25
     1ee:	87 fd       	sbrc	r24, 7
     1f0:	90 95       	com	r25
     1f2:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_DATA_INT>
     1f6:	08 95       	ret

000001f8 <volumeUpdate>:
/*************************************
**** VOLUME UPDATE and LCD UPDATE ****
*************************************/
void volumeUpdate(void)
{
	PGA2310_Volume_Update(volumeValue[volumeIndex], volumeValue[volumeIndex]);	// update volume value on all channels
     1f8:	e0 91 d6 04 	lds	r30, 0x04D6
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	e9 53       	subi	r30, 0x39	; 57
     200:	fd 4f       	sbci	r31, 0xFD	; 253
     202:	60 81       	ld	r22, Z
     204:	86 2f       	mov	r24, r22
     206:	0e 94 fd 04 	call	0x9fa	; 0x9fa <PGA2310_Volume_Update>
	LCD_COMMAND(LCD_SELECT_4ROW);	// select row 3								// and next is update volume lcd information
     20a:	84 ed       	ldi	r24, 0xD4	; 212
     20c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
//		LCD_DATA_STRING("Volume: ");	// 20 symbols
	if (volumeIndex > 9)
     210:	80 91 d6 04 	lds	r24, 0x04D6
     214:	8a 30       	cpi	r24, 0x0A	; 10
     216:	18 f0       	brcs	.+6      	; 0x21e <volumeUpdate+0x26>
	{
		LCD_DATA_STRING("Volume: ");	// 20 symbols
     218:	80 e6       	ldi	r24, 0x60	; 96
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <volumeUpdate+0x2a>
	}
	else
	{
		LCD_DATA_STRING("Volume: 0");	// 20 symbols
     21e:	89 e6       	ldi	r24, 0x69	; 105
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
	}
	LCD_DATA_INT(volumeIndex);			// 20 symbols
     226:	80 91 d6 04 	lds	r24, 0x04D6
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_DATA_INT>
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Volume: ");		// uart debug information string
     230:	8e e7       	ldi	r24, 0x7E	; 126
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
	transmitUartInt(volumeIndex);		// uart debug information string 
     238:	80 91 d6 04 	lds	r24, 0x04D6
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 b2 05 	call	0xb64	; 0xb64 <transmitUartInt>
	transmitUartString("\r\n");			// uart debug information string
     242:	83 e9       	ldi	r24, 0x93	; 147
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
}
     24a:	08 95       	ret

0000024c <volumeEncoder>:
**** ROTARY ENCODER for VOLUME FUNCTION ****
*******************************************/
void volumeEncoder(void)
{
	signed char temp = 0;				// zadaljitelno signed char!!! ima osobenost pri vrashtaneto na rezultat ot funkciq!!!
	temp = rotaryEncoderNikBarzakov();
     24c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <rotaryEncoderNikBarzakov>
	if(0==temp)
     250:	88 23       	and	r24, r24
     252:	e1 f0       	breq	.+56     	; 0x28c <volumeEncoder+0x40>
	{
		// do nothing, encoder havn't been rotated  // ne e bil zavartan
	}
	else if(-1==temp)
     254:	8f 3f       	cpi	r24, 0xFF	; 255
     256:	69 f4       	brne	.+26     	; 0x272 <volumeEncoder+0x26>
	{
		// encoder is decrement
		if(volumeIndex < (VOLUME_MIN + 1))
     258:	80 91 d6 04 	lds	r24, 0x04D6
     25c:	88 23       	and	r24, r24
     25e:	19 f4       	brne	.+6      	; 0x266 <volumeEncoder+0x1a>
		{
			volumeIndex = VOLUME_MIN;
     260:	10 92 d6 04 	sts	0x04D6, r1
     264:	03 c0       	rjmp	.+6      	; 0x26c <volumeEncoder+0x20>
		}
		else
		{
			volumeIndex += temp;	// sabirane s polojitelno chislo, kratak zapis na: volumeIndex = volumeIndex + temp;
     266:	81 50       	subi	r24, 0x01	; 1
     268:	80 93 d6 04 	sts	0x04D6, r24
		}
		volumeUpdate();
     26c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <volumeUpdate>
     270:	08 95       	ret
	}
	else if(1==temp)
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	59 f4       	brne	.+22     	; 0x28c <volumeEncoder+0x40>
	{
		// encoder is increment
		if (volumeIndex > (VOLUME_MAX - 2))
     276:	80 91 d6 04 	lds	r24, 0x04D6
     27a:	83 31       	cpi	r24, 0x13	; 19
     27c:	10 f0       	brcs	.+4      	; 0x282 <volumeEncoder+0x36>
		{
			volumeIndex = (VOLUME_MAX - 1);
     27e:	83 e1       	ldi	r24, 0x13	; 19
     280:	01 c0       	rjmp	.+2      	; 0x284 <volumeEncoder+0x38>
		}
		else
		{
			volumeIndex += temp;	// sabirane s polojitelno chislo, kratak zapis na: volumeIndex = volumeIndex + temp;
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	80 93 d6 04 	sts	0x04D6, r24
		}
		volumeUpdate();
     288:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <volumeUpdate>
     28c:	08 95       	ret

0000028e <ampliferOff>:
/*********************
**** AMPLIFER OFF ****
*********************/
void ampliferOff(void)
{
	LCD_COMMAND(LCD_SELECT_1ROW);				// select row 1
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
	LCD_DATA_STRING("    Amplifer Off    ");	// 20 symbols
     294:	86 e9       	ldi	r24, 0x96	; 150
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>

	LCD_COMMAND(LCD_OFF);						// LCD ON without CURSOR
     29c:	88 e0       	ldi	r24, 0x08	; 8
     29e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>

//			FAN_low();		// PORTD5 - FAN OFF (logic "0")  NON PWM, NON TIMER1

// RELAYS OFF
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch off relays out for all 6 channels\r\n");		// uart debug information string
     2a2:	8b ea       	ldi	r24, 0xAB	; 171
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
	relays_out_off();	// RELAYS OUT CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
     2aa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <relays_out_off>
     2ae:	88 e5       	ldi	r24, 0x58	; 88
     2b0:	9b e1       	ldi	r25, 0x1B	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b2:	20 e9       	ldi	r18, 0x90	; 144
     2b4:	31 e0       	ldi	r19, 0x01	; 1
     2b6:	f9 01       	movw	r30, r18
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <ampliferOff+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2be:	d9 f7       	brne	.-10     	; 0x2b6 <ampliferOff+0x28>
	_delay_ms(700);								// PESHO COMMENT 14.08.2015, 21:10
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch off relays in for all 6 channels\r\n");		// uart debug information string
     2c0:	89 ee       	ldi	r24, 0xE9	; 233
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
	relays_in_off();	// RELAYS IN1 CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
     2c8:	0e 94 34 07 	call	0xe68	; 0xe68 <relays_in_off>
     2cc:	88 e5       	ldi	r24, 0x58	; 88
     2ce:	9b e1       	ldi	r25, 0x1B	; 27
     2d0:	20 e9       	ldi	r18, 0x90	; 144
     2d2:	31 e0       	ldi	r19, 0x01	; 1
     2d4:	f9 01       	movw	r30, r18
     2d6:	31 97       	sbiw	r30, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <ampliferOff+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2dc:	d9 f7       	brne	.-10     	; 0x2d4 <ampliferOff+0x46>
	_delay_ms(700);								// PESHO COMMENT 14.08.2015, 21:10
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch off relays for power 220V\r\n");		// uart debug information string
     2de:	86 e2       	ldi	r24, 0x26	; 38
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
	REL_POWER_low();// RELAY POWER OFF				// PESHO COMMENT 14.08.2015, 21:10
     2e6:	aa 98       	cbi	0x15, 2	; 21

//	_delay_ms(50);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton

//	FAN_PWM_OFF();
//			LCD_EXECUTE_COMMAND(LCD_OFF);			// LCD OFF
	LCD_CLEAR_CONTAIN();
     2e8:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_CLEAR_CONTAIN>
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Display off and status led on\r\n");
     2ec:	8c e5       	ldi	r24, 0x5C	; 92
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
     2f4:	94 9a       	sbi	0x12, 4	; 18
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Amplifer is off\r\n");
     2f6:	88 e8       	ldi	r24, 0x88	; 136
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
}
     2fe:	08 95       	ret

00000300 <ampliferOn>:
**** AMPLIFER ON ****
********************/
void ampliferOn(void)
{
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Amplifer is on\r\n");
     300:	86 ea       	ldi	r24, 0xA6	; 166
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Display on and status led off\r\n");
     308:	83 ec       	ldi	r24, 0xC3	; 195
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
	LED_low_DISPLAYLED_high();		// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
     310:	94 98       	cbi	0x12, 4	; 18

	LCD_CLEAR_CONTAIN();						// clear all contain on display
     312:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_CLEAR_CONTAIN>
	LCD_COMMAND(LCD_SELECT_1ROW);				// select row 1
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
	LCD_DATA_STRING("    Amplifer On     ");	// 20 symbols
     31c:	8f ee       	ldi	r24, 0xEF	; 239
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
	LCD_COMMAND(LCD_SELECT_2ROW);				// select row 2
     324:	80 ec       	ldi	r24, 0xC0	; 192
     326:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
	LCD_DATA_STRING("P.UPINOV  P.STOYANOV");	// 20 symbols //	LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
     32a:	84 e0       	ldi	r24, 0x04	; 4
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
     332:	8c e0       	ldi	r24, 0x0C	; 12
     334:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
//			LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
//	LCD_EXECUTE_COMMAND(LCD_ON);			// LCD ON without CURSOR

// RELAYS ON
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch on relays for power 220V\r\n");		// uart debug information string
     338:	89 e1       	ldi	r24, 0x19	; 25
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
	REL_POWER_high();// RELAY POWER ON TRAFs		// PESHO COMMENT 14.08.2015, 21:10
     340:	aa 9a       	sbi	0x15, 2	; 21
     342:	80 e4       	ldi	r24, 0x40	; 64
     344:	9c e9       	ldi	r25, 0x9C	; 156
     346:	20 e9       	ldi	r18, 0x90	; 144
     348:	31 e0       	ldi	r19, 0x01	; 1
     34a:	f9 01       	movw	r30, r18
     34c:	31 97       	sbiw	r30, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <ampliferOn+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     350:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     352:	d9 f7       	brne	.-10     	; 0x34a <ampliferOn+0x4a>
	_delay_ms(4000);								// PESHO COMMENT 14.08.2015, 21:10
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch on relays in for all 6 channels\r\n");		// uart debug information string
     354:	8e e4       	ldi	r24, 0x4E	; 78
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
	relays_in1_6ch();	// RELAYS IN1 CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
     35c:	0e 94 20 07 	call	0xe40	; 0xe40 <relays_in1_6ch>
     360:	88 e5       	ldi	r24, 0x58	; 88
     362:	9b e1       	ldi	r25, 0x1B	; 27
     364:	20 e9       	ldi	r18, 0x90	; 144
     366:	31 e0       	ldi	r19, 0x01	; 1
     368:	f9 01       	movw	r30, r18
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <ampliferOn+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     370:	d9 f7       	brne	.-10     	; 0x368 <ampliferOn+0x68>
	_delay_ms(700);									// PESHO COMMENT 14.08.2015, 21:10
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] Try to switch on relays out for all 6 channels\r\n");		// uart debug information string
     372:	8a e8       	ldi	r24, 0x8A	; 138
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
	relays_out_6ch();	// RELAYS OUT CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
     37a:	0e 94 57 07 	call	0xeae	; 0xeae <relays_out_6ch>

//			PGA2310_U8_SPI(volumeLeft, volumeRight);	// 'A', 'A', 0b01111110, 0b01111110
}
     37e:	08 95       	ret

00000380 <buttons_press>:


}

void buttons_press()
{
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
{
	unsigned int flagPower;//	: 1;	// bit0: '0' = Power OFF, '1' = Power ON	// ne sa inicializirani
	unsigned int flagMute;//	: 1;	// bit1: '0' = Mute OFF, '1' = Mute ON		// ne sa inicializirani
} fSB, *flagStatusBits;
*/
	flagStatusBits = &fSB;
     384:	87 ee       	ldi	r24, 0xE7	; 231
     386:	94 e0       	ldi	r25, 0x04	; 4
     388:	90 93 e4 04 	sts	0x04E4, r25
     38c:	80 93 e3 04 	sts	0x04E3, r24
	flagStatusBits->flagPower=0;	// inicializirane s nuli, no nai veroqtno poradi tova che e globalna stru
     390:	80 91 e7 04 	lds	r24, 0x04E7
	flagStatusBits->flagMute=0;		// inicializirane
     394:	8c 7f       	andi	r24, 0xFC	; 252
     396:	80 93 e7 04 	sts	0x04E7, r24
     39a:	c0 e9       	ldi	r28, 0x90	; 144
     39c:	d1 e0       	ldi	r29, 0x01	; 1
		LCD_DATA_INT(flagStatusBits->flagMute);		// 20 symbols
	_delay_ms(2000);
*/
	while(1)
	{
		if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 0)//fSB.flagPower == 0)//flagStatusBits->flagPower == 0)	// obj ptr flagStatusBtnRegister from struct flagStatusBtnOnOff
     39e:	b1 99       	sbic	0x16, 1	; 22
     3a0:	13 c0       	rjmp	.+38     	; 0x3c8 <buttons_press+0x48>
     3a2:	e0 91 e3 04 	lds	r30, 0x04E3
     3a6:	f0 91 e4 04 	lds	r31, 0x04E4
     3aa:	80 81       	ld	r24, Z
     3ac:	80 fd       	sbrc	r24, 0
     3ae:	0c c0       	rjmp	.+24     	; 0x3c8 <buttons_press+0x48>
		{
			flagStatusBits->flagPower = 1;			// filter za buton ON
     3b0:	81 60       	ori	r24, 0x01	; 1
     3b2:	80 83       	st	Z, r24

			ampliferOn();
     3b4:	0e 94 80 01 	call	0x300	; 0x300 <ampliferOn>
     3b8:	80 e1       	ldi	r24, 0x10	; 16
     3ba:	97 e2       	ldi	r25, 0x27	; 39
     3bc:	fe 01       	movw	r30, r28
     3be:	31 97       	sbiw	r30, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <buttons_press+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c4:	d9 f7       	brne	.-10     	; 0x3bc <buttons_press+0x3c>
     3c6:	eb cf       	rjmp	.-42     	; 0x39e <buttons_press+0x1e>
			_delay_ms(1000);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton
		}
		else if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 1)//fSB.flagPower == 1)//flagStatusBits->flagPower == 1)
     3c8:	b1 99       	sbic	0x16, 1	; 22
     3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <buttons_press+0x72>
     3cc:	e0 91 e3 04 	lds	r30, 0x04E3
     3d0:	f0 91 e4 04 	lds	r31, 0x04E4
     3d4:	80 81       	ld	r24, Z
     3d6:	80 ff       	sbrs	r24, 0
     3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <buttons_press+0x72>
		{
			flagStatusBits->flagPower = 0;			// filter za buton OFF
     3da:	8e 7f       	andi	r24, 0xFE	; 254
     3dc:	80 83       	st	Z, r24
			ampliferOff();
     3de:	0e 94 47 01 	call	0x28e	; 0x28e <ampliferOff>
     3e2:	88 e8       	ldi	r24, 0x88	; 136
     3e4:	93 e1       	ldi	r25, 0x13	; 19
     3e6:	fe 01       	movw	r30, r28
     3e8:	31 97       	sbiw	r30, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <buttons_press+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ee:	d9 f7       	brne	.-10     	; 0x3e6 <buttons_press+0x66>
     3f0:	d6 cf       	rjmp	.-84     	; 0x39e <buttons_press+0x1e>
			_delay_ms(500);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton
		}
		else if(BUTTON_ESC_low() && flagStatusBits->flagPower == 1)//fSB.flagPower == 1)//flagStatusBits->flagPower == 1)
     3f2:	b2 99       	sbic	0x16, 2	; 22
     3f4:	11 c0       	rjmp	.+34     	; 0x418 <buttons_press+0x98>
     3f6:	e0 91 e3 04 	lds	r30, 0x04E3
     3fa:	f0 91 e4 04 	lds	r31, 0x04E4
     3fe:	80 81       	ld	r24, Z
     400:	80 ff       	sbrs	r24, 0
     402:	0a c0       	rjmp	.+20     	; 0x418 <buttons_press+0x98>
		{
//			LCD_DATA_STRING("PRESSED BTN ESCAPE  ");	// 20 symbols
//			LCD_COMMAND(LCD_ON);
			LCD_CLEAR_CONTAIN();
     404:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_CLEAR_CONTAIN>
     408:	88 e8       	ldi	r24, 0x88	; 136
     40a:	93 e1       	ldi	r25, 0x13	; 19
     40c:	fe 01       	movw	r30, r28
     40e:	31 97       	sbiw	r30, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <buttons_press+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     412:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     414:	d9 f7       	brne	.-10     	; 0x40c <buttons_press+0x8c>
     416:	c3 cf       	rjmp	.-122    	; 0x39e <buttons_press+0x1e>
			_delay_ms(500);
//			volumeUp();
//			_delay_ms(200);
		}
		else if(BUTTON_ENCODER_low() && flagStatusBits->flagPower == 1)//fSB.flagPower == 1)//flagStatusBits->flagPower == 1)
     418:	83 99       	sbic	0x10, 3	; 16
     41a:	0f c0       	rjmp	.+30     	; 0x43a <buttons_press+0xba>
     41c:	e0 91 e3 04 	lds	r30, 0x04E3
     420:	f0 91 e4 04 	lds	r31, 0x04E4
     424:	80 81       	ld	r24, Z
     426:	80 ff       	sbrs	r24, 0
     428:	08 c0       	rjmp	.+16     	; 0x43a <buttons_press+0xba>
     42a:	88 e8       	ldi	r24, 0x88	; 136
     42c:	93 e1       	ldi	r25, 0x13	; 19
     42e:	fe 01       	movw	r30, r28
     430:	31 97       	sbiw	r30, 0x01	; 1
     432:	f1 f7       	brne	.-4      	; 0x430 <buttons_press+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     434:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     436:	d9 f7       	brne	.-10     	; 0x42e <buttons_press+0xae>
     438:	b2 cf       	rjmp	.-156    	; 0x39e <buttons_press+0x1e>
			_delay_ms(500);
//			volumeDown();
//			_delay_ms(200);

		}
		else if(BUTTON_ESC_low() && flagStatusBits->flagPower == 0)//fSB.flagPower == 0)//flagStatusBits->flagPower == 0)
     43a:	b2 99       	sbic	0x16, 2	; 22
     43c:	0f c0       	rjmp	.+30     	; 0x45c <buttons_press+0xdc>
     43e:	e0 91 e3 04 	lds	r30, 0x04E3
     442:	f0 91 e4 04 	lds	r31, 0x04E4
     446:	80 81       	ld	r24, Z
     448:	80 fd       	sbrc	r24, 0
     44a:	08 c0       	rjmp	.+16     	; 0x45c <buttons_press+0xdc>
     44c:	88 e8       	ldi	r24, 0x88	; 136
     44e:	93 e1       	ldi	r25, 0x13	; 19
     450:	fe 01       	movw	r30, r28
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	f1 f7       	brne	.-4      	; 0x452 <buttons_press+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     456:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     458:	d9 f7       	brne	.-10     	; 0x450 <buttons_press+0xd0>
     45a:	a1 cf       	rjmp	.-190    	; 0x39e <buttons_press+0x1e>
//			LCD_COMMAND(LCD_ON);
			_delay_ms(500);
//			setupMode();
//			_delay_ms(1000);
		}
		else if(BUTTON_ENCODER_low() && flagStatusBits->flagPower == 0)//fSB.flagPower == 0)//flagStatusBits->flagPower == 0)
     45c:	83 99       	sbic	0x10, 3	; 16
     45e:	0f c0       	rjmp	.+30     	; 0x47e <buttons_press+0xfe>
     460:	e0 91 e3 04 	lds	r30, 0x04E3
     464:	f0 91 e4 04 	lds	r31, 0x04E4
     468:	80 81       	ld	r24, Z
     46a:	80 fd       	sbrc	r24, 0
     46c:	08 c0       	rjmp	.+16     	; 0x47e <buttons_press+0xfe>
     46e:	88 e8       	ldi	r24, 0x88	; 136
     470:	93 e1       	ldi	r25, 0x13	; 19
     472:	fe 01       	movw	r30, r28
     474:	31 97       	sbiw	r30, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <buttons_press+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     478:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     47a:	d9 f7       	brne	.-10     	; 0x472 <buttons_press+0xf2>
     47c:	90 cf       	rjmp	.-224    	; 0x39e <buttons_press+0x1e>
//			LCD_COMMAND(LCD_OFF);
			_delay_ms(500);
//			about();
//			_delay_ms(1000);
		}
		else if(flagStatusBits->flagPower == 1)//fSB.flagPower == 1)//flagStatusBits->flagPower == 1)	// zashto ne raboti encoder-a kogato se proverqva bita flagPower?
     47e:	e0 91 e3 04 	lds	r30, 0x04E3
     482:	f0 91 e4 04 	lds	r31, 0x04E4
     486:	80 81       	ld	r24, Z
     488:	80 ff       	sbrs	r24, 0
     48a:	03 c0       	rjmp	.+6      	; 0x492 <buttons_press+0x112>
		{
			volumeEncoder();	// v momenta na zavartane na encodera flaga stava nula flagStatusBits->flagPower = 0, zashto ???
     48c:	0e 94 26 01 	call	0x24c	; 0x24c <volumeEncoder>
     490:	86 cf       	rjmp	.-244    	; 0x39e <buttons_press+0x1e>
		}						// za tova Power Button srabotva ot vtoriq pat kato za Power OFF
		else if(flagStatusBits->flagPower == 0)	// zashto ne raboti encoder-a kogato se proverqva bita flagPower?
		{
			commonEncoder();	// v momenta na zavartane na encodera flaga stava nula flagStatusBits->flagPower = 0, zashto ???
     492:	0e 94 a7 00 	call	0x14e	; 0x14e <commonEncoder>
     496:	83 cf       	rjmp	.-250    	; 0x39e <buttons_press+0x1e>

00000498 <main>:
********************************************************************************************/

int main(void)
{

	init_all();				// inicializacia na vsichko
     498:	0e 94 98 00 	call	0x130	; 0x130 <init_all>

	sei();							// file "avr/interrupt.h"
     49c:	78 94       	sei
//	SREG = (1<<I);

	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
     49e:	94 9a       	sbi	0x12, 4	; 18
	while(1)
	{
//		struct flagStatusBtnOnOff flagStatusBtnRegister;	// obj flagStatusBtnRegister from struct flagStatusBtnOnOff
//		flagStatusBtnRegister.bit0 = 0;
		
		buttons_press();	// izchakvane za natiskane na buton
     4a0:	0e 94 c0 01 	call	0x380	; 0x380 <buttons_press>
     4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <main+0x8>

000004a6 <eeprom_24c64_read>:
	// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
	// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !
	
	byte eepromReceiveByte0, eepromReceiveByte1, eepromReceiveByte2, eepromReceiveByte3, eepromReceiveByte4, eepromReceiveByte5;
// EEPROM READ
	i2c_start();
     4a6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);		// EEPROM 24C64 ADDRESS ACCESS WRITE
     4aa:	80 ea       	ldi	r24, 0xA0	; 160
     4ac:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>

	i2c_start();
     4bc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_READ);		// EEPROM 24C64 ADDRESS ACCESS READ
     4c0:	81 ea       	ldi	r24, 0xA1	; 161
     4c2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	eepromReceiveByte0	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <i2c_read>
	eepromReceiveByte1	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <i2c_read>
	eepromReceiveByte2	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <i2c_read>
	eepromReceiveByte3	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <i2c_read>
	eepromReceiveByte4	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <i2c_read>
	eepromReceiveByte5	= i2c_read(1);				// EEPROM DATA READ BYTE	// i2c_read(1) parametar razlichen ot 0 spira komunikaciqta NACK
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <i2c_read>
	i2c_stop();
     4ea:	0e 94 67 03 	call	0x6ce	; 0x6ce <i2c_stop>
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte2);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte3);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte4);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte5);
*/
}
     4ee:	08 95       	ret

000004f0 <eeprom_24c64_write>:
// Za da se vijda tova koeto se e zapisalo v pametta, a ne ot tozi bibliotechen fail !!!!!!!!!
// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !

// EEPROM WRITE
	i2c_start();
     4f0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
     4f4:	80 ea       	ldi	r24, 0xA0	; 160
     4f6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
// Write data
	i2c_write(0x30);	// Data is stored: 0x30 - '0'
     506:	80 e3       	ldi	r24, 0x30	; 48
     508:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	i2c_write(0x31);	// Data is stored: 0x31 - '1'
     50c:	81 e3       	ldi	r24, 0x31	; 49
     50e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	i2c_write(0x32);	// Data is stored: 0x32 - '2'
     512:	82 e3       	ldi	r24, 0x32	; 50
     514:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	i2c_write(0x33);	// Data is stored: 0x33 - '3'
     518:	83 e3       	ldi	r24, 0x33	; 51
     51a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	i2c_write(0x34);	// Data is stored: 0x34 - '4'
     51e:	84 e3       	ldi	r24, 0x34	; 52
     520:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	i2c_stop();
     524:	0e 94 67 03 	call	0x6ce	; 0x6ce <i2c_stop>
}
     528:	08 95       	ret

0000052a <eeprom_24c64_reset>:

/*************************************
** RESET AND ZERO FILL EEPROM 24C64 **
*************************************/
void eeprom_24c64_reset()
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
	unsigned int i;	// 16 bits
// EEPROM WRITE
	i2c_start();
     52e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
     532:	80 ea       	ldi	r24, 0xA0	; 160
     534:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	d0 e0       	ldi	r29, 0x00	; 0
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
     54e:	21 96       	adiw	r28, 0x01	; 1
     550:	8f e1       	ldi	r24, 0x1F	; 31
     552:	cf 3f       	cpi	r28, 0xFF	; 255
     554:	d8 07       	cpc	r29, r24
     556:	c1 f7       	brne	.-16     	; 0x548 <eeprom_24c64_reset+0x1e>
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
	}
	i2c_stop();
     558:	0e 94 67 03 	call	0x6ce	; 0x6ce <i2c_stop>
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <reset>:
}
*/

unsigned char reset(void)
{
    DDRx |= (1<<Px);            //Ausgang
     562:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
     564:	c0 98       	cbi	0x18, 0	; 24
     566:	80 e8       	ldi	r24, 0x80	; 128
     568:	97 e0       	ldi	r25, 0x07	; 7
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <reset+0x8>
    _delay_us(480);
	DDRx &= ~(1<<Px);
     56e:	b8 98       	cbi	0x17, 0	; 23
     570:	80 e4       	ldi	r24, 0x40	; 64
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <reset+0x12>
    _delay_us(80);
	if(!(PINx & (1<<Px)))     //Prüfe Slave-Antwort
     578:	b0 9b       	sbis	0x16, 0	; 22
     57a:	02 c0       	rjmp	.+4      	; 0x580 <reset+0x1e>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	08 95       	ret
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	97 e0       	ldi	r25, 0x07	; 7
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <reset+0x22>
     588:	81 e0       	ldi	r24, 0x01	; 1
	}
    else
	{
        return 0;
	}
}
     58a:	08 95       	ret

0000058c <read_bit>:

unsigned char read_bit(void)
{
    DDRx |= (1<<Px);            //Ausgang
     58c:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
     58e:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	8a 95       	dec	r24
     594:	f1 f7       	brne	.-4      	; 0x592 <read_bit+0x6>
    _delay_us(1);
	DDRx &= ~(1<<Px);
     596:	b8 98       	cbi	0x17, 0	; 23
     598:	80 e4       	ldi	r24, 0x40	; 64
     59a:	8a 95       	dec	r24
     59c:	f1 f7       	brne	.-4      	; 0x59a <read_bit+0xe>
    _delay_us(12);
    if(!(PINx & (1<<Px)))       //Abtastung innerhalb von 15µs
     59e:	86 b3       	in	r24, 0x16	; 22
	}
	else
    {
		return 1;
	}
}
     5a0:	81 70       	andi	r24, 0x01	; 1
     5a2:	08 95       	ret

000005a4 <write_bit>:

void write_bit(unsigned char bitval)    //kann 0 oder 1 sein
{
    DDRx |= (1<<Px);            //Ausgang
     5a4:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
     5a6:	c0 98       	cbi	0x18, 0	; 24
    if(bitval)
     5a8:	81 11       	cpse	r24, r1
	{
        PORTx |= (1<<Px);      //H-Pegel
     5aa:	c0 9a       	sbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5ac:	88 eb       	ldi	r24, 0xB8	; 184
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <write_bit+0xc>
    }
	_delay_us(110);        
    DDRx &= ~(1<<Px);
     5b4:	b8 98       	cbi	0x17, 0	; 23
    PORTx &= ~(1<<Px);
     5b6:	c0 98       	cbi	0x18, 0	; 24
}
     5b8:	08 95       	ret

000005ba <read_byte>:

unsigned char read_byte(void)
{
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
		{
            byte |= (1<<i);
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	c9 2e       	mov	r12, r25
     5d2:	d1 2c       	mov	r13, r1
     5d4:	80 ee       	ldi	r24, 0xE0	; 224
     5d6:	e8 2e       	mov	r14, r24
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	f8 2e       	mov	r15, r24
unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
     5dc:	0e 94 c6 02 	call	0x58c	; 0x58c <read_bit>
     5e0:	88 23       	and	r24, r24
     5e2:	41 f0       	breq	.+16     	; 0x5f4 <read_byte+0x3a>
		{
            byte |= (1<<i);
     5e4:	c6 01       	movw	r24, r12
     5e6:	0c 2e       	mov	r0, r28
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <read_byte+0x34>
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	0a 94       	dec	r0
     5f0:	e2 f7       	brpl	.-8      	; 0x5ea <read_byte+0x30>
     5f2:	18 2b       	or	r17, r24
     5f4:	c7 01       	movw	r24, r14
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <read_byte+0x3c>
     5fa:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
     5fc:	c8 30       	cpi	r28, 0x08	; 8
     5fe:	d1 05       	cpc	r29, r1
     600:	69 f7       	brne	.-38     	; 0x5dc <read_byte+0x22>
            byte |= (1<<i);
		}
        _delay_us(120);
    }
    return byte;
}
     602:	81 2f       	mov	r24, r17
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	08 95       	ret

00000614 <write_byte>:

void write_byte(unsigned char byte)
{
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	c0 e0       	ldi	r28, 0x00	; 0
     61e:	d0 e0       	ldi	r29, 0x00	; 0
    for(unsigned char i=0; i<8; i++)
	{
        if(byte & (1<<i))
     620:	08 2f       	mov	r16, r24
     622:	10 e0       	ldi	r17, 0x00	; 0
     624:	c8 01       	movw	r24, r16
     626:	0c 2e       	mov	r0, r28
     628:	02 c0       	rjmp	.+4      	; 0x62e <write_byte+0x1a>
     62a:	95 95       	asr	r25
     62c:	87 95       	ror	r24
     62e:	0a 94       	dec	r0
     630:	e2 f7       	brpl	.-8      	; 0x62a <write_byte+0x16>
     632:	80 ff       	sbrs	r24, 0
     634:	02 c0       	rjmp	.+4      	; 0x63a <write_byte+0x26>
		{
			write_bit(1);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	01 c0       	rjmp	.+2      	; 0x63c <write_byte+0x28>
		}
        else
		{
            write_bit(0);
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <write_bit>
     640:	21 96       	adiw	r28, 0x01	; 1
    return byte;
}

void write_byte(unsigned char byte)
{
    for(unsigned char i=0; i<8; i++)
     642:	c8 30       	cpi	r28, 0x08	; 8
     644:	d1 05       	cpc	r29, r1
     646:	71 f7       	brne	.-36     	; 0x624 <write_byte+0x10>
     648:	80 ee       	ldi	r24, 0xE0	; 224
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <write_byte+0x38>
		{
            write_bit(0);
		}
	}
    _delay_us(120);
}  
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	08 95       	ret

0000065a <wait_ready>:
	return 0;
}

void wait_ready(void)
{
	while(!(read_bit()));
     65a:	0e 94 c6 02 	call	0x58c	; 0x58c <read_bit>
     65e:	88 23       	and	r24, r24
     660:	e1 f3       	breq	.-8      	; 0x65a <wait_ready>
}
     662:	08 95       	ret

00000664 <read_scratchpad>:
	}
    _delay_us(120);
}  

unsigned char read_scratchpad(void)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29

	if(reset())
     668:	0e 94 b1 02 	call	0x562	; 0x562 <reset>
     66c:	88 23       	and	r24, r24
     66e:	e9 f0       	breq	.+58     	; 0x6aa <read_scratchpad+0x46>
	{
		write_byte(0xCC);
     670:	8c ec       	ldi	r24, 0xCC	; 204
     672:	0e 94 0a 03 	call	0x614	; 0x614 <write_byte>
		write_byte(0x44);
     676:	84 e4       	ldi	r24, 0x44	; 68
     678:	0e 94 0a 03 	call	0x614	; 0x614 <write_byte>
		wait_ready();
     67c:	0e 94 2d 03 	call	0x65a	; 0x65a <wait_ready>
		if(reset())
     680:	0e 94 b1 02 	call	0x562	; 0x562 <reset>
     684:	88 23       	and	r24, r24
     686:	89 f0       	breq	.+34     	; 0x6aa <read_scratchpad+0x46>
		{
			write_byte(0xCC);
     688:	8c ec       	ldi	r24, 0xCC	; 204
     68a:	0e 94 0a 03 	call	0x614	; 0x614 <write_byte>
			write_byte(0xBE);
     68e:	8e eb       	ldi	r24, 0xBE	; 190
     690:	0e 94 0a 03 	call	0x614	; 0x614 <write_byte>
     694:	c8 ed       	ldi	r28, 0xD8	; 216
     696:	d4 e0       	ldi	r29, 0x04	; 4
			for(unsigned char i=0; i<9; i++)
			{
				scratchpad [i] = read_byte();
     698:	0e 94 dd 02 	call	0x5ba	; 0x5ba <read_byte>
     69c:	89 93       	st	Y+, r24
		wait_ready();
		if(reset())
		{
			write_byte(0xCC);
			write_byte(0xBE);
			for(unsigned char i=0; i<9; i++)
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	c1 3e       	cpi	r28, 0xE1	; 225
     6a2:	d8 07       	cpc	r29, r24
     6a4:	c9 f7       	brne	.-14     	; 0x698 <read_scratchpad+0x34>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <read_scratchpad+0x48>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
			}
			return 1;
		}
	}
	return 0;
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <i2c_init>:
|== TWPS = 1 => (4^TWPS)= 4  // TWSR = (0<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx01 => TWSR = 1 (DEC) => 4^1 =  4 =|
|== TWPS = 2 => (4^TWPS)=16  // TWSR = (1<<TWPS1)|(0<<TWPS0) => TWSR = 0bxxxxxx10 => TWSR = 2 (DEC) => 4^2 = 16 =|
|== TWPS = 3 => (4^TWPS)=64  // TWSR = (1<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx11 => TWSR = 3 (DEC) => 4^3 = 64 =|
|===============================================================================================================*/

	TWBR = 0b00010010;	// HEX=0x12	or DEC=18	// FCPU = 16 000 000 |-> SCL = 16000000 / (16+(2*TWBR*(4^TWPS)) = 16000000 / (16+(2*18*(4))) = 16000000 / 160 = 100 000 Hz = 100 kHz
     6b2:	82 e1       	ldi	r24, 0x12	; 18
     6b4:	80 b9       	out	0x00, r24	; 0
	TWSR = (0<<TWPS1)|(1<<TWPS0);	// SCL = 16 000 000 / 64  = 250 000 = 250kHz
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	81 b9       	out	0x01, r24	; 1
	TWCR = (1<<TWEN);	//	TWCR = 0x04; // TWCR = (x<<TWINT)|(x<<TWEA)|(x<<TWSTA)|(x<<TWSTO)|(x<<TWEN)|(x<<TWIE);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	86 bf       	out	0x36, r24	; 54
	TWDR = 0b00000000;
     6be:	13 b8       	out	0x03, r1	; 3
}
     6c0:	08 95       	ret

000006c2 <i2c_start>:
/*****************************************
** START CONDITION OF I2C COMMUNICATION **
*****************************************/
void i2c_start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     6c2:	84 ea       	ldi	r24, 0xA4	; 164
     6c4:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
     6c6:	06 b6       	in	r0, 0x36	; 54
     6c8:	07 fe       	sbrs	r0, 7
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <i2c_start+0x4>
	{
	}
}
     6cc:	08 95       	ret

000006ce <i2c_stop>:
/****************************************
** STOP CONDITION OF I2C COMMUNICATION **
****************************************/
void i2c_stop()
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ce:	84 e9       	ldi	r24, 0x94	; 148
     6d0:	86 bf       	out	0x36, r24	; 54
}
     6d2:	08 95       	ret

000006d4 <i2c_write>:
/*******************************************
** WRITE/SEND 1 BYTE OF I2C COMMUNICATION **
*******************************************/
void i2c_write(unsigned char data)
{
	TWDR = data;
     6d4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
     6d6:	84 e8       	ldi	r24, 0x84	; 132
     6d8:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
     6da:	06 b6       	in	r0, 0x36	; 54
     6dc:	07 fe       	sbrs	r0, 7
     6de:	fd cf       	rjmp	.-6      	; 0x6da <i2c_write+0x6>
	{
	}
}
     6e0:	08 95       	ret

000006e2 <i2c_read>:
/**********************************************
** READ/RECEIVE BYTE(S) OF I2C COMMUNICATION **
**********************************************/
unsigned char i2c_read(unsigned char isLast)
{
	if(isLast == 0 )
     6e2:	88 23       	and	r24, r24
     6e4:	11 f4       	brne	.+4      	; 0x6ea <i2c_read+0x8>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);	// to next receive byte
     6e6:	84 ec       	ldi	r24, 0xC4	; 196
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <i2c_read+0xa>
	}
	else
	{
		TWCR = (1<<TWINT)|(1<<TWEN);			// to end of communication
     6ea:	84 e8       	ldi	r24, 0x84	; 132
     6ec:	86 bf       	out	0x36, r24	; 54
	}
	
	while((TWCR & (1<<TWINT)) == 0)
     6ee:	06 b6       	in	r0, 0x36	; 54
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <i2c_read+0xc>
	{
	}
	return TWDR;
     6f4:	83 b1       	in	r24, 0x03	; 3
}
     6f6:	08 95       	ret

000006f8 <LCD_EXECUTE_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_EXECUTE_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
     6f8:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
     6fa:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     6fc:	87 ff       	sbrs	r24, 7
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <LCD_EXECUTE_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     700:	d8 9a       	sbi	0x1b, 0	; 27
     702:	01 c0       	rjmp	.+2      	; 0x706 <LCD_EXECUTE_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
     704:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
     706:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     708:	9f 5f       	subi	r25, 0xFF	; 255
     70a:	98 30       	cpi	r25, 0x08	; 8
     70c:	11 f0       	breq	.+4      	; 0x712 <LCD_EXECUTE_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     70e:	88 0f       	add	r24, r24
     710:	f4 cf       	rjmp	.-24     	; 0x6fa <LCD_EXECUTE_COMMAND+0x2>
	}
//update from down comment
	LCD_REGSELECT_low();	// RS = 0
     712:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
     714:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
     716:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
	LCD_RCK_low();
     718:	da 98       	cbi	0x1b, 2	; 27
     71a:	88 ea       	ldi	r24, 0xA8	; 168
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	fc 01       	movw	r30, r24
     720:	31 97       	sbiw	r30, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <LCD_EXECUTE_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
     724:	da 9a       	sbi	0x1b, 2	; 27
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <LCD_EXECUTE_COMMAND+0x2e>
	LCD_REGSELECT_low();	// RS = 0
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);			//rcall 180 us
*/
	LCD_ENABLE_low();		// EN = 0
     72a:	db 98       	cbi	0x1b, 3	; 27
     72c:	80 e9       	ldi	r24, 0x90	; 144
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <LCD_EXECUTE_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us

}
     734:	08 95       	ret

00000736 <LCD_EXECUTE_DATA>:

/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	a8 ea       	ldi	r26, 0xA8	; 168
     740:	b2 e0       	ldi	r27, 0x02	; 2
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];
     742:	c0 e9       	ldi	r28, 0x90	; 144
     744:	d1 e0       	ldi	r29, 0x01	; 1
     746:	22 c0       	rjmp	.+68     	; 0x78c <LCD_EXECUTE_DATA+0x56>
     748:	fc 01       	movw	r30, r24
     74a:	e4 0f       	add	r30, r20
     74c:	f5 1f       	adc	r31, r21
     74e:	e0 81       	ld	r30, Z
     750:	20 e0       	ldi	r18, 0x00	; 0

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
     752:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     754:	e7 ff       	sbrs	r30, 7
     756:	02 c0       	rjmp	.+4      	; 0x75c <LCD_EXECUTE_DATA+0x26>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     758:	d8 9a       	sbi	0x1b, 0	; 27
     75a:	01 c0       	rjmp	.+2      	; 0x75e <LCD_EXECUTE_DATA+0x28>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
     75c:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
     75e:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	28 30       	cpi	r18, 0x08	; 8
     764:	11 f0       	breq	.+4      	; 0x76a <LCD_EXECUTE_DATA+0x34>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     766:	ee 0f       	add	r30, r30
     768:	f4 cf       	rjmp	.-24     	; 0x752 <LCD_EXECUTE_DATA+0x1c>
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
     76a:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
     76c:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
     76e:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
     770:	da 98       	cbi	0x1b, 2	; 27
     772:	fd 01       	movw	r30, r26
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <LCD_EXECUTE_DATA+0x3e>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
     778:	da 9a       	sbi	0x1b, 2	; 27
     77a:	fd 01       	movw	r30, r26
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <LCD_EXECUTE_DATA+0x46>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
     780:	db 98       	cbi	0x1b, 3	; 27
     782:	fe 01       	movw	r30, r28
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <LCD_EXECUTE_DATA+0x4e>
/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
     788:	4f 5f       	subi	r20, 0xFF	; 255
     78a:	5f 4f       	sbci	r21, 0xFF	; 255
     78c:	46 17       	cp	r20, r22
     78e:	57 07       	cpc	r21, r23
     790:	dc f2       	brlt	.-74     	; 0x748 <LCD_EXECUTE_DATA+0x12>
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}

//	LCD_EXECUTE_DATA_LAST();	// flush -> posleden simvol ili gore v cikala count_ns < numsymbols+1 ili count_ns <= numsymbols
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <LCD_EXECUTE_DATA_ONE>:

/************************************************
** WRITE/TRANSMIT ONE DATA BYTE TO LCD DISPLAY **
************************************************/
void LCD_EXECUTE_DATA_ONE(unsigned char data)	// HELP: LCD_EXECUTE_DATA(unsigned char data_byte_symbols) // LCD shift left out, msb is first
{
     798:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
     79a:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     79c:	87 ff       	sbrs	r24, 7
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <LCD_EXECUTE_DATA_ONE+0xc>
		{
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     7a0:	d8 9a       	sbi	0x1b, 0	; 27
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <LCD_EXECUTE_DATA_ONE+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
     7a4:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
     7a6:	d9 9a       	sbi	0x1b, 1	; 27
{
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     7a8:	9f 5f       	subi	r25, 0xFF	; 255
     7aa:	98 30       	cpi	r25, 0x08	; 8
     7ac:	11 f0       	breq	.+4      	; 0x7b2 <LCD_EXECUTE_DATA_ONE+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     7ae:	88 0f       	add	r24, r24
     7b0:	f4 cf       	rjmp	.-24     	; 0x79a <LCD_EXECUTE_DATA_ONE+0x2>
	}
//update from down comment
	LCD_REGSELECT_high();	// RS = 1
     7b2:	dd 9a       	sbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
     7b4:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
     7b6:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment

	LCD_RCK_low();
     7b8:	da 98       	cbi	0x1b, 2	; 27
     7ba:	88 ea       	ldi	r24, 0xA8	; 168
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	fc 01       	movw	r30, r24
     7c0:	31 97       	sbiw	r30, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <LCD_EXECUTE_DATA_ONE+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
     7c4:	da 9a       	sbi	0x1b, 2	; 27
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <LCD_EXECUTE_DATA_ONE+0x2e>
	LCD_REGSELECT_high();	// RS = 1
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);
*/
	LCD_ENABLE_low();		// EN = 0
     7ca:	db 98       	cbi	0x1b, 3	; 27
     7cc:	80 e9       	ldi	r24, 0x90	; 144
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <LCD_EXECUTE_DATA_ONE+0x38>
	_delay_us(100);
}
     7d4:	08 95       	ret

000007d6 <LCD_EXECUTE_DATA_LAST>:
/*****************************************************************************
** WRITE/TRANSMIT LAST DATA BYTE TO LCD DISPLAY AND FLUSH SN74HC595 BUFFER  **
*****************************************************************************/
void LCD_EXECUTE_DATA_LAST()	// flush -> izchistvane na bufer - prinuditelno izpisvane na posleden simvol
{
	LCD_ENABLE_low();
     7d6:	db 98       	cbi	0x1b, 3	; 27
	LCD_READWRITE_low();
     7d8:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
     7da:	dd 9a       	sbi	0x1b, 5	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7dc:	85 ed       	ldi	r24, 0xD5	; 213
     7de:	98 2f       	mov	r25, r24
     7e0:	9a 95       	dec	r25
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <LCD_EXECUTE_DATA_LAST+0xa>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
	LCD_ENABLE_high();
     7e4:	db 9a       	sbi	0x1b, 3	; 27
	LCD_READWRITE_low();
     7e6:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
     7e8:	dd 9a       	sbi	0x1b, 5	; 27
     7ea:	8a 95       	dec	r24
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <LCD_EXECUTE_DATA_LAST+0x14>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
}
     7ee:	08 95       	ret

000007f0 <LCD_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
     7f0:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
     7f2:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     7f4:	87 ff       	sbrs	r24, 7
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <LCD_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     7f8:	d8 9a       	sbi	0x1b, 0	; 27
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <LCD_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
     7fc:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
     7fe:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     800:	9f 5f       	subi	r25, 0xFF	; 255
     802:	98 30       	cpi	r25, 0x08	; 8
     804:	11 f0       	breq	.+4      	; 0x80a <LCD_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     806:	88 0f       	add	r24, r24
     808:	f4 cf       	rjmp	.-24     	; 0x7f2 <LCD_COMMAND+0x2>
	}
//update from down comment
	LCD_REGSELECT_low();	// RS = 0
     80a:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
     80c:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
     80e:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
	LCD_RCK_low();
     810:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     812:	88 ea       	ldi	r24, 0xA8	; 168
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	fc 01       	movw	r30, r24
     818:	31 97       	sbiw	r30, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <LCD_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
     81c:	da 9a       	sbi	0x1b, 2	; 27
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <LCD_COMMAND+0x2e>
	_delay_us(170);			//rcall 180 us

	LCD_ENABLE_low();		// EN = 0
     822:	db 98       	cbi	0x1b, 3	; 27
     824:	80 e9       	ldi	r24, 0x90	; 144
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <LCD_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us
}
     82c:	08 95       	ret

0000082e <LCD_CLEAR_CONTAIN>:
/**************************************
** CLEAR ALL CONTAINS ON LCD DISPLAY **
**************************************/
void LCD_CLEAR_CONTAIN()
{
	LCD_COMMAND(LCD_CLEAR);						// 0b00000001	// 1. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
     834:	80 ec       	ldi	r24, 0xC0	; 192
     836:	92 e1       	ldi	r25, 0x12	; 18
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <LCD_CLEAR_CONTAIN+0xa>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
}
     83c:	08 95       	ret

0000083e <LCD_INIT>:
/**********************************
** INITIZLIZATION OF LCD DISPLAY **
**********************************/
void LCD_INIT()
{
	LCD_COMMAND(LCD_8BIT_2ROWS_FONT5X7);		// 0b00111000	// 1. Function set: 8-bit interface data (DL = 1), 2-line display (N = 1), 5 x 7 dot character font (F = 0)
     83e:	88 e3       	ldi	r24, 0x38	; 56
     840:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_ENTRY_MODE_INC_NOSHIFT);	// 0b00000110	// 2. Entry mode set: Increment by 1 (I/D = 1), No shift (S = 0)
     844:	86 e0       	ldi	r24, 0x06	; 6
     846:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_MOVE_FIRST);								// 3.
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_CLEAR);						// 0b00000001	// 4. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
     856:	80 ec       	ldi	r24, 0xC0	; 192
     858:	92 e1       	ldi	r25, 0x12	; 18
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_INIT+0x1c>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
//	LCD_COMMAND(LCD_ON_BLINK_CURSOR);			// 0b00001111	// 5. Display on/off control: Display on (D = 1), Cursor on (C = 1), Blinking on (B = 1)
//	_delay_us(40);	// 37 uS	// comment for simulation
//	LCD_COMMAND(LCD_OFF);										// 5. Display off
}
     85e:	08 95       	ret

00000860 <LCD_DATA_STRING>:

/*********************************************************
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void LCD_DATA_STRING(char *data)
{
     860:	fc 01       	movw	r30, r24
     862:	28 ea       	ldi	r18, 0xA8	; 168
     864:	32 e0       	ldi	r19, 0x02	; 2
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
     866:	40 e9       	ldi	r20, 0x90	; 144
     868:	51 e0       	ldi	r21, 0x01	; 1
     86a:	1d c0       	rjmp	.+58     	; 0x8a6 <LCD_DATA_STRING+0x46>
     86c:	90 e0       	ldi	r25, 0x00	; 0
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
     86e:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     870:	87 ff       	sbrs	r24, 7
     872:	02 c0       	rjmp	.+4      	; 0x878 <LCD_DATA_STRING+0x18>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
     874:	d8 9a       	sbi	0x1b, 0	; 27
     876:	01 c0       	rjmp	.+2      	; 0x87a <LCD_DATA_STRING+0x1a>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
     878:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
     87a:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     87c:	9f 5f       	subi	r25, 0xFF	; 255
     87e:	98 30       	cpi	r25, 0x08	; 8
     880:	11 f0       	breq	.+4      	; 0x886 <LCD_DATA_STRING+0x26>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
     882:	88 0f       	add	r24, r24
     884:	f4 cf       	rjmp	.-24     	; 0x86e <LCD_DATA_STRING+0xe>
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;
     886:	31 96       	adiw	r30, 0x01	; 1
			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
     888:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
     88a:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
     88c:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
     88e:	da 98       	cbi	0x1b, 2	; 27
     890:	c9 01       	movw	r24, r18
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <LCD_DATA_STRING+0x32>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
     896:	da 9a       	sbi	0x1b, 2	; 27
     898:	c9 01       	movw	r24, r18
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <LCD_DATA_STRING+0x3a>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
     89e:	db 98       	cbi	0x1b, 3	; 27
     8a0:	ca 01       	movw	r24, r20
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <LCD_DATA_STRING+0x42>
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void LCD_DATA_STRING(char *data)
{
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
     8a6:	80 81       	ld	r24, Z
     8a8:	88 23       	and	r24, r24
     8aa:	01 f7       	brne	.-64     	; 0x86c <LCD_DATA_STRING+0xc>
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}
}
     8ac:	08 95       	ret

000008ae <LCD_CGRAM_CUSTOM_SYMBOLS>:
	 { 0x0E, 0x1B, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },	// Battery Charging  80%	// addr40-47
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	for(rows=0; rows<7; rows++)
     8b2:	10 92 e9 04 	sts	0x04E9, r1
     8b6:	10 92 e8 04 	sts	0x04E8, r1
     8ba:	25 c0       	rjmp	.+74     	; 0x906 <LCD_CGRAM_CUSTOM_SYMBOLS+0x58>
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
     8bc:	08 96       	adiw	r24, 0x08	; 8
     8be:	88 0f       	add	r24, r24
     8c0:	88 0f       	add	r24, r24
     8c2:	88 0f       	add	r24, r24
     8c4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_EXECUTE_COMMAND>
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	d0 e0       	ldi	r29, 0x00	; 0
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
     8cc:	e0 91 e8 04 	lds	r30, 0x04E8
     8d0:	f0 91 e9 04 	lds	r31, 0x04E9
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	8a 95       	dec	r24
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <LCD_CGRAM_CUSTOM_SYMBOLS+0x28>
     8de:	ec 0f       	add	r30, r28
     8e0:	fd 1f       	adc	r31, r29
     8e2:	e5 52       	subi	r30, 0x25	; 37
     8e4:	fd 4f       	sbci	r31, 0xFD	; 253
     8e6:	80 81       	ld	r24, Z
     8e8:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_EXECUTE_DATA_ONE>
void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
     8ec:	21 96       	adiw	r28, 0x01	; 1
     8ee:	c8 30       	cpi	r28, 0x08	; 8
     8f0:	d1 05       	cpc	r29, r1
     8f2:	61 f7       	brne	.-40     	; 0x8cc <LCD_CGRAM_CUSTOM_SYMBOLS+0x1e>
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
     8f4:	80 91 e8 04 	lds	r24, 0x04E8
     8f8:	90 91 e9 04 	lds	r25, 0x04E9
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	90 93 e9 04 	sts	0x04E9, r25
     902:	80 93 e8 04 	sts	0x04E8, r24
     906:	80 91 e8 04 	lds	r24, 0x04E8
     90a:	90 91 e9 04 	lds	r25, 0x04E9
     90e:	87 30       	cpi	r24, 0x07	; 7
     910:	91 05       	cpc	r25, r1
     912:	a4 f2       	brlt	.-88     	; 0x8bc <LCD_CGRAM_CUSTOM_SYMBOLS+0xe>
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
		}
	}
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <LCD_DATA_ULONG>:
/****************************************************************
** WRITE/TRANSMIT MORE DATA UNSIGNED LONG BYTES TO LCD DISPLAY **
****************************************************************/
// USE THIS: lcdDataULong( (unsigned long)k + 1 );
void LCD_DATA_ULONG(unsigned long data)		// void lcdDataULong(const unsigned long data)
{
     91a:	df 93       	push	r29
     91c:	cf 93       	push	r28
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	2a 97       	sbiw	r28, 0x0a	; 10
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(ultoa(data, buffer, 10));	// 10 -> DECIMAL
     92e:	ae 01       	movw	r20, r28
     930:	4f 5f       	subi	r20, 0xFF	; 255
     932:	5f 4f       	sbci	r21, 0xFF	; 255
     934:	2a e0       	ldi	r18, 0x0A	; 10
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	0e 94 c4 07 	call	0xf88	; 0xf88 <ultoa>
     93c:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
}
     940:	2a 96       	adiw	r28, 0x0a	; 10
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	cf 91       	pop	r28
     94e:	df 91       	pop	r29
     950:	08 95       	ret

00000952 <LCD_DATA_LONG>:
/*******************************************************
** WRITE/TRANSMIT MORE DATA LONG BYTES TO LCD DISPLAY **
*******************************************************/
// USE THIS: lcdDataLong( (long)k + 1 );
void LCD_DATA_LONG(long data)		// void lcdDataLong(const long data)
{
     952:	df 93       	push	r29
     954:	cf 93       	push	r28
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	2a 97       	sbiw	r28, 0x0a	; 10
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(ltoa(data, buffer, 10));	// 10 -> DECIMAL
     966:	ae 01       	movw	r20, r28
     968:	4f 5f       	subi	r20, 0xFF	; 255
     96a:	5f 4f       	sbci	r21, 0xFF	; 255
     96c:	2a e0       	ldi	r18, 0x0A	; 10
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	0e 94 90 07 	call	0xf20	; 0xf20 <ltoa>
     974:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
}
     978:	2a 96       	adiw	r28, 0x0a	; 10
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	cf 91       	pop	r28
     986:	df 91       	pop	r29
     988:	08 95       	ret

0000098a <LCD_DATA_INT>:
/******************************************************
** WRITE/TRANSMIT MORE DATA INT BYTES TO LCD DISPLAY **
******************************************************/
// USE THIS: lcdDataInt( (int)k + 1 );
void LCD_DATA_INT(int data)		// void lcdDataInt(const int data)
{
     98a:	df 93       	push	r29
     98c:	cf 93       	push	r28
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	2a 97       	sbiw	r28, 0x0a	; 10
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(itoa(data, buffer, 10));	// 10 -> DECIMAL
     99e:	be 01       	movw	r22, r28
     9a0:	6f 5f       	subi	r22, 0xFF	; 255
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	4a e0       	ldi	r20, 0x0A	; 10
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	0e 94 6f 07 	call	0xede	; 0xede <itoa>
     9ac:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
}
     9b0:	2a 96       	adiw	r28, 0x0a	; 10
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	08 95       	ret

000009c2 <LCD_DATA_UINT>:
/******************************************************
** WRITE/TRANSMIT MORE DATA INT BYTES TO LCD DISPLAY **
******************************************************/
// USE THIS: lcdDataUInt( (unsigned int)k + 1 );
void LCD_DATA_UINT(unsigned int data)		// void lcdDataUInt(const unsigned int data)
{
     9c2:	df 93       	push	r29
     9c4:	cf 93       	push	r28
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	2a 97       	sbiw	r28, 0x0a	; 10
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(utoa(data, buffer, 10));	// 10 -> DECIMAL
     9d6:	be 01       	movw	r22, r28
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	4a e0       	ldi	r20, 0x0A	; 10
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <utoa>
     9e4:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
}
     9e8:	2a 96       	adiw	r28, 0x0a	; 10
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	cf 91       	pop	r28
     9f6:	df 91       	pop	r29
     9f8:	08 95       	ret

000009fa <PGA2310_Volume_Update>:

/*************************************
** DEFINITION PGA2310 VOLUME UPDATE **
*************************************/
void PGA2310_Volume_Update(unsigned char pgaVolumeLeft, unsigned char pgaVolumeRight)
{
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	18 2f       	mov	r17, r24
     a00:	06 2f       	mov	r16, r22
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
     a02:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
     a04:	0e 94 20 06 	call	0xc40	; 0xc40 <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
     a08:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a0a:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
     a0c:	81 2f       	mov	r24, r17
     a0e:	60 2f       	mov	r22, r16
     a10:	0e 94 20 06 	call	0xc40	; 0xc40 <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
     a14:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA7 - /SS ENABLE
     a16:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
     a18:	81 2f       	mov	r24, r17
     a1a:	60 2f       	mov	r22, r16
     a1c:	0e 94 20 06 	call	0xc40	; 0xc40 <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
     a20:	df 9a       	sbi	0x1b, 7	; 27

//	return SUCCESS;
}
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <pga2310_init>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_init()
{
	spi_init();
     a28:	0e 94 0f 06 	call	0xc1e	; 0xc1e <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
     a2c:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	0e 94 20 06 	call	0xc40	; 0xc40 <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
     a36:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a38:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	0e 94 20 06 	call	0xc40	; 0xc40 <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
     a42:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a44:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	0e 94 20 06 	call	0xc40	; 0xc40 <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
     a4e:	df 9a       	sbi	0x1b, 7	; 27
}
     a50:	08 95       	ret

00000a52 <pga2310_reset>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_reset()
{
	spi_init();
     a52:	0e 94 0f 06 	call	0xc1e	; 0xc1e <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
     a56:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	0e 94 20 06 	call	0xc40	; 0xc40 <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
     a60:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a62:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	0e 94 20 06 	call	0xc40	; 0xc40 <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
     a6c:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
     a6e:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	0e 94 20 06 	call	0xc40	; 0xc40 <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
     a78:	df 9a       	sbi	0x1b, 7	; 27
}
     a7a:	08 95       	ret

00000a7c <uart_setup>:
			
		}
	}

//	UBRRL = 103;			// Baudrate: 9600; Parity: 0; StopBits: 1 (Error = 0.2%; 16MHz)
	UBRRH = 0;
     a7c:	10 bc       	out	0x20, r1	; 32

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
     a7e:	86 e8       	ldi	r24, 0x86	; 134
     a80:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0b10011000;		// TXEN,RXEN,RXCIE					// Enable Uart/Usart TX and RX
     a82:	88 e9       	ldi	r24, 0x98	; 152
     a84:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
     a86:	1c b8       	out	0x0c, r1	; 12
}
     a88:	08 95       	ret

00000a8a <uart_transmit>:

/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
     a8a:	ac 01       	movw	r20, r24
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	09 c0       	rjmp	.+18     	; 0xaa4 <uart_transmit+0x1a>
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		//UDR = uart_data[count_ns];
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
     a92:	5d 9b       	sbis	0x0b, 5	; 11
     a94:	fe cf       	rjmp	.-4      	; 0xa92 <uart_transmit+0x8>
		{
		}
		UDR = uart_data[count_ns];
     a96:	fa 01       	movw	r30, r20
     a98:	e2 0f       	add	r30, r18
     a9a:	f3 1f       	adc	r31, r19
     a9c:	80 81       	ld	r24, Z
     a9e:	8c b9       	out	0x0c, r24	; 12
/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
     aa0:	2f 5f       	subi	r18, 0xFF	; 255
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	26 17       	cp	r18, r22
     aa6:	37 07       	cpc	r19, r23
     aa8:	a4 f3       	brlt	.-24     	; 0xa92 <uart_transmit+0x8>
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
		{
		}
		UDR = uart_data[count_ns];
	}
}
     aaa:	08 95       	ret

00000aac <uart_transmit_one>:
/***************************************
** TRANSMIT/SEND 1 BYTE OF UART/USART **
***************************************/
void uart_transmit_one(unsigned char uart_data)
{
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
     aac:	5d 9b       	sbis	0x0b, 5	; 11
     aae:	fe cf       	rjmp	.-4      	; 0xaac <uart_transmit_one>
	{
	}
	UDR = uart_data;
     ab0:	8c b9       	out	0x0c, r24	; 12
}
     ab2:	08 95       	ret

00000ab4 <uart_transmit_DEC_to_BCD>:

/*****************************************************************		// NOT FINISHED
** TRANSMIT/SEND 1 BYTE CONVERTED FROM DEC TO BCD OF UART/USART **		// NOT FINISHED
*****************************************************************/		// NOT FINISHED
void uart_transmit_DEC_to_BCD(unsigned char dec_to_bcd_data)
{// pravi se preobrazuvane ot DEC to BCD i preobrazuvane za izvejdane na parviq simvol s filtar
     ab4:	98 2f       	mov	r25, r24
	
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
     ab6:	5d 9b       	sbis	0x0b, 5	; 11
     ab8:	fe cf       	rjmp	.-4      	; 0xab6 <uart_transmit_DEC_to_BCD+0x2>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data>>4));
     aba:	89 2f       	mov	r24, r25
     abc:	82 95       	swap	r24
     abe:	8f 70       	andi	r24, 0x0F	; 15
     ac0:	80 5d       	subi	r24, 0xD0	; 208
     ac2:	8c b9       	out	0x0c, r24	; 12

	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
     ac4:	5d 9b       	sbis	0x0b, 5	; 11
     ac6:	fe cf       	rjmp	.-4      	; 0xac4 <uart_transmit_DEC_to_BCD+0x10>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data & 0x0F));
     ac8:	9f 70       	andi	r25, 0x0F	; 15
     aca:	90 5d       	subi	r25, 0xD0	; 208
     acc:	9c b9       	out	0x0c, r25	; 12
	byte bcdToDec(byte val)
	{
  		return ( (val/16*10) + (val%16) );
	}
*/
}
     ace:	08 95       	ret

00000ad0 <transmitUart>:
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
     ad0:	5d 9b       	sbis	0x0b, 5	; 11
     ad2:	fe cf       	rjmp	.-4      	; 0xad0 <transmitUart>
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
     ad4:	8c b9       	out	0x0c, r24	; 12
}
     ad6:	08 95       	ret

00000ad8 <transmitUartString>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
     ad8:	fc 01       	movw	r30, r24
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <transmitUartString+0xc>
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
     adc:	5d 9b       	sbis	0x0b, 5	; 11
     ade:	fe cf       	rjmp	.-4      	; 0xadc <transmitUartString+0x4>
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
	{
		transmitUart(*data++);
     ae0:	31 96       	adiw	r30, 0x01	; 1
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
     ae2:	8c b9       	out	0x0c, r24	; 12
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
     ae4:	80 81       	ld	r24, Z
     ae6:	88 23       	and	r24, r24
     ae8:	c9 f7       	brne	.-14     	; 0xadc <transmitUartString+0x4>
	{
		transmitUart(*data++);
	}
}
     aea:	08 95       	ret

00000aec <receiveUart>:
/**************************************************		// NOT FINISHED
** RECEIVE/READ unsigned char BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
unsigned char receiveUart(void)
{
	while (!(UCSRA & (1<<RXC)))
     aec:	5f 9b       	sbis	0x0b, 7	; 11
     aee:	fe cf       	rjmp	.-4      	; 0xaec <receiveUart>
	{};							/* Wait for data to be received */
	return UDR;					/* Get and return received data from buffer */
     af0:	8c b1       	in	r24, 0x0c	; 12
}
     af2:	08 95       	ret

00000af4 <transmitUartLong>:
/******************************************		// NOT FINISHED
** TRANSMIT/SEND long BYTE OF UART/USART **		// NOT FINISHED
******************************************/		// NOT FINISHED
// USE THIS: transmitUartLong( (long)k + 1 );
void transmitUartLong(long data)		// void transmitUartLong(const long data)
{
     af4:	df 93       	push	r29
     af6:	cf 93       	push	r28
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	2a 97       	sbiw	r28, 0x0a	; 10
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ltoa(data, buffer, 10));		// 10 -> DECIMAL
     b08:	ae 01       	movw	r20, r28
     b0a:	4f 5f       	subi	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	2a e0       	ldi	r18, 0x0A	; 10
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	0e 94 90 07 	call	0xf20	; 0xf20 <ltoa>
     b16:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
}
     b1a:	2a 96       	adiw	r28, 0x0a	; 10
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	cf 91       	pop	r28
     b28:	df 91       	pop	r29
     b2a:	08 95       	ret

00000b2c <transmitUartULong>:
/***************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned long BYTE OF UART/USART **		// NOT FINISHED
***************************************************/		// NOT FINISHED
// USE THIS: transmitUartULong( (unsigned long)k + 1 );
void transmitUartULong(unsigned long data)		// void transmitUartULong(const unsigned long data)
{
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	2a 97       	sbiw	r28, 0x0a	; 10
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ultoa(data, buffer, 10));		// 10 -> DECIMAL
     b40:	ae 01       	movw	r20, r28
     b42:	4f 5f       	subi	r20, 0xFF	; 255
     b44:	5f 4f       	sbci	r21, 0xFF	; 255
     b46:	2a e0       	ldi	r18, 0x0A	; 10
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	0e 94 c4 07 	call	0xf88	; 0xf88 <ultoa>
     b4e:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
}
     b52:	2a 96       	adiw	r28, 0x0a	; 10
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <transmitUartInt>:
/*****************************************		// NOT FINISHED
** TRANSMIT/SEND int BYTE OF UART/USART **		// NOT FINISHED
*****************************************/		// NOT FINISHED
// USE THIS: transmitUartInt( (int)k + 1 );
void transmitUartInt(int data)		// void transmitUartInt(const int data)
{
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	2a 97       	sbiw	r28, 0x0a	; 10
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(itoa(data, buffer, 10));		// 10 -> DECIMAL
     b78:	be 01       	movw	r22, r28
     b7a:	6f 5f       	subi	r22, 0xFF	; 255
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	4a e0       	ldi	r20, 0x0A	; 10
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	0e 94 6f 07 	call	0xede	; 0xede <itoa>
     b86:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
}
     b8a:	2a 96       	adiw	r28, 0x0a	; 10
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <transmitUartUInt>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned int BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: transmitUartUInt( (unsigned int)k + 1 );
void transmitUartUInt(unsigned int data)		// void transmitUartUInt(const unsigned int data)
{
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	2a 97       	sbiw	r28, 0x0a	; 10
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(utoa(data, buffer, 10));		// 10 -> DECIMAL
     bb0:	be 01       	movw	r22, r28
     bb2:	6f 5f       	subi	r22, 0xFF	; 255
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255
     bb6:	4a e0       	ldi	r20, 0x0A	; 10
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <utoa>
     bbe:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
}
     bc2:	2a 96       	adiw	r28, 0x0a	; 10
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <uart_init>:
{
	switch(F_CPU)
	{
		case 16000000UL:
		{
			UBRRL = 103;	// Baudrate: 9600; (Error = 0.2%; 16MHz)
     bd4:	87 e6       	ldi	r24, 0x67	; 103
     bd6:	89 b9       	out	0x09, r24	; 9
			UBRRH = 0;
     bd8:	10 bc       	out	0x20, r1	; 32
		{
			break;
		}
	}
#ifdef DEBUG_SETTING
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
     bda:	8c e0       	ldi	r24, 0x0C	; 12
     bdc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
	LCD_COMMAND(LCD_SELECT_4ROW);	// select row 2								// and next is update volume lcd information
     be0:	84 ed       	ldi	r24, 0xD4	; 212
     be2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_COMMAND>
	LCD_DATA_STRING("Freq: ");		// 20 symbols			
     be6:	83 e1       	ldi	r24, 0x13	; 19
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
	LCD_DATA_ULONG(F_CPU);			// 20 symbols
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	74 e2       	ldi	r23, 0x24	; 36
     bf2:	84 ef       	ldi	r24, 0xF4	; 244
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 8d 04 	call	0x91a	; 0x91a <LCD_DATA_ULONG>
	LCD_DATA_STRING(" MHz");		// 20 symbols
     bfa:	8a e1       	ldi	r24, 0x1A	; 26
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	0e 94 30 04 	call	0x860	; 0x860 <LCD_DATA_STRING>
//	debug_print();

	// Razpoznavane na baudrate (skorost): 1. Izprashta se byte. 2. Poluchava se byte. 3. Sravnqva se polucheniq byte == izprateniq byte. // This is LOOP TX->RX
	// 4. Ako byte pri sravnqvaneto e edin i sasht to skorostta e izbranata v momenta, ako byte e razlichen - da se probva sas sledvashta baudrate.

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
     c02:	86 e8       	ldi	r24, 0x86	; 134
     c04:	80 bd       	out	0x20, r24	; 32
//	UCSRB = 0b10011000;		// Enable TXEN,RXEN,RXCIE	// Enable Uart/Usart TX and RX
	UCSRB = 0b00001000;		// Enable only TXEN			// Enable Uart/Usart only TX
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
     c0a:	1c b8       	out	0x0c, r1	; 12

#ifdef DEBUG_INFO
	transmitUartString("\r\n");
     c0c:	8f e1       	ldi	r24, 0x1F	; 31
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
#if DEBUG_SETTING
	transmitUartString("[UART Serial Port Settings] Baud rate: 9600, Data bits: 8 bits, Stop bits: 1 bit, Parity: None, Flow control: None or XON/XOFF\r\n");
     c14:	82 e2       	ldi	r24, 0x22	; 34
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
}
     c1c:	08 95       	ret

00000c1e <spi_init>:
/**************************
** INITIZLIZATION OF SPI **
***************************/
void spi_init()
{
	SPSR = (0<<SPIF)|(0<<WCOL)|(0<<SPI2X);
     c1e:	1e b8       	out	0x0e, r1	; 14
//	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);			//0b01010010	// SPR1   = 1 - 16 000 000 / 64  = 250 000 = 250kHz  // KOMENTAR ZARADI SIMULACIQTA - PROTEUS BLOKIRANE ZARADI BIT V REGISTAR
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz	 // KAKVA KOMBINACIQ OT 4-te BITa VODI DO RAZBLOKIRANETO ???
     c20:	83 e5       	ldi	r24, 0x53	; 83
     c22:	8d b9       	out	0x0d, r24	; 13
	SPDR = 0b00000000;
     c24:	1f b8       	out	0x0f, r1	; 15

	PGA2310_U8_SPI_CS_high();	// /SS - DISABLE
	PGA2310_U8_SPI(0b00000000, 0b00000000);
	*/

	SPCR = (0<<SPE);
     c26:	1d b8       	out	0x0d, r1	; 13
}
     c28:	08 95       	ret

00000c2a <spi_start>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c2a:	83 e5       	ldi	r24, 0x53	; 83
     c2c:	8d b9       	out	0x0d, r24	; 13
}
     c2e:	08 95       	ret

00000c30 <spi_stop>:
/**************************************
** DEFINITION SPI FUNCTION STOP ONLY **
**************************************/
void spi_stop()
{
	SPCR = (0<<SPE);
     c30:	1d b8       	out	0x0d, r1	; 13
}
     c32:	08 95       	ret

00000c34 <spi_write_one_byte>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c34:	93 e5       	ldi	r25, 0x53	; 83
     c36:	9d b9       	out	0x0d, r25	; 13
void spi_write_one_byte(unsigned char data)	// void PGA2310_U7_SPI(byte volume_left, byte volume_right)	//PGA2310_U7_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data;				//volume_right;
     c38:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
     c3a:	77 9b       	sbis	0x0e, 7	; 14
     c3c:	fe cf       	rjmp	.-4      	; 0xc3a <spi_write_one_byte+0x6>
	{
	}
}
     c3e:	08 95       	ret

00000c40 <spi_write_two_bytes>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c40:	93 e5       	ldi	r25, 0x53	; 83
     c42:	9d b9       	out	0x0d, r25	; 13
void spi_write_two_bytes(unsigned char data1, unsigned char data2)	// void PGA2310_U6_SPI(byte volume_left, byte volume_right)	//PGA2310_U6_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data1;				//volume_left;
     c44:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
     c46:	77 9b       	sbis	0x0e, 7	; 14
     c48:	fe cf       	rjmp	.-4      	; 0xc46 <spi_write_two_bytes+0x6>
	{
	}

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data2;				//volume_right;
     c4a:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)))
     c4c:	77 9b       	sbis	0x0e, 7	; 14
     c4e:	fe cf       	rjmp	.-4      	; 0xc4c <spi_write_two_bytes+0xc>
	{
	}
}
     c50:	08 95       	ret

00000c52 <spi_write_more_bytes>:

/*********************************************
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
     c52:	fc 01       	movw	r30, r24
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c54:	93 e5       	ldi	r25, 0x53	; 83
     c56:	06 c0       	rjmp	.+12     	; 0xc64 <spi_write_more_bytes+0x12>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
     c58:	31 96       	adiw	r30, 0x01	; 1
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
     c5a:	9d b9       	out	0x0d, r25	; 13
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
	{
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
		spi_start();
		SPDR = *data;			//volume_left;
     c5c:	80 81       	ld	r24, Z
     c5e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)))
     c60:	77 9b       	sbis	0x0e, 7	; 14
     c62:	fe cf       	rjmp	.-4      	; 0xc60 <spi_write_more_bytes+0xe>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
     c64:	80 81       	ld	r24, Z
     c66:	88 23       	and	r24, r24
     c68:	b9 f7       	brne	.-18     	; 0xc58 <spi_write_more_bytes+0x6>
		SPDR = *data;			//volume_left;
		while(!(SPSR & (1<<SPIF)))
		{
		}
	}
}
     c6a:	08 95       	ret

00000c6c <spi_read_more_bytes>:
unsigned char spi_read_more_bytes()	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
	unsigned char data = 0b00000000;
	//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data;			//volume_left;
     c6c:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)))
     c6e:	77 9b       	sbis	0x0e, 7	; 14
     c70:	fe cf       	rjmp	.-4      	; 0xc6e <spi_read_more_bytes+0x2>
	{
	}
	return data;
}
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret

00000c76 <decToBcd>:

/**************************************************************
**** CONVERT NORMAL DECIMAL NUMBERS TO BINARY CODED DECIMAL ***
**************************************************************/
unsigned char decToBcd(unsigned char val)
{
     c76:	48 2f       	mov	r20, r24
     c78:	6a e0       	ldi	r22, 0x0A	; 10
     c7a:	0e 94 63 07 	call	0xec6	; 0xec6 <__udivmodqi4>
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	8a 95       	dec	r24
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <decToBcd+0xe>
     c8c:	84 2f       	mov	r24, r20
     c8e:	0e 94 63 07 	call	0xec6	; 0xec6 <__udivmodqi4>
	return ( (val/10*16) + (val%10) );	// Get DEC format -> convert DEC to HEX
}
     c92:	89 2f       	mov	r24, r25
     c94:	82 0f       	add	r24, r18
     c96:	08 95       	ret

00000c98 <bcdToDec>:

/**************************************************************
**** CONVERT BINARY CODED DECIMAL TO NORMAL DECIMAL NUMBERS ***
**************************************************************/
unsigned char bcdToDec(unsigned char val)
{
     c98:	28 2f       	mov	r18, r24
     c9a:	22 95       	swap	r18
     c9c:	2f 70       	andi	r18, 0x0F	; 15
     c9e:	9a e0       	ldi	r25, 0x0A	; 10
     ca0:	29 9f       	mul	r18, r25
     ca2:	90 01       	movw	r18, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	8f 70       	andi	r24, 0x0F	; 15
	return ( (val/16*10) + (val%16) );	// Get HEX format -> convert HEX to DEC
}
     ca8:	82 0f       	add	r24, r18
     caa:	08 95       	ret

00000cac <shiftRightOutLsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
     cac:	a0 9a       	sbi	0x14, 0	; 20
     cae:	94 e4       	ldi	r25, 0x44	; 68
     cb0:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regALSB & 0x01)	// maska & za log "1" na LSB 0b00000001
     cb2:	90 ff       	sbrs	r25, 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <shiftRightOutLsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v LSB
     cb6:	a8 9a       	sbi	0x15, 0	; 21
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <shiftRightOutLsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
     cba:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	88 30       	cpi	r24, 0x08	; 8
     cc0:	11 f0       	breq	.+4      	; 0xcc6 <shiftRightOutLsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
		}
		
		regALSB = regALSB >> 1;	// shiftvane na >> nadqsno
     cc2:	96 95       	lsr	r25
     cc4:	f6 cf       	rjmp	.-20     	; 0xcb2 <shiftRightOutLsbFirst+0x6>
     cc6:	08 95       	ret

00000cc8 <shiftLeftOutMsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
     cc8:	a0 9a       	sbi	0x14, 0	; 20
     cca:	94 e4       	ldi	r25, 0x44	; 68
     ccc:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regAMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
     cce:	97 ff       	sbrs	r25, 7
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <shiftLeftOutMsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v MSB
     cd2:	a8 9a       	sbi	0x15, 0	; 21
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <shiftLeftOutMsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
     cd6:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	88 30       	cpi	r24, 0x08	; 8
     cdc:	11 f0       	breq	.+4      	; 0xce2 <shiftLeftOutMsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
		}
		
		regAMSB = regAMSB << 1;	// shiftvane na << nalqvo
     cde:	99 0f       	add	r25, r25
     ce0:	f6 cf       	rjmp	.-20     	; 0xcce <shiftLeftOutMsbFirst+0x6>
     ce2:	08 95       	ret

00000ce4 <shiftRightInLsbFirst>:
void shiftRightInLsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
     ce4:	a0 98       	cbi	0x14, 0	; 20
     ce6:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
     ce8:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	88 30       	cpi	r24, 0x08	; 8
     cee:	e1 f7       	brne	.-8      	; 0xce8 <shiftRightInLsbFirst+0x4>
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
	}

}
     cf0:	08 95       	ret

00000cf2 <shiftLeftInMsbFirst>:
void shiftLeftInMsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
     cf2:	a0 98       	cbi	0x14, 0	; 20
     cf4:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
     cf6:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	88 30       	cpi	r24, 0x08	; 8
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <shiftLeftInMsbFirst+0x4>
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
	}

}
     cfe:	08 95       	ret

00000d00 <delay_ms>:

/*************************************************************
*********** FUNCTION SOFTWARE DELAY IN MILISECONDS ***********
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	0b c0       	rjmp	.+22     	; 0xd1c <delay_ms+0x1c>
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(j=0;j<100;j++)
		{
		  asm("nop");
     d0a:	00 00       	nop
		  asm("nop");
     d0c:	00 00       	nop
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
	{
		for(j=0;j<100;j++)
     d0e:	2f 5f       	subi	r18, 0xFF	; 255
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	24 36       	cpi	r18, 0x64	; 100
     d14:	31 05       	cpc	r19, r1
     d16:	c9 f7       	brne	.-14     	; 0xd0a <delay_ms+0xa>
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
     d18:	4f 5f       	subi	r20, 0xFF	; 255
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	48 17       	cp	r20, r24
     d1e:	59 07       	cpc	r21, r25
     d20:	94 f3       	brlt	.-28     	; 0xd06 <delay_ms+0x6>
		{
		  asm("nop");
		  asm("nop");
		}
	}
}
     d22:	08 95       	ret

00000d24 <about>:


void about(void)
{
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
#ifdef DEBUG_INFO
	transmitUartString("[UART INFO] =====================================================\r\n");
     d28:	03 ea       	ldi	r16, 0xA3	; 163
     d2a:	13 e0       	ldi	r17, 0x03	; 3
     d2c:	c8 01       	movw	r24, r16
     d2e:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
	transmitUartString("[UART INFO] \tAuthors and creators: P.Upinov and P.Stoyanov\r\n");
     d32:	87 ee       	ldi	r24, 0xE7	; 231
     d34:	93 e0       	ldi	r25, 0x03	; 3
     d36:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
	transmitUartString("[UART INFO] \tDevice name: Digital Control Audio System\r\n");
     d3a:	84 e2       	ldi	r24, 0x24	; 36
     d3c:	94 e0       	ldi	r25, 0x04	; 4
     d3e:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
	transmitUartString("[UART INFO] \tFirmware version beta ");
     d42:	8d e5       	ldi	r24, 0x5D	; 93
     d44:	94 e0       	ldi	r25, 0x04	; 4
     d46:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
	transmitUartInt(FIRMWARE_VERSION);
     d4a:	88 e1       	ldi	r24, 0x18	; 24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 b2 05 	call	0xb64	; 0xb64 <transmitUartInt>
	transmitUartString("\r\n");
     d52:	81 e8       	ldi	r24, 0x81	; 129
     d54:	94 e0       	ldi	r25, 0x04	; 4
     d56:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
	transmitUartString("[UART INFO] =====================================================\r\n");
     d5a:	c8 01       	movw	r24, r16
     d5c:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
	transmitUartString("[UART INFO] Da dobavq upravlenie na:\r\n- FAN\r\n- DS18S20\r\n- IR\r\n- RTC\r\n- Memory\r\n\r\n");
     d60:	84 e8       	ldi	r24, 0x84	; 132
     d62:	94 e0       	ldi	r25, 0x04	; 4
     d64:	0e 94 6c 05 	call	0xad8	; 0xad8 <transmitUartString>
#endif
}
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	08 95       	ret

00000d6e <rotaryEncoderNikBarzakov>:
** READ/SCAN ROTARY ENCODER OF NIK BARZAKOV **
*********************************************/
char rotaryEncoderNikBarzakov()
{
	char tempEncoder = 0;
	if((ENCODER_A_low()) && (ENCODER_B_low()))			// A0, B0
     d6e:	9d 99       	sbic	0x13, 5	; 19
     d70:	0e c0       	rjmp	.+28     	; 0xd8e <rotaryEncoderNikBarzakov+0x20>
     d72:	9c 99       	sbic	0x13, 4	; 19
     d74:	0c c0       	rjmp	.+24     	; 0xd8e <rotaryEncoderNikBarzakov+0x20>
     d76:	88 ec       	ldi	r24, 0xC8	; 200
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <rotaryEncoderNikBarzakov+0xc>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_high()) && (ENCODER_B_low()))		// A1, B0
     d7e:	9d 9b       	sbis	0x13, 5	; 19
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <rotaryEncoderNikBarzakov+0x3c>
     d82:	83 b3       	in	r24, 0x13	; 19
     d84:	82 95       	swap	r24
     d86:	8f 70       	andi	r24, 0x0F	; 15
     d88:	80 95       	com	r24
     d8a:	81 70       	andi	r24, 0x01	; 1
     d8c:	08 95       	ret
// VOLUME UP
			tempEncoder = 1;	//	tempEncoder++;
			// ---> Clockwise; Zavartane po posoka na chasovnikovata strelka.
		}
	}
	else if((ENCODER_A_high()) && (ENCODER_B_low()))	// A1, B0
     d8e:	9d 9b       	sbis	0x13, 5	; 19
     d90:	0c c0       	rjmp	.+24     	; 0xdaa <rotaryEncoderNikBarzakov+0x3c>
     d92:	9c 99       	sbic	0x13, 4	; 19
     d94:	0a c0       	rjmp	.+20     	; 0xdaa <rotaryEncoderNikBarzakov+0x3c>
     d96:	88 ec       	ldi	r24, 0xC8	; 200
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <rotaryEncoderNikBarzakov+0x2c>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
     d9e:	9d 99       	sbic	0x13, 5	; 19
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <rotaryEncoderNikBarzakov+0x3c>
     da2:	9c 99       	sbic	0x13, 4	; 19
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <rotaryEncoderNikBarzakov+0x3c>
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	08 95       	ret
     daa:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// do nothing
	}
	return tempEncoder;
}
     dac:	08 95       	ret

00000dae <rotaryEncoderVer1>:
** READ/SCAN ROTARY ENCODER VERSION 1 / MODEL 1 **
*************************************************/
char rotaryEncoderVer1()	// Check imediate now bits in PIN register.
{
	char tempEncoder = 0;							// A1, B1
	if((ENCODER_A_low()) && (ENCODER_B_high()))			// A0, B1
     dae:	9d 99       	sbic	0x13, 5	; 19
     db0:	0e c0       	rjmp	.+28     	; 0xdce <rotaryEncoderVer1+0x20>
     db2:	9c 9b       	sbis	0x13, 4	; 19
     db4:	0c c0       	rjmp	.+24     	; 0xdce <rotaryEncoderVer1+0x20>
     db6:	88 ec       	ldi	r24, 0xC8	; 200
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <rotaryEncoderVer1+0xc>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
     dbe:	9d 99       	sbic	0x13, 5	; 19
     dc0:	14 c0       	rjmp	.+40     	; 0xdea <rotaryEncoderVer1+0x3c>
     dc2:	83 b3       	in	r24, 0x13	; 19
     dc4:	82 95       	swap	r24
     dc6:	8f 70       	andi	r24, 0x0F	; 15
     dc8:	80 95       	com	r24
     dca:	81 70       	andi	r24, 0x01	; 1
     dcc:	08 95       	ret
//			PORTD = volumeMassive[volumeIndex];
			// ---> Clockwise; Zavartane po posoka na chasovnikovata strelka.
		}

	}													// A1. B1
	else if((ENCODER_A_high()) && (ENCODER_B_low()))	// A1, B0
     dce:	9d 9b       	sbis	0x13, 5	; 19
     dd0:	0c c0       	rjmp	.+24     	; 0xdea <rotaryEncoderVer1+0x3c>
     dd2:	9c 99       	sbic	0x13, 4	; 19
     dd4:	0a c0       	rjmp	.+20     	; 0xdea <rotaryEncoderVer1+0x3c>
     dd6:	88 ec       	ldi	r24, 0xC8	; 200
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <rotaryEncoderVer1+0x2c>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
     dde:	9d 99       	sbic	0x13, 5	; 19
     de0:	04 c0       	rjmp	.+8      	; 0xdea <rotaryEncoderVer1+0x3c>
     de2:	9c 99       	sbic	0x13, 4	; 19
     de4:	02 c0       	rjmp	.+4      	; 0xdea <rotaryEncoderVer1+0x3c>
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	08 95       	ret
     dea:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// do nothing
	}
	return tempEncoder;
}
     dec:	08 95       	ret

00000dee <rotaryEncoderVer2>:
     dee:	88 ec       	ldi	r24, 0xC8	; 200
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	fc 01       	movw	r30, r24
     df4:	31 97       	sbiw	r30, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <rotaryEncoderVer2+0x6>
     df8:	fc 01       	movw	r30, r24
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <rotaryEncoderVer2+0xc>
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <rotaryEncoderVer2+0x10>
	else
	{
		// do nothing
	}
	return tempEncoder;
}
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	08 95       	ret

00000e06 <RELAYS_IN_INIT>:
/*********************************************
** INITIZLIZATION OF SHIFT REGISTER 74HC595 **
*********************************************/
void RELAYS_IN_INIT()
{
}
     e06:	08 95       	ret

00000e08 <RELAYS_OUT_INIT>:

void RELAYS_OUT_INIT()
{
}
     e08:	08 95       	ret

00000e0a <RELAYS_IN_CHOOSE>:

/****************************************************************************************************************
** DEFINITION RELAYS IN FUNCTIONS, WRITE/TRANSMIT 8bits (1Byte) TO SHIFT REGISTER 74HC595 AND CHOOSE RELAYS IN **
****************************************************************************************************************/
void RELAYS_IN_CHOOSE(unsigned char rel_in)	// HELP: RELAYS_IN_CHOOSE(unsigned char byte_of_choosing_combination_of_relay_in) // 74HC595 shift right out, lsb is first
{
     e0a:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeLSB = rel_in;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		RELIN_SCK_low();
     e0c:	ae 98       	cbi	0x15, 6	; 21

		if(storeLSB & 0x01)	// maska & za log "1" na LSB 0b00000001
     e0e:	80 ff       	sbrs	r24, 0
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <RELAYS_IN_CHOOSE+0xc>
		{
			RELIN_SDI_high();	// izvejdane na log "1" v MSB	// PORTC |= (1<<RELIN_SDI_PIN);
     e12:	af 9a       	sbi	0x15, 7	; 21
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <RELAYS_IN_CHOOSE+0xe>
		}
		else
		{
			RELIN_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
     e16:	af 98       	cbi	0x15, 7	; 21
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno

		RELIN_SCK_high();
     e18:	ae 9a       	sbi	0x15, 6	; 21
{
	unsigned char storeLSB;
	unsigned char x;
	storeLSB = rel_in;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     e1a:	9f 5f       	subi	r25, 0xFF	; 255
     e1c:	98 30       	cpi	r25, 0x08	; 8
     e1e:	11 f0       	breq	.+4      	; 0xe24 <RELAYS_IN_CHOOSE+0x1a>
		else
		{
			RELIN_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno
     e20:	86 95       	lsr	r24
     e22:	f4 cf       	rjmp	.-24     	; 0xe0c <RELAYS_IN_CHOOSE+0x2>

		RELIN_SCK_high();
	}

	RELIN_RCK_low();
     e24:	ab 98       	cbi	0x15, 3	; 21
     e26:	88 ea       	ldi	r24, 0xA8	; 168
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	fc 01       	movw	r30, r24
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <RELAYS_IN_CHOOSE+0x22>
	_delay_us(170);			//rcall 180 us
	RELIN_RCK_high();
     e30:	ab 9a       	sbi	0x15, 3	; 21
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <RELAYS_IN_CHOOSE+0x28>
	_delay_us(170);			//rcall 180 us

}
     e36:	08 95       	ret

00000e38 <relays_in1_2ch>:

void relays_in1_2ch()
{
	RELAYS_IN_CHOOSE(0b00100000);	// RELE 1
     e38:	80 e2       	ldi	r24, 0x20	; 32
     e3a:	0e 94 05 07 	call	0xe0a	; 0xe0a <RELAYS_IN_CHOOSE>
}
     e3e:	08 95       	ret

00000e40 <relays_in1_6ch>:

void relays_in1_6ch()
{
	RELAYS_IN_CHOOSE(0b01100001);	// RELE 1,2,3
     e40:	81 e6       	ldi	r24, 0x61	; 97
     e42:	0e 94 05 07 	call	0xe0a	; 0xe0a <RELAYS_IN_CHOOSE>
}
     e46:	08 95       	ret

00000e48 <relays_in2_2ch>:

void relays_in2_2ch()
{
	RELAYS_IN_CHOOSE(0b00001010);	// RELE 4,5
     e48:	8a e0       	ldi	r24, 0x0A	; 10
     e4a:	0e 94 05 07 	call	0xe0a	; 0xe0a <RELAYS_IN_CHOOSE>
}
     e4e:	08 95       	ret

00000e50 <relays_in2_6ch>:

void relays_in2_6ch()
{
	RELAYS_IN_CHOOSE(0b10011010);	// RELE 4,5,6,7
     e50:	8a e9       	ldi	r24, 0x9A	; 154
     e52:	0e 94 05 07 	call	0xe0a	; 0xe0a <RELAYS_IN_CHOOSE>
}
     e56:	08 95       	ret

00000e58 <relays_in3_2ch>:

void relays_in3_2ch()
{
	RELAYS_IN_CHOOSE(0b00001100);	// RELE 8,5
     e58:	8c e0       	ldi	r24, 0x0C	; 12
     e5a:	0e 94 05 07 	call	0xe0a	; 0xe0a <RELAYS_IN_CHOOSE>
}
     e5e:	08 95       	ret

00000e60 <relays_in3_6ch>:

void relays_in3_6ch()
{
	RELAYS_IN_CHOOSE(0b10011100);	// RELE 8,5,6,7
     e60:	8c e9       	ldi	r24, 0x9C	; 156
     e62:	0e 94 05 07 	call	0xe0a	; 0xe0a <RELAYS_IN_CHOOSE>
}
     e66:	08 95       	ret

00000e68 <relays_in_off>:

void relays_in_off()
{
	RELAYS_IN_CHOOSE(0b00000000);	// 0b00000000 // [8][7][6][5][4][3][2][1] // RELETA IZKLIUCHENI 
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 05 07 	call	0xe0a	; 0xe0a <RELAYS_IN_CHOOSE>
}
     e6e:	08 95       	ret

00000e70 <relays_in_init>:

void relays_in_init()
{
	RELAYS_IN_CHOOSE(0b00000000);	// 0b00000000 // [8][7][6][5][4][3][2][1] // RELETA IZKLIUCHENI 
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0e 94 05 07 	call	0xe0a	; 0xe0a <RELAYS_IN_CHOOSE>
}
     e76:	08 95       	ret

00000e78 <RELAYS_OUT_CHOOSE>:
/******************************************************************************************************************
** DEFINITION RELAYS OUT FUNCTIONS, WRITE/TRANSMIT 8bits (1Byte) TO SHIFT REGISTER 74HC595 AND CHOOSE RELAYS OUT **
******************************************************************************************************************/
void RELAYS_OUT_CHOOSE(unsigned char rel_out)	// HELP: RELAYS_OUT_CHOOSE(unsigned char byte_of_choosing_combination_of_relay_in) // 74HC595 shift right out, lsb is first
{
     e78:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeLSB = rel_out;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		RELOUT_SCK_low();
     e7a:	96 98       	cbi	0x12, 6	; 18

		if(storeLSB & 0x01)	// maska & za log "1" na LSB 0b00000001
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <RELAYS_OUT_CHOOSE+0xc>
		{
			RELOUT_SDI_high();	// izvejdane na log "1" v MSB	// PORTC |= (1<<RELIN_SDI_PIN);
     e80:	c4 9a       	sbi	0x18, 4	; 24
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <RELAYS_OUT_CHOOSE+0xe>
		}
		else
		{
			RELOUT_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
     e84:	c4 98       	cbi	0x18, 4	; 24
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno

		RELOUT_SCK_high();
     e86:	96 9a       	sbi	0x12, 6	; 18
{
	unsigned char storeLSB;
	unsigned char x;
	storeLSB = rel_out;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
     e88:	9f 5f       	subi	r25, 0xFF	; 255
     e8a:	98 30       	cpi	r25, 0x08	; 8
     e8c:	11 f0       	breq	.+4      	; 0xe92 <RELAYS_OUT_CHOOSE+0x1a>
		else
		{
			RELOUT_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno
     e8e:	86 95       	lsr	r24
     e90:	f4 cf       	rjmp	.-24     	; 0xe7a <RELAYS_OUT_CHOOSE+0x2>

		RELOUT_SCK_high();
	}

	RELOUT_RCK_low();
     e92:	97 98       	cbi	0x12, 7	; 18
     e94:	88 ea       	ldi	r24, 0xA8	; 168
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	fc 01       	movw	r30, r24
     e9a:	31 97       	sbiw	r30, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <RELAYS_OUT_CHOOSE+0x22>
	_delay_us(170);			//rcall 180 us
	RELOUT_RCK_high();
     e9e:	97 9a       	sbi	0x12, 7	; 18
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <RELAYS_OUT_CHOOSE+0x28>
	_delay_us(170);			//rcall 180 us

}
     ea4:	08 95       	ret

00000ea6 <relays_out_1ch>:

void relays_out_1ch()
{
	RELAYS_OUT_CHOOSE(0b10000000);	// RELE 1
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	0e 94 3c 07 	call	0xe78	; 0xe78 <RELAYS_OUT_CHOOSE>
}
     eac:	08 95       	ret

00000eae <relays_out_6ch>:

void relays_out_6ch()
{
	RELAYS_OUT_CHOOSE(0b11111100);	// RELE 1,2,3,4,5,6
     eae:	8c ef       	ldi	r24, 0xFC	; 252
     eb0:	0e 94 3c 07 	call	0xe78	; 0xe78 <RELAYS_OUT_CHOOSE>
}
     eb4:	08 95       	ret

00000eb6 <relays_out_off>:
void relays_out_off()
{
	RELAYS_OUT_CHOOSE(0b00000000);	// RELE 1,2,3,4,5,6
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	0e 94 3c 07 	call	0xe78	; 0xe78 <RELAYS_OUT_CHOOSE>
}
     ebc:	08 95       	ret

00000ebe <relays_out_init>:
void relays_out_init()
{
	RELAYS_OUT_CHOOSE(0b00000000);	// RELE 1,2,3,4,5,6
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0e 94 3c 07 	call	0xe78	; 0xe78 <RELAYS_OUT_CHOOSE>
}
     ec4:	08 95       	ret

00000ec6 <__udivmodqi4>:
     ec6:	99 1b       	sub	r25, r25
     ec8:	79 e0       	ldi	r23, 0x09	; 9
     eca:	04 c0       	rjmp	.+8      	; 0xed4 <__udivmodqi4_ep>

00000ecc <__udivmodqi4_loop>:
     ecc:	99 1f       	adc	r25, r25
     ece:	96 17       	cp	r25, r22
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <__udivmodqi4_ep>
     ed2:	96 1b       	sub	r25, r22

00000ed4 <__udivmodqi4_ep>:
     ed4:	88 1f       	adc	r24, r24
     ed6:	7a 95       	dec	r23
     ed8:	c9 f7       	brne	.-14     	; 0xecc <__udivmodqi4_loop>
     eda:	80 95       	com	r24
     edc:	08 95       	ret

00000ede <itoa>:
     ede:	fb 01       	movw	r30, r22
     ee0:	9f 01       	movw	r18, r30
     ee2:	e8 94       	clt
     ee4:	42 30       	cpi	r20, 0x02	; 2
     ee6:	c4 f0       	brlt	.+48     	; 0xf18 <itoa+0x3a>
     ee8:	45 32       	cpi	r20, 0x25	; 37
     eea:	b4 f4       	brge	.+44     	; 0xf18 <itoa+0x3a>
     eec:	4a 30       	cpi	r20, 0x0A	; 10
     eee:	29 f4       	brne	.+10     	; 0xefa <itoa+0x1c>
     ef0:	97 fb       	bst	r25, 7
     ef2:	1e f4       	brtc	.+6      	; 0xefa <itoa+0x1c>
     ef4:	90 95       	com	r25
     ef6:	81 95       	neg	r24
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	64 2f       	mov	r22, r20
     efc:	77 27       	eor	r23, r23
     efe:	0e 94 0f 08 	call	0x101e	; 0x101e <__udivmodhi4>
     f02:	80 5d       	subi	r24, 0xD0	; 208
     f04:	8a 33       	cpi	r24, 0x3A	; 58
     f06:	0c f0       	brlt	.+2      	; 0xf0a <itoa+0x2c>
     f08:	89 5d       	subi	r24, 0xD9	; 217
     f0a:	81 93       	st	Z+, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	a1 f7       	brne	.-24     	; 0xefa <itoa+0x1c>
     f12:	16 f4       	brtc	.+4      	; 0xf18 <itoa+0x3a>
     f14:	5d e2       	ldi	r21, 0x2D	; 45
     f16:	51 93       	st	Z+, r21
     f18:	10 82       	st	Z, r1
     f1a:	c9 01       	movw	r24, r18
     f1c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <strrev>

00000f20 <ltoa>:
     f20:	fa 01       	movw	r30, r20
     f22:	cf 93       	push	r28
     f24:	ff 93       	push	r31
     f26:	ef 93       	push	r30
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	44 f1       	brlt	.+80     	; 0xf7c <ltoa+0x5c>
     f2c:	25 32       	cpi	r18, 0x25	; 37
     f2e:	34 f5       	brge	.+76     	; 0xf7c <ltoa+0x5c>
     f30:	c2 2f       	mov	r28, r18
     f32:	e8 94       	clt
     f34:	ca 30       	cpi	r28, 0x0A	; 10
     f36:	49 f4       	brne	.+18     	; 0xf4a <ltoa+0x2a>
     f38:	97 fb       	bst	r25, 7
     f3a:	3e f4       	brtc	.+14     	; 0xf4a <ltoa+0x2a>
     f3c:	90 95       	com	r25
     f3e:	80 95       	com	r24
     f40:	70 95       	com	r23
     f42:	61 95       	neg	r22
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	8f 4f       	sbci	r24, 0xFF	; 255
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	2c 2f       	mov	r18, r28
     f4c:	33 27       	eor	r19, r19
     f4e:	44 27       	eor	r20, r20
     f50:	55 27       	eor	r21, r21
     f52:	ff 93       	push	r31
     f54:	ef 93       	push	r30
     f56:	0e 94 23 08 	call	0x1046	; 0x1046 <__udivmodsi4>
     f5a:	ef 91       	pop	r30
     f5c:	ff 91       	pop	r31
     f5e:	60 5d       	subi	r22, 0xD0	; 208
     f60:	6a 33       	cpi	r22, 0x3A	; 58
     f62:	0c f0       	brlt	.+2      	; 0xf66 <ltoa+0x46>
     f64:	69 5d       	subi	r22, 0xD9	; 217
     f66:	61 93       	st	Z+, r22
     f68:	b9 01       	movw	r22, r18
     f6a:	ca 01       	movw	r24, r20
     f6c:	60 50       	subi	r22, 0x00	; 0
     f6e:	70 40       	sbci	r23, 0x00	; 0
     f70:	80 40       	sbci	r24, 0x00	; 0
     f72:	90 40       	sbci	r25, 0x00	; 0
     f74:	51 f7       	brne	.-44     	; 0xf4a <ltoa+0x2a>
     f76:	16 f4       	brtc	.+4      	; 0xf7c <ltoa+0x5c>
     f78:	cd e2       	ldi	r28, 0x2D	; 45
     f7a:	c1 93       	st	Z+, r28
     f7c:	10 82       	st	Z, r1
     f7e:	8f 91       	pop	r24
     f80:	9f 91       	pop	r25
     f82:	cf 91       	pop	r28
     f84:	0c 94 ff 07 	jmp	0xffe	; 0xffe <strrev>

00000f88 <ultoa>:
     f88:	fa 01       	movw	r30, r20
     f8a:	cf 93       	push	r28
     f8c:	ff 93       	push	r31
     f8e:	ef 93       	push	r30
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	cc f0       	brlt	.+50     	; 0xfc6 <ultoa+0x3e>
     f94:	25 32       	cpi	r18, 0x25	; 37
     f96:	bc f4       	brge	.+46     	; 0xfc6 <ultoa+0x3e>
     f98:	c2 2f       	mov	r28, r18
     f9a:	2c 2f       	mov	r18, r28
     f9c:	33 27       	eor	r19, r19
     f9e:	44 27       	eor	r20, r20
     fa0:	55 27       	eor	r21, r21
     fa2:	ff 93       	push	r31
     fa4:	ef 93       	push	r30
     fa6:	0e 94 23 08 	call	0x1046	; 0x1046 <__udivmodsi4>
     faa:	ef 91       	pop	r30
     fac:	ff 91       	pop	r31
     fae:	60 5d       	subi	r22, 0xD0	; 208
     fb0:	6a 33       	cpi	r22, 0x3A	; 58
     fb2:	0c f0       	brlt	.+2      	; 0xfb6 <ultoa+0x2e>
     fb4:	69 5d       	subi	r22, 0xD9	; 217
     fb6:	61 93       	st	Z+, r22
     fb8:	b9 01       	movw	r22, r18
     fba:	ca 01       	movw	r24, r20
     fbc:	60 50       	subi	r22, 0x00	; 0
     fbe:	70 40       	sbci	r23, 0x00	; 0
     fc0:	80 40       	sbci	r24, 0x00	; 0
     fc2:	90 40       	sbci	r25, 0x00	; 0
     fc4:	51 f7       	brne	.-44     	; 0xf9a <ultoa+0x12>
     fc6:	10 82       	st	Z, r1
     fc8:	8f 91       	pop	r24
     fca:	9f 91       	pop	r25
     fcc:	cf 91       	pop	r28
     fce:	0c 94 ff 07 	jmp	0xffe	; 0xffe <strrev>

00000fd2 <utoa>:
     fd2:	fb 01       	movw	r30, r22
     fd4:	9f 01       	movw	r18, r30
     fd6:	42 30       	cpi	r20, 0x02	; 2
     fd8:	74 f0       	brlt	.+28     	; 0xff6 <utoa+0x24>
     fda:	45 32       	cpi	r20, 0x25	; 37
     fdc:	64 f4       	brge	.+24     	; 0xff6 <utoa+0x24>
     fde:	64 2f       	mov	r22, r20
     fe0:	77 27       	eor	r23, r23
     fe2:	0e 94 0f 08 	call	0x101e	; 0x101e <__udivmodhi4>
     fe6:	80 5d       	subi	r24, 0xD0	; 208
     fe8:	8a 33       	cpi	r24, 0x3A	; 58
     fea:	0c f0       	brlt	.+2      	; 0xfee <utoa+0x1c>
     fec:	89 5d       	subi	r24, 0xD9	; 217
     fee:	81 93       	st	Z+, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	a1 f7       	brne	.-24     	; 0xfde <utoa+0xc>
     ff6:	10 82       	st	Z, r1
     ff8:	c9 01       	movw	r24, r18
     ffa:	0c 94 ff 07 	jmp	0xffe	; 0xffe <strrev>

00000ffe <strrev>:
     ffe:	dc 01       	movw	r26, r24
    1000:	fc 01       	movw	r30, r24
    1002:	67 2f       	mov	r22, r23
    1004:	71 91       	ld	r23, Z+
    1006:	77 23       	and	r23, r23
    1008:	e1 f7       	brne	.-8      	; 0x1002 <strrev+0x4>
    100a:	32 97       	sbiw	r30, 0x02	; 2
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <strrev+0x18>
    100e:	7c 91       	ld	r23, X
    1010:	6d 93       	st	X+, r22
    1012:	70 83       	st	Z, r23
    1014:	62 91       	ld	r22, -Z
    1016:	ae 17       	cp	r26, r30
    1018:	bf 07       	cpc	r27, r31
    101a:	c8 f3       	brcs	.-14     	; 0x100e <strrev+0x10>
    101c:	08 95       	ret

0000101e <__udivmodhi4>:
    101e:	aa 1b       	sub	r26, r26
    1020:	bb 1b       	sub	r27, r27
    1022:	51 e1       	ldi	r21, 0x11	; 17
    1024:	07 c0       	rjmp	.+14     	; 0x1034 <__udivmodhi4_ep>

00001026 <__udivmodhi4_loop>:
    1026:	aa 1f       	adc	r26, r26
    1028:	bb 1f       	adc	r27, r27
    102a:	a6 17       	cp	r26, r22
    102c:	b7 07       	cpc	r27, r23
    102e:	10 f0       	brcs	.+4      	; 0x1034 <__udivmodhi4_ep>
    1030:	a6 1b       	sub	r26, r22
    1032:	b7 0b       	sbc	r27, r23

00001034 <__udivmodhi4_ep>:
    1034:	88 1f       	adc	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	5a 95       	dec	r21
    103a:	a9 f7       	brne	.-22     	; 0x1026 <__udivmodhi4_loop>
    103c:	80 95       	com	r24
    103e:	90 95       	com	r25
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	08 95       	ret

00001046 <__udivmodsi4>:
    1046:	a1 e2       	ldi	r26, 0x21	; 33
    1048:	1a 2e       	mov	r1, r26
    104a:	aa 1b       	sub	r26, r26
    104c:	bb 1b       	sub	r27, r27
    104e:	fd 01       	movw	r30, r26
    1050:	0d c0       	rjmp	.+26     	; 0x106c <__udivmodsi4_ep>

00001052 <__udivmodsi4_loop>:
    1052:	aa 1f       	adc	r26, r26
    1054:	bb 1f       	adc	r27, r27
    1056:	ee 1f       	adc	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	a2 17       	cp	r26, r18
    105c:	b3 07       	cpc	r27, r19
    105e:	e4 07       	cpc	r30, r20
    1060:	f5 07       	cpc	r31, r21
    1062:	20 f0       	brcs	.+8      	; 0x106c <__udivmodsi4_ep>
    1064:	a2 1b       	sub	r26, r18
    1066:	b3 0b       	sbc	r27, r19
    1068:	e4 0b       	sbc	r30, r20
    106a:	f5 0b       	sbc	r31, r21

0000106c <__udivmodsi4_ep>:
    106c:	66 1f       	adc	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	1a 94       	dec	r1
    1076:	69 f7       	brne	.-38     	; 0x1052 <__udivmodsi4_loop>
    1078:	60 95       	com	r22
    107a:	70 95       	com	r23
    107c:	80 95       	com	r24
    107e:	90 95       	com	r25
    1080:	9b 01       	movw	r18, r22
    1082:	ac 01       	movw	r20, r24
    1084:	bd 01       	movw	r22, r26
    1086:	cf 01       	movw	r24, r30
    1088:	08 95       	ret

0000108a <_exit>:
    108a:	f8 94       	cli

0000108c <__stop_program>:
    108c:	ff cf       	rjmp	.-2      	; 0x108c <__stop_program>
