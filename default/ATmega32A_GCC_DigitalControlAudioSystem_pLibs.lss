
ATmega32A_GCC_DigitalControlAudioSystem_pLibs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000a32  00000ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800098  00800098  00000afe  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000518  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001675  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000884  00000000  00000000  0000278b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001327  00000000  00000000  0000300f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  00004338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000711  00000000  00000000  00004748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004dc  00000000  00000000  00004e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  00005335  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_3>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_4>
  14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  8a:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:
*****************************************/
void port_init()
{	

// PORT A connections
	DDRA  = 0b11111111;		//  PA7:U8/PGA2310,CS; PA6:U7/PGA2310,CS; PA5:CON2LCD,RS; PA4:CON2LCD,RW; PA3:CON2LCD,E; PA2:U2/74HC595,RCLK(LCD); PA1:U2/74HC595,SCLK(LCD); PA0:U2/74HC595,DATA(LCD);
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//	Interfaces: NOT USED. PULLUP DISABLE in PORTA.
  96:	1b ba       	out	0x1b, r1	; 27

// PORT B connections
	DDRB  = 0b10111000;		//  PB7:U6,U7,U8/PGA2310,SCLK; PB6:U6,U7,U8/PGA2310,SDO(CON33,36,39); PB5:U6,U7,U8/PGA2310,SDI; PB4:U12/74HC595,DATA(REL_OUT); PB3:U6/PGA2310,CS; PB2:CON8/BUTTON,"ESCAPE",INT2; PB1:CON5/BUTTON,"ON/OFF"; PB0:CON14TempSensor/DS18S20,DQ,IN/OUT;
  98:	88 eb       	ldi	r24, 0xB8	; 184
  9a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000111;		//	Interfaces: EXTERNAL INTERRUPT 2; SPI. set pullup to IRTSOP2240 / BUTTON(on/off) / DS18s20.
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	88 bb       	out	0x18, r24	; 24

// PORT C connections
	DDRC  = 0b11001100;		//  PC7:U10/74HC595,DATA(REL_IN); PC6:U10/74HC595,SCLK(REL_IN); PC5:EncoderED1112S,A; PC4:EncoderED1112S,B; PC3:U10/74HC595,RCLK(REL_IN); PC2:Q2/BD237(RELAY_POWER_SUPPLY); PC1:DS1307/24C64,I2C/SDA; PC0:DS1307/24C64,I2C/SCL;
  a0:	8c ec       	ldi	r24, 0xCC	; 204
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;		//	Interfaces: I2C. PULLUP DISABLE in PORTC.
  a4:	15 ba       	out	0x15, r1	; 21

// PORT D connections
	DDRD  = 0b11110000;		//  PD7:U12/74HC595,RCLK(REL_OUT); PD6:U12/74HC595,SCLK(REL_OUT); PD5:Q1/BD237(FAN_CONTROL_PWM); PD4:LED5/"ON/OFF AUDIO SYSTEM"; PD3:CON11/EncoderBUTTON,"MENU/ENTER"/INT1; PD2:CON12/IR/TSOP2240,/INT0; PD1:CON14/MAX232,UART/TXD; PD0:CON14/MAX232,UART/RXD;
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;		//	Interfaces: TIMER1; UART/USART; EXTERNAL INTERRUPT 0, 1. PULLUP DISABLE in PORTD.
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	82 bb       	out	0x12, r24	; 18
//	DDRD&=~_BV(0);// DDD0 = "0"  (DDD0=DDRD nulev bit) set PORTD pin0 to zero as input
//	PORTD|=_BV(0);// PD0  = "1"  Enable pull up
//	PORTD|=_BV(1);// PD1  = "1"  led
//	DDRD|=_BV(1); // DDD1 = "1"  (DDD1=DDRD parvi bit) set PORTD pin1 to one as output

}
  ae:	08 95       	ret

000000b0 <timer2_init>:
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init()
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  b4:	81 e8       	ldi	r24, 0x81	; 129
  b6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
  b8:	13 bc       	out	0x23, r1	; 35
}
  ba:	08 95       	ret

000000bc <timer2_on>:
/*************************************
******** DEFINITIONS OF TIMER ********
*************************************/
void timer2_on()	// Timer2 On
{
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  bc:	81 e8       	ldi	r24, 0x81	; 129
  be:	85 bd       	out	0x25, r24	; 37
	OCR2 = 1; // FAN PWM ON
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	83 bd       	out	0x23, r24	; 35
}
  c4:	08 95       	ret

000000c6 <timer2_off>:

void timer2_off()	// Timer2 Off
{
	TCCR2 = 0b00000000;		// DISABLED OCOC1A - PWM, OC1B - Disabled, normal port.
  c6:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0; // FAN PWM OFF
  c8:	13 bc       	out	0x23, r1	; 35
}
  ca:	08 95       	ret

000000cc <__vector_1>:

/*****************************************
**** EXTERNAL INTERRUPT 0 VECTOR 01 ******
*****************************************/
ISR(INT0_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
}
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_2>:

/*****************************************
**** EXTERNAL INTERRUPT 1 VECTOR 02 ******
*****************************************/
ISR(INT1_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
}
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_3>:

/*****************************************
**** EXTERNAL INTERRUPT 2 VECTOR 03 ******
*****************************************/
ISR(INT2_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
}
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_4>:

/*****************************************
**** TIMER 2 OUTPUT COMPARE VECTOR 04 ****
*****************************************/
ISR(TIMER2_COMP_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
}
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_5>:

/*****************************************
**** TIMER 2 OVERFLOW VECTOR 05 **********
*****************************************/
ISR(TIMER2_OVF_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
}
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <buttons_press>:
	LCD_INIT();
	LCD_EXECUTE_COMMAND(LCD_CLEAR);
}

void buttons_press()
{
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 136:	c0 e9       	ldi	r28, 0x90	; 144
 138:	d1 e0       	ldi	r29, 0x01	; 1
	while(1)
	{
		if(BUTTON_ON_OFF_low())	// obj ptr flagStatusBtnRegister from struct flagStatusBtnOnOff
 13a:	b1 99       	sbic	0x16, 1	; 22
 13c:	fe cf       	rjmp	.-4      	; 0x13a <buttons_press+0xa>
		{
			if(flagStatusBits->flagPower == 0)
 13e:	e0 91 a5 00 	lds	r30, 0x00A5
 142:	f0 91 a6 00 	lds	r31, 0x00A6
 146:	80 81       	ld	r24, Z
 148:	80 fd       	sbrc	r24, 0
 14a:	17 c0       	rjmp	.+46     	; 0x17a <buttons_press+0x4a>
			{
				LED_high_DISPLAYLED_low();				// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
 14c:	94 9a       	sbi	0x12, 4	; 18
				LCD_CLEAR_CONTAINS();					// CLEAR DISPLAY ALL CHARACTERS
 14e:	0e 94 34 02 	call	0x468	; 0x468 <LCD_CLEAR_CONTAINS>
				LCD_EXECUTE_COMMAND(LCD_SELECT_1ROW);	// 0b0100000 SET CGRAM BASE ADDRESS
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>

				LCD_CGRAM_CUSTOM_SYMBOLS();					// Generate and Store new missing characters into LCD CGRAM
 158:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LCD_CGRAM_CUSTOM_SYMBOLS>

//				unsigned char *str_new = malloc(9);		// ALLOCATE MEMORY
//				strcpy(str_new, "123PES9");				// str = "123PESH9";

//				lcdDataString("FIRST ROW");
				flagStatusBits->flagPower = 1;
 15c:	e0 91 a5 00 	lds	r30, 0x00A5
 160:	f0 91 a6 00 	lds	r31, 0x00A6
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24
 16a:	80 ed       	ldi	r24, 0xD0	; 208
 16c:	97 e0       	ldi	r25, 0x07	; 7
 16e:	fe 01       	movw	r30, r28
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <buttons_press+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 176:	d9 f7       	brne	.-10     	; 0x16e <buttons_press+0x3e>
 178:	e0 cf       	rjmp	.-64     	; 0x13a <buttons_press+0xa>

				_delay_ms(200);
			}
			else
			{
				LED_low_DISPLAYLED_high();				// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
 17a:	94 98       	cbi	0x12, 4	; 18
				LCD_CLEAR_CONTAINS();					// CLEAR DISPLAY ALL CHARACTERS
 17c:	0e 94 34 02 	call	0x468	; 0x468 <LCD_CLEAR_CONTAINS>
				LCD_EXECUTE_COMMAND(LCD_SELECT_1ROW);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>
 186:	10 e0       	ldi	r17, 0x00	; 0
//				lcdDataString("SECOND ROW");
				for(int i=0; i<16; i++)
				{
					LCD_EXECUTE_DATA_ONE(i);		// bytes send
 188:	81 2f       	mov	r24, r17
 18a:	0e 94 81 02 	call	0x502	; 0x502 <LCD_EXECUTE_DATA_ONE>
 18e:	1f 5f       	subi	r17, 0xFF	; 255
			{
				LED_low_DISPLAYLED_high();				// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
				LCD_CLEAR_CONTAINS();					// CLEAR DISPLAY ALL CHARACTERS
				LCD_EXECUTE_COMMAND(LCD_SELECT_1ROW);
//				lcdDataString("SECOND ROW");
				for(int i=0; i<16; i++)
 190:	10 31       	cpi	r17, 0x10	; 16
 192:	d1 f7       	brne	.-12     	; 0x188 <buttons_press+0x58>
				{
					LCD_EXECUTE_DATA_ONE(i);		// bytes send
				}
				flagStatusBits->flagPower = 0;
 194:	e0 91 a5 00 	lds	r30, 0x00A5
 198:	f0 91 a6 00 	lds	r31, 0x00A6
 19c:	80 81       	ld	r24, Z
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	80 83       	st	Z, r24
 1a2:	80 ed       	ldi	r24, 0xD0	; 208
 1a4:	97 e0       	ldi	r25, 0x07	; 7
 1a6:	fe 01       	movw	r30, r28
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <buttons_press+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <buttons_press+0x76>
 1b0:	c4 cf       	rjmp	.-120    	; 0x13a <buttons_press+0xa>

000001b2 <init_all>:
*********************************** START OF APPLICATION ************************************
********************************************************************************************/

void init_all()
{
	port_init();
 1b2:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init()
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
 1ba:	81 e8       	ldi	r24, 0x81	; 129
 1bc:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
 1be:	13 bc       	out	0x23, r1	; 35

void init_all()
{
	port_init();
	timer2_init();
	LCD_INIT();
 1c0:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_INIT>
	LCD_EXECUTE_COMMAND(LCD_CLEAR);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>
}
 1ca:	08 95       	ret

000001cc <main>:
********************************************************************************************/

int main(void)
{

	init_all();				// inicializacia na vsichko
 1cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <init_all>

	sei();							// file "avr/interrupt.h"
 1d0:	78 94       	sei
	while(1)
	{
//		struct flagStatusBtnOnOff flagStatusBtnRegister;	// obj flagStatusBtnRegister from struct flagStatusBtnOnOff
//		flagStatusBtnRegister.bit0 = 0;
		
		buttons_press();	// izchakvane za natiskane na buton
 1d2:	0e 94 98 00 	call	0x130	; 0x130 <buttons_press>
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <main+0x6>

000001d8 <eeprom_24c64_read>:
	// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
	// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !
	
	byte eepromReceiveByte0, eepromReceiveByte1, eepromReceiveByte2, eepromReceiveByte3, eepromReceiveByte4, eepromReceiveByte5;
// EEPROM READ
	i2c_start();
 1d8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);		// EEPROM 24C64 ADDRESS ACCESS WRITE
 1dc:	80 ea       	ldi	r24, 0xA0	; 160
 1de:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>

	i2c_start();
 1ee:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_READ);		// EEPROM 24C64 ADDRESS ACCESS READ
 1f2:	81 ea       	ldi	r24, 0xA1	; 161
 1f4:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	eepromReceiveByte0	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 0a 02 	call	0x414	; 0x414 <i2c_read>
	eepromReceiveByte1	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 0a 02 	call	0x414	; 0x414 <i2c_read>
	eepromReceiveByte2	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 0a 02 	call	0x414	; 0x414 <i2c_read>
	eepromReceiveByte3	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 0a 02 	call	0x414	; 0x414 <i2c_read>
	eepromReceiveByte4	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 0a 02 	call	0x414	; 0x414 <i2c_read>
	eepromReceiveByte5	= i2c_read(1);				// EEPROM DATA READ BYTE	// i2c_read(1) parametar razlichen ot 0 spira komunikaciqta NACK
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 0a 02 	call	0x414	; 0x414 <i2c_read>
	i2c_stop();
 21c:	0e 94 00 02 	call	0x400	; 0x400 <i2c_stop>
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte2);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte3);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte4);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte5);
*/
}
 220:	08 95       	ret

00000222 <eeprom_24c64_write>:
// Za da se vijda tova koeto se e zapisalo v pametta, a ne ot tozi bibliotechen fail !!!!!!!!!
// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !

// EEPROM WRITE
	i2c_start();
 222:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
 226:	80 ea       	ldi	r24, 0xA0	; 160
 228:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
// Write data
	i2c_write(0x30);	// Data is stored: 0x30 - '0'
 238:	80 e3       	ldi	r24, 0x30	; 48
 23a:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	i2c_write(0x31);	// Data is stored: 0x31 - '1'
 23e:	81 e3       	ldi	r24, 0x31	; 49
 240:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	i2c_write(0x32);	// Data is stored: 0x32 - '2'
 244:	82 e3       	ldi	r24, 0x32	; 50
 246:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	i2c_write(0x33);	// Data is stored: 0x33 - '3'
 24a:	83 e3       	ldi	r24, 0x33	; 51
 24c:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	i2c_write(0x34);	// Data is stored: 0x34 - '4'
 250:	84 e3       	ldi	r24, 0x34	; 52
 252:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	i2c_stop();
 256:	0e 94 00 02 	call	0x400	; 0x400 <i2c_stop>
}
 25a:	08 95       	ret

0000025c <eeprom_24c64_reset>:

/*************************************
** RESET AND ZERO FILL EEPROM 24C64 **
*************************************/
void eeprom_24c64_reset()
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
	unsigned int i;	// 16 bits
// EEPROM WRITE
	i2c_start();
 260:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
 264:	80 ea       	ldi	r24, 0xA0	; 160
 266:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
 276:	c0 e0       	ldi	r28, 0x00	; 0
 278:	d0 e0       	ldi	r29, 0x00	; 0
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 03 02 	call	0x406	; 0x406 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
 280:	21 96       	adiw	r28, 0x01	; 1
 282:	8f e1       	ldi	r24, 0x1F	; 31
 284:	cf 3f       	cpi	r28, 0xFF	; 255
 286:	d8 07       	cpc	r29, r24
 288:	c1 f7       	brne	.-16     	; 0x27a <eeprom_24c64_reset+0x1e>
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
	}
	i2c_stop();
 28a:	0e 94 00 02 	call	0x400	; 0x400 <i2c_stop>
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <reset>:
 294:	b8 9a       	sbi	0x17, 0	; 23
 296:	c0 98       	cbi	0x18, 0	; 24
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	97 e0       	ldi	r25, 0x07	; 7
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <reset+0x8>
 2a0:	b8 98       	cbi	0x17, 0	; 23
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <reset+0x12>
 2aa:	b0 9b       	sbis	0x16, 0	; 22
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <reset+0x1e>
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret
 2b2:	88 e0       	ldi	r24, 0x08	; 8
 2b4:	97 e0       	ldi	r25, 0x07	; 7
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <reset+0x22>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	08 95       	ret

000002be <read_bit>:
 2be:	b8 9a       	sbi	0x17, 0	; 23
 2c0:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <read_bit+0x6>
 2c8:	b8 98       	cbi	0x17, 0	; 23
 2ca:	80 e4       	ldi	r24, 0x40	; 64
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <read_bit+0xe>
 2d0:	86 b3       	in	r24, 0x16	; 22
 2d2:	81 70       	andi	r24, 0x01	; 1
 2d4:	08 95       	ret

000002d6 <write_bit>:
 2d6:	b8 9a       	sbi	0x17, 0	; 23
 2d8:	c0 98       	cbi	0x18, 0	; 24
 2da:	81 11       	cpse	r24, r1
 2dc:	c0 9a       	sbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2de:	88 eb       	ldi	r24, 0xB8	; 184
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <write_bit+0xc>
 2e6:	b8 98       	cbi	0x17, 0	; 23
 2e8:	c0 98       	cbi	0x18, 0	; 24
 2ea:	08 95       	ret

000002ec <read_byte>:
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	10 e0       	ldi	r17, 0x00	; 0
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	c9 2e       	mov	r12, r25
 304:	d1 2c       	mov	r13, r1
 306:	80 ee       	ldi	r24, 0xE0	; 224
 308:	e8 2e       	mov	r14, r24
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	f8 2e       	mov	r15, r24
 30e:	0e 94 5f 01 	call	0x2be	; 0x2be <read_bit>
 312:	88 23       	and	r24, r24
 314:	41 f0       	breq	.+16     	; 0x326 <read_byte+0x3a>
 316:	c6 01       	movw	r24, r12
 318:	0c 2e       	mov	r0, r28
 31a:	02 c0       	rjmp	.+4      	; 0x320 <read_byte+0x34>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	0a 94       	dec	r0
 322:	e2 f7       	brpl	.-8      	; 0x31c <read_byte+0x30>
 324:	18 2b       	or	r17, r24
 326:	c7 01       	movw	r24, r14
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <read_byte+0x3c>
 32c:	21 96       	adiw	r28, 0x01	; 1
 32e:	c8 30       	cpi	r28, 0x08	; 8
 330:	d1 05       	cpc	r29, r1
 332:	69 f7       	brne	.-38     	; 0x30e <read_byte+0x22>
 334:	81 2f       	mov	r24, r17
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	08 95       	ret

00000346 <write_byte>:
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	d0 e0       	ldi	r29, 0x00	; 0
 352:	08 2f       	mov	r16, r24
 354:	10 e0       	ldi	r17, 0x00	; 0
 356:	c8 01       	movw	r24, r16
 358:	0c 2e       	mov	r0, r28
 35a:	02 c0       	rjmp	.+4      	; 0x360 <write_byte+0x1a>
 35c:	95 95       	asr	r25
 35e:	87 95       	ror	r24
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <write_byte+0x16>
 364:	80 ff       	sbrs	r24, 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <write_byte+0x26>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	01 c0       	rjmp	.+2      	; 0x36e <write_byte+0x28>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <write_bit>
 372:	21 96       	adiw	r28, 0x01	; 1
 374:	c8 30       	cpi	r28, 0x08	; 8
 376:	d1 05       	cpc	r29, r1
 378:	71 f7       	brne	.-36     	; 0x356 <write_byte+0x10>
 37a:	80 ee       	ldi	r24, 0xE0	; 224
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <write_byte+0x38>
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <wait_ready>:
 38c:	0e 94 5f 01 	call	0x2be	; 0x2be <read_bit>
 390:	88 23       	and	r24, r24
 392:	e1 f3       	breq	.-8      	; 0x38c <wait_ready>
 394:	08 95       	ret

00000396 <read_scratchpad>:
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	0e 94 4a 01 	call	0x294	; 0x294 <reset>
 39e:	88 23       	and	r24, r24
 3a0:	e9 f0       	breq	.+58     	; 0x3dc <read_scratchpad+0x46>
 3a2:	8c ec       	ldi	r24, 0xCC	; 204
 3a4:	0e 94 a3 01 	call	0x346	; 0x346 <write_byte>
 3a8:	84 e4       	ldi	r24, 0x44	; 68
 3aa:	0e 94 a3 01 	call	0x346	; 0x346 <write_byte>
 3ae:	0e 94 c6 01 	call	0x38c	; 0x38c <wait_ready>
 3b2:	0e 94 4a 01 	call	0x294	; 0x294 <reset>
 3b6:	88 23       	and	r24, r24
 3b8:	89 f0       	breq	.+34     	; 0x3dc <read_scratchpad+0x46>
 3ba:	8c ec       	ldi	r24, 0xCC	; 204
 3bc:	0e 94 a3 01 	call	0x346	; 0x346 <write_byte>
 3c0:	8e eb       	ldi	r24, 0xBE	; 190
 3c2:	0e 94 a3 01 	call	0x346	; 0x346 <write_byte>
 3c6:	ca e9       	ldi	r28, 0x9A	; 154
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
 3ca:	0e 94 76 01 	call	0x2ec	; 0x2ec <read_byte>
 3ce:	89 93       	st	Y+, r24
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	c3 3a       	cpi	r28, 0xA3	; 163
 3d4:	d8 07       	cpc	r29, r24
 3d6:	c9 f7       	brne	.-14     	; 0x3ca <read_scratchpad+0x34>
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	01 c0       	rjmp	.+2      	; 0x3de <read_scratchpad+0x48>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <i2c_init>:
 3e4:	82 e1       	ldi	r24, 0x12	; 18
 3e6:	80 b9       	out	0x00, r24	; 0
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	81 b9       	out	0x01, r24	; 1
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	86 bf       	out	0x36, r24	; 54
 3f0:	13 b8       	out	0x03, r1	; 3
 3f2:	08 95       	ret

000003f4 <i2c_start>:
 3f4:	84 ea       	ldi	r24, 0xA4	; 164
 3f6:	86 bf       	out	0x36, r24	; 54
 3f8:	06 b6       	in	r0, 0x36	; 54
 3fa:	07 fe       	sbrs	r0, 7
 3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <i2c_start+0x4>
 3fe:	08 95       	ret

00000400 <i2c_stop>:
 400:	84 e9       	ldi	r24, 0x94	; 148
 402:	86 bf       	out	0x36, r24	; 54
 404:	08 95       	ret

00000406 <i2c_write>:
 406:	83 b9       	out	0x03, r24	; 3
 408:	84 e8       	ldi	r24, 0x84	; 132
 40a:	86 bf       	out	0x36, r24	; 54
 40c:	06 b6       	in	r0, 0x36	; 54
 40e:	07 fe       	sbrs	r0, 7
 410:	fd cf       	rjmp	.-6      	; 0x40c <i2c_write+0x6>
 412:	08 95       	ret

00000414 <i2c_read>:
 414:	88 23       	and	r24, r24
 416:	11 f4       	brne	.+4      	; 0x41c <i2c_read+0x8>
 418:	84 ec       	ldi	r24, 0xC4	; 196
 41a:	01 c0       	rjmp	.+2      	; 0x41e <i2c_read+0xa>
 41c:	84 e8       	ldi	r24, 0x84	; 132
 41e:	86 bf       	out	0x36, r24	; 54
 420:	06 b6       	in	r0, 0x36	; 54
 422:	07 fe       	sbrs	r0, 7
 424:	fd cf       	rjmp	.-6      	; 0x420 <i2c_read+0xc>
 426:	83 b1       	in	r24, 0x03	; 3
 428:	08 95       	ret

0000042a <LCD_EXECUTE_COMMAND>:
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	d9 98       	cbi	0x1b, 1	; 27
 42e:	87 ff       	sbrs	r24, 7
 430:	02 c0       	rjmp	.+4      	; 0x436 <LCD_EXECUTE_COMMAND+0xc>
 432:	d8 9a       	sbi	0x1b, 0	; 27
 434:	01 c0       	rjmp	.+2      	; 0x438 <LCD_EXECUTE_COMMAND+0xe>
 436:	d8 98       	cbi	0x1b, 0	; 27
 438:	d9 9a       	sbi	0x1b, 1	; 27
 43a:	9f 5f       	subi	r25, 0xFF	; 255
 43c:	98 30       	cpi	r25, 0x08	; 8
 43e:	11 f0       	breq	.+4      	; 0x444 <LCD_EXECUTE_COMMAND+0x1a>
 440:	88 0f       	add	r24, r24
 442:	f4 cf       	rjmp	.-24     	; 0x42c <LCD_EXECUTE_COMMAND+0x2>
 444:	dd 98       	cbi	0x1b, 5	; 27
 446:	dc 98       	cbi	0x1b, 4	; 27
 448:	db 9a       	sbi	0x1b, 3	; 27
 44a:	da 98       	cbi	0x1b, 2	; 27
 44c:	88 ea       	ldi	r24, 0xA8	; 168
 44e:	92 e0       	ldi	r25, 0x02	; 2
 450:	fc 01       	movw	r30, r24
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <LCD_EXECUTE_COMMAND+0x28>
 456:	da 9a       	sbi	0x1b, 2	; 27
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <LCD_EXECUTE_COMMAND+0x2e>
 45c:	db 98       	cbi	0x1b, 3	; 27
 45e:	80 e9       	ldi	r24, 0x90	; 144
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <LCD_EXECUTE_COMMAND+0x38>
 466:	08 95       	ret

00000468 <LCD_CLEAR_CONTAINS>:
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>
 46e:	80 ec       	ldi	r24, 0xC0	; 192
 470:	92 e1       	ldi	r25, 0x12	; 18
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <LCD_CLEAR_CONTAINS+0xa>
 476:	08 95       	ret

00000478 <LCD_INIT>:
 478:	88 e3       	ldi	r24, 0x38	; 56
 47a:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>
 47e:	8f e0       	ldi	r24, 0x0F	; 15
 480:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>
 496:	80 ec       	ldi	r24, 0xC0	; 192
 498:	92 e1       	ldi	r25, 0x12	; 18
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <LCD_INIT+0x22>
 49e:	08 95       	ret

000004a0 <LCD_EXECUTE_DATA>:
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	a8 ea       	ldi	r26, 0xA8	; 168
 4aa:	b2 e0       	ldi	r27, 0x02	; 2
 4ac:	c0 e9       	ldi	r28, 0x90	; 144
 4ae:	d1 e0       	ldi	r29, 0x01	; 1
 4b0:	22 c0       	rjmp	.+68     	; 0x4f6 <LCD_EXECUTE_DATA+0x56>
 4b2:	fc 01       	movw	r30, r24
 4b4:	e4 0f       	add	r30, r20
 4b6:	f5 1f       	adc	r31, r21
 4b8:	e0 81       	ld	r30, Z
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	d9 98       	cbi	0x1b, 1	; 27
 4be:	e7 ff       	sbrs	r30, 7
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <LCD_EXECUTE_DATA+0x26>
 4c2:	d8 9a       	sbi	0x1b, 0	; 27
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <LCD_EXECUTE_DATA+0x28>
 4c6:	d8 98       	cbi	0x1b, 0	; 27
 4c8:	d9 9a       	sbi	0x1b, 1	; 27
 4ca:	2f 5f       	subi	r18, 0xFF	; 255
 4cc:	28 30       	cpi	r18, 0x08	; 8
 4ce:	11 f0       	breq	.+4      	; 0x4d4 <LCD_EXECUTE_DATA+0x34>
 4d0:	ee 0f       	add	r30, r30
 4d2:	f4 cf       	rjmp	.-24     	; 0x4bc <LCD_EXECUTE_DATA+0x1c>
 4d4:	dd 9a       	sbi	0x1b, 5	; 27
 4d6:	dc 98       	cbi	0x1b, 4	; 27
 4d8:	db 9a       	sbi	0x1b, 3	; 27
 4da:	da 98       	cbi	0x1b, 2	; 27
 4dc:	fd 01       	movw	r30, r26
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <LCD_EXECUTE_DATA+0x3e>
 4e2:	da 9a       	sbi	0x1b, 2	; 27
 4e4:	fd 01       	movw	r30, r26
 4e6:	31 97       	sbiw	r30, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_EXECUTE_DATA+0x46>
 4ea:	db 98       	cbi	0x1b, 3	; 27
 4ec:	fe 01       	movw	r30, r28
 4ee:	31 97       	sbiw	r30, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCD_EXECUTE_DATA+0x4e>
 4f2:	4f 5f       	subi	r20, 0xFF	; 255
 4f4:	5f 4f       	sbci	r21, 0xFF	; 255
 4f6:	46 17       	cp	r20, r22
 4f8:	57 07       	cpc	r21, r23
 4fa:	dc f2       	brlt	.-74     	; 0x4b2 <LCD_EXECUTE_DATA+0x12>
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <LCD_EXECUTE_DATA_ONE>:
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	d9 98       	cbi	0x1b, 1	; 27
 506:	87 ff       	sbrs	r24, 7
 508:	02 c0       	rjmp	.+4      	; 0x50e <LCD_EXECUTE_DATA_ONE+0xc>
 50a:	d8 9a       	sbi	0x1b, 0	; 27
 50c:	01 c0       	rjmp	.+2      	; 0x510 <LCD_EXECUTE_DATA_ONE+0xe>
 50e:	d8 98       	cbi	0x1b, 0	; 27
 510:	d9 9a       	sbi	0x1b, 1	; 27
 512:	9f 5f       	subi	r25, 0xFF	; 255
 514:	98 30       	cpi	r25, 0x08	; 8
 516:	11 f0       	breq	.+4      	; 0x51c <LCD_EXECUTE_DATA_ONE+0x1a>
 518:	88 0f       	add	r24, r24
 51a:	f4 cf       	rjmp	.-24     	; 0x504 <LCD_EXECUTE_DATA_ONE+0x2>
 51c:	dd 9a       	sbi	0x1b, 5	; 27
 51e:	dc 98       	cbi	0x1b, 4	; 27
 520:	db 9a       	sbi	0x1b, 3	; 27
 522:	da 98       	cbi	0x1b, 2	; 27
 524:	88 ea       	ldi	r24, 0xA8	; 168
 526:	92 e0       	ldi	r25, 0x02	; 2
 528:	fc 01       	movw	r30, r24
 52a:	31 97       	sbiw	r30, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_EXECUTE_DATA_ONE+0x28>
 52e:	da 9a       	sbi	0x1b, 2	; 27
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <LCD_EXECUTE_DATA_ONE+0x2e>
 534:	db 98       	cbi	0x1b, 3	; 27
 536:	80 e9       	ldi	r24, 0x90	; 144
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <LCD_EXECUTE_DATA_ONE+0x38>
 53e:	08 95       	ret

00000540 <LCD_EXECUTE_DATA_LAST>:
 540:	db 98       	cbi	0x1b, 3	; 27
 542:	dc 98       	cbi	0x1b, 4	; 27
 544:	dd 9a       	sbi	0x1b, 5	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 546:	85 ed       	ldi	r24, 0xD5	; 213
 548:	98 2f       	mov	r25, r24
 54a:	9a 95       	dec	r25
 54c:	f1 f7       	brne	.-4      	; 0x54a <LCD_EXECUTE_DATA_LAST+0xa>
 54e:	db 9a       	sbi	0x1b, 3	; 27
 550:	dc 98       	cbi	0x1b, 4	; 27
 552:	dd 9a       	sbi	0x1b, 5	; 27
 554:	8a 95       	dec	r24
 556:	f1 f7       	brne	.-4      	; 0x554 <LCD_EXECUTE_DATA_LAST+0x14>
 558:	08 95       	ret

0000055a <lcdDataString>:
 55a:	fc 01       	movw	r30, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 55c:	28 ea       	ldi	r18, 0xA8	; 168
 55e:	32 e0       	ldi	r19, 0x02	; 2
 560:	40 e9       	ldi	r20, 0x90	; 144
 562:	51 e0       	ldi	r21, 0x01	; 1
 564:	1d c0       	rjmp	.+58     	; 0x5a0 <lcdDataString+0x46>
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	d9 98       	cbi	0x1b, 1	; 27
 56a:	87 ff       	sbrs	r24, 7
 56c:	02 c0       	rjmp	.+4      	; 0x572 <lcdDataString+0x18>
 56e:	d8 9a       	sbi	0x1b, 0	; 27
 570:	01 c0       	rjmp	.+2      	; 0x574 <lcdDataString+0x1a>
 572:	d8 98       	cbi	0x1b, 0	; 27
 574:	d9 9a       	sbi	0x1b, 1	; 27
 576:	9f 5f       	subi	r25, 0xFF	; 255
 578:	98 30       	cpi	r25, 0x08	; 8
 57a:	11 f0       	breq	.+4      	; 0x580 <lcdDataString+0x26>
 57c:	88 0f       	add	r24, r24
 57e:	f4 cf       	rjmp	.-24     	; 0x568 <lcdDataString+0xe>
 580:	31 96       	adiw	r30, 0x01	; 1
 582:	dd 9a       	sbi	0x1b, 5	; 27
 584:	dc 98       	cbi	0x1b, 4	; 27
 586:	db 9a       	sbi	0x1b, 3	; 27
 588:	da 98       	cbi	0x1b, 2	; 27
 58a:	c9 01       	movw	r24, r18
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <lcdDataString+0x32>
 590:	da 9a       	sbi	0x1b, 2	; 27
 592:	c9 01       	movw	r24, r18
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <lcdDataString+0x3a>
 598:	db 98       	cbi	0x1b, 3	; 27
 59a:	ca 01       	movw	r24, r20
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <lcdDataString+0x42>
 5a0:	80 81       	ld	r24, Z
 5a2:	88 23       	and	r24, r24
 5a4:	01 f7       	brne	.-64     	; 0x566 <lcdDataString+0xc>
 5a6:	08 95       	ret

000005a8 <LCD_CGRAM_CUSTOM_SYMBOLS>:
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	10 92 aa 00 	sts	0x00AA, r1
 5b0:	10 92 a9 00 	sts	0x00A9, r1
 5b4:	25 c0       	rjmp	.+74     	; 0x600 <LCD_CGRAM_CUSTOM_SYMBOLS+0x58>
 5b6:	08 96       	adiw	r24, 0x08	; 8
 5b8:	88 0f       	add	r24, r24
 5ba:	88 0f       	add	r24, r24
 5bc:	88 0f       	add	r24, r24
 5be:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_EXECUTE_COMMAND>
 5c2:	c0 e0       	ldi	r28, 0x00	; 0
 5c4:	d0 e0       	ldi	r29, 0x00	; 0
 5c6:	e0 91 a9 00 	lds	r30, 0x00A9
 5ca:	f0 91 aa 00 	lds	r31, 0x00AA
 5ce:	83 e0       	ldi	r24, 0x03	; 3
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31
 5d4:	8a 95       	dec	r24
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <LCD_CGRAM_CUSTOM_SYMBOLS+0x28>
 5d8:	ec 0f       	add	r30, r28
 5da:	fd 1f       	adc	r31, r29
 5dc:	e0 5a       	subi	r30, 0xA0	; 160
 5de:	ff 4f       	sbci	r31, 0xFF	; 255
 5e0:	80 81       	ld	r24, Z
 5e2:	0e 94 81 02 	call	0x502	; 0x502 <LCD_EXECUTE_DATA_ONE>
 5e6:	21 96       	adiw	r28, 0x01	; 1
 5e8:	c8 30       	cpi	r28, 0x08	; 8
 5ea:	d1 05       	cpc	r29, r1
 5ec:	61 f7       	brne	.-40     	; 0x5c6 <LCD_CGRAM_CUSTOM_SYMBOLS+0x1e>
 5ee:	80 91 a9 00 	lds	r24, 0x00A9
 5f2:	90 91 aa 00 	lds	r25, 0x00AA
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	90 93 aa 00 	sts	0x00AA, r25
 5fc:	80 93 a9 00 	sts	0x00A9, r24
 600:	80 91 a9 00 	lds	r24, 0x00A9
 604:	90 91 aa 00 	lds	r25, 0x00AA
 608:	87 30       	cpi	r24, 0x07	; 7
 60a:	91 05       	cpc	r25, r1
 60c:	a4 f2       	brlt	.-88     	; 0x5b6 <LCD_CGRAM_CUSTOM_SYMBOLS+0xe>
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <lcdDataInt>:
 614:	df 93       	push	r29
 616:	cf 93       	push	r28
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	2a 97       	sbiw	r28, 0x0a	; 10
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	de bf       	out	0x3e, r29	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	cd bf       	out	0x3d, r28	; 61
 628:	be 01       	movw	r22, r28
 62a:	6f 5f       	subi	r22, 0xFF	; 255
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	4a e0       	ldi	r20, 0x0A	; 10
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	0e 94 41 04 	call	0x882	; 0x882 <itoa>
 636:	0e 94 ad 02 	call	0x55a	; 0x55a <lcdDataString>
 63a:	2a 96       	adiw	r28, 0x0a	; 10
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
 646:	cf 91       	pop	r28
 648:	df 91       	pop	r29
 64a:	08 95       	ret

0000064c <PGA2310_Volume_Update>:

/*************************************
** DEFINITION PGA2310 VOLUME UPDATE **
*************************************/
void PGA2310_Volume_Update(unsigned char pgaVolumeLeft, unsigned char pgaVolumeRight)
{
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
 650:	18 2f       	mov	r17, r24
 652:	06 2f       	mov	r16, r22
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 654:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 656:	0e 94 26 04 	call	0x84c	; 0x84c <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 65a:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 65c:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 65e:	81 2f       	mov	r24, r17
 660:	60 2f       	mov	r22, r16
 662:	0e 94 26 04 	call	0x84c	; 0x84c <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 666:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA7 - /SS ENABLE
 668:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 66a:	81 2f       	mov	r24, r17
 66c:	60 2f       	mov	r22, r16
 66e:	0e 94 26 04 	call	0x84c	; 0x84c <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 672:	df 9a       	sbi	0x1b, 7	; 27
}
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	08 95       	ret

0000067a <pga2310_init>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_init()
{
	spi_init();
 67a:	0e 94 15 04 	call	0x82a	; 0x82a <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 67e:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	0e 94 26 04 	call	0x84c	; 0x84c <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 688:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 68a:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	0e 94 26 04 	call	0x84c	; 0x84c <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 694:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 696:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	0e 94 26 04 	call	0x84c	; 0x84c <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 6a0:	df 9a       	sbi	0x1b, 7	; 27
}
 6a2:	08 95       	ret

000006a4 <pga2310_reset>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_reset()
{
	spi_init();
 6a4:	0e 94 15 04 	call	0x82a	; 0x82a <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 6a8:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	0e 94 26 04 	call	0x84c	; 0x84c <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 6b2:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 6b4:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	0e 94 26 04 	call	0x84c	; 0x84c <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 6be:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 6c0:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	0e 94 26 04 	call	0x84c	; 0x84c <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 6ca:	df 9a       	sbi	0x1b, 7	; 27
}
 6cc:	08 95       	ret

000006ce <uart_init>:
 6ce:	87 e6       	ldi	r24, 0x67	; 103
 6d0:	89 b9       	out	0x09, r24	; 9
 6d2:	10 bc       	out	0x20, r1	; 32
 6d4:	86 e8       	ldi	r24, 0x86	; 134
 6d6:	80 bd       	out	0x20, r24	; 32
 6d8:	88 e9       	ldi	r24, 0x98	; 152
 6da:	8a b9       	out	0x0a, r24	; 10
 6dc:	1c b8       	out	0x0c, r1	; 12
 6de:	08 95       	ret

000006e0 <uart_transmit>:
 6e0:	ac 01       	movw	r20, r24
 6e2:	20 e0       	ldi	r18, 0x00	; 0
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	09 c0       	rjmp	.+18     	; 0x6fa <uart_transmit+0x1a>
 6e8:	5d 9b       	sbis	0x0b, 5	; 11
 6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <uart_transmit+0x8>
 6ec:	fa 01       	movw	r30, r20
 6ee:	e2 0f       	add	r30, r18
 6f0:	f3 1f       	adc	r31, r19
 6f2:	80 81       	ld	r24, Z
 6f4:	8c b9       	out	0x0c, r24	; 12
 6f6:	2f 5f       	subi	r18, 0xFF	; 255
 6f8:	3f 4f       	sbci	r19, 0xFF	; 255
 6fa:	26 17       	cp	r18, r22
 6fc:	37 07       	cpc	r19, r23
 6fe:	a4 f3       	brlt	.-24     	; 0x6e8 <uart_transmit+0x8>
 700:	08 95       	ret

00000702 <uart_transmit_one>:
 702:	5d 9b       	sbis	0x0b, 5	; 11
 704:	fe cf       	rjmp	.-4      	; 0x702 <uart_transmit_one>
 706:	8c b9       	out	0x0c, r24	; 12
 708:	08 95       	ret

0000070a <uart_transmit_DEC_to_BCD>:
 70a:	98 2f       	mov	r25, r24
 70c:	5d 9b       	sbis	0x0b, 5	; 11
 70e:	fe cf       	rjmp	.-4      	; 0x70c <uart_transmit_DEC_to_BCD+0x2>
 710:	89 2f       	mov	r24, r25
 712:	82 95       	swap	r24
 714:	8f 70       	andi	r24, 0x0F	; 15
 716:	80 5d       	subi	r24, 0xD0	; 208
 718:	8c b9       	out	0x0c, r24	; 12
 71a:	5d 9b       	sbis	0x0b, 5	; 11
 71c:	fe cf       	rjmp	.-4      	; 0x71a <uart_transmit_DEC_to_BCD+0x10>
 71e:	9f 70       	andi	r25, 0x0F	; 15
 720:	90 5d       	subi	r25, 0xD0	; 208
 722:	9c b9       	out	0x0c, r25	; 12
 724:	08 95       	ret

00000726 <transmitUart>:
 726:	5d 9b       	sbis	0x0b, 5	; 11
 728:	fe cf       	rjmp	.-4      	; 0x726 <transmitUart>
 72a:	8c b9       	out	0x0c, r24	; 12
 72c:	08 95       	ret

0000072e <transmitUartString>:
 72e:	fc 01       	movw	r30, r24
 730:	04 c0       	rjmp	.+8      	; 0x73a <transmitUartString+0xc>
 732:	5d 9b       	sbis	0x0b, 5	; 11
 734:	fe cf       	rjmp	.-4      	; 0x732 <transmitUartString+0x4>
 736:	31 96       	adiw	r30, 0x01	; 1
 738:	8c b9       	out	0x0c, r24	; 12
 73a:	80 81       	ld	r24, Z
 73c:	88 23       	and	r24, r24
 73e:	c9 f7       	brne	.-14     	; 0x732 <transmitUartString+0x4>
 740:	08 95       	ret

00000742 <receiveUart>:
 742:	5f 9b       	sbis	0x0b, 7	; 11
 744:	fe cf       	rjmp	.-4      	; 0x742 <receiveUart>
 746:	8c b1       	in	r24, 0x0c	; 12
 748:	08 95       	ret

0000074a <transmitUartLong>:
 74a:	df 93       	push	r29
 74c:	cf 93       	push	r28
 74e:	cd b7       	in	r28, 0x3d	; 61
 750:	de b7       	in	r29, 0x3e	; 62
 752:	2a 97       	sbiw	r28, 0x0a	; 10
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	de bf       	out	0x3e, r29	; 62
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	ae 01       	movw	r20, r28
 760:	4f 5f       	subi	r20, 0xFF	; 255
 762:	5f 4f       	sbci	r21, 0xFF	; 255
 764:	2a e0       	ldi	r18, 0x0A	; 10
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	0e 94 62 04 	call	0x8c4	; 0x8c4 <ltoa>
 76c:	0e 94 97 03 	call	0x72e	; 0x72e <transmitUartString>
 770:	2a 96       	adiw	r28, 0x0a	; 10
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
 77c:	cf 91       	pop	r28
 77e:	df 91       	pop	r29
 780:	08 95       	ret

00000782 <transmitUartULong>:
 782:	df 93       	push	r29
 784:	cf 93       	push	r28
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
 78a:	2a 97       	sbiw	r28, 0x0a	; 10
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	ae 01       	movw	r20, r28
 798:	4f 5f       	subi	r20, 0xFF	; 255
 79a:	5f 4f       	sbci	r21, 0xFF	; 255
 79c:	2a e0       	ldi	r18, 0x0A	; 10
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	0e 94 96 04 	call	0x92c	; 0x92c <ultoa>
 7a4:	0e 94 97 03 	call	0x72e	; 0x72e <transmitUartString>
 7a8:	2a 96       	adiw	r28, 0x0a	; 10
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	f8 94       	cli
 7ae:	de bf       	out	0x3e, r29	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	cd bf       	out	0x3d, r28	; 61
 7b4:	cf 91       	pop	r28
 7b6:	df 91       	pop	r29
 7b8:	08 95       	ret

000007ba <transmitUartInt>:
 7ba:	df 93       	push	r29
 7bc:	cf 93       	push	r28
 7be:	cd b7       	in	r28, 0x3d	; 61
 7c0:	de b7       	in	r29, 0x3e	; 62
 7c2:	2a 97       	sbiw	r28, 0x0a	; 10
 7c4:	0f b6       	in	r0, 0x3f	; 63
 7c6:	f8 94       	cli
 7c8:	de bf       	out	0x3e, r29	; 62
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	cd bf       	out	0x3d, r28	; 61
 7ce:	be 01       	movw	r22, r28
 7d0:	6f 5f       	subi	r22, 0xFF	; 255
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	4a e0       	ldi	r20, 0x0A	; 10
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	0e 94 41 04 	call	0x882	; 0x882 <itoa>
 7dc:	0e 94 97 03 	call	0x72e	; 0x72e <transmitUartString>
 7e0:	2a 96       	adiw	r28, 0x0a	; 10
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	cf 91       	pop	r28
 7ee:	df 91       	pop	r29
 7f0:	08 95       	ret

000007f2 <transmitUartUInt>:
 7f2:	df 93       	push	r29
 7f4:	cf 93       	push	r28
 7f6:	cd b7       	in	r28, 0x3d	; 61
 7f8:	de b7       	in	r29, 0x3e	; 62
 7fa:	2a 97       	sbiw	r28, 0x0a	; 10
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	be 01       	movw	r22, r28
 808:	6f 5f       	subi	r22, 0xFF	; 255
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	4a e0       	ldi	r20, 0x0A	; 10
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	0e 94 bb 04 	call	0x976	; 0x976 <utoa>
 814:	0e 94 97 03 	call	0x72e	; 0x72e <transmitUartString>
 818:	2a 96       	adiw	r28, 0x0a	; 10
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	f8 94       	cli
 81e:	de bf       	out	0x3e, r29	; 62
 820:	0f be       	out	0x3f, r0	; 63
 822:	cd bf       	out	0x3d, r28	; 61
 824:	cf 91       	pop	r28
 826:	df 91       	pop	r29
 828:	08 95       	ret

0000082a <spi_init>:
 82a:	1e b8       	out	0x0e, r1	; 14
 82c:	83 e5       	ldi	r24, 0x53	; 83
 82e:	8d b9       	out	0x0d, r24	; 13
 830:	1f b8       	out	0x0f, r1	; 15
 832:	1d b8       	out	0x0d, r1	; 13
 834:	08 95       	ret

00000836 <spi_start>:
 836:	83 e5       	ldi	r24, 0x53	; 83
 838:	8d b9       	out	0x0d, r24	; 13
 83a:	08 95       	ret

0000083c <spi_stop>:
 83c:	1d b8       	out	0x0d, r1	; 13
 83e:	08 95       	ret

00000840 <spi_write_one_byte>:
 840:	93 e5       	ldi	r25, 0x53	; 83
 842:	9d b9       	out	0x0d, r25	; 13
 844:	8f b9       	out	0x0f, r24	; 15
 846:	77 9b       	sbis	0x0e, 7	; 14
 848:	fe cf       	rjmp	.-4      	; 0x846 <spi_write_one_byte+0x6>
 84a:	08 95       	ret

0000084c <spi_write_two_bytes>:
 84c:	93 e5       	ldi	r25, 0x53	; 83
 84e:	9d b9       	out	0x0d, r25	; 13
 850:	8f b9       	out	0x0f, r24	; 15
 852:	77 9b       	sbis	0x0e, 7	; 14
 854:	fe cf       	rjmp	.-4      	; 0x852 <spi_write_two_bytes+0x6>
 856:	6f b9       	out	0x0f, r22	; 15
 858:	77 9b       	sbis	0x0e, 7	; 14
 85a:	fe cf       	rjmp	.-4      	; 0x858 <spi_write_two_bytes+0xc>
 85c:	08 95       	ret

0000085e <spi_write_more_bytes>:
 85e:	fc 01       	movw	r30, r24
 860:	93 e5       	ldi	r25, 0x53	; 83
 862:	06 c0       	rjmp	.+12     	; 0x870 <__stack+0x11>
 864:	31 96       	adiw	r30, 0x01	; 1
 866:	9d b9       	out	0x0d, r25	; 13
 868:	80 81       	ld	r24, Z
 86a:	8f b9       	out	0x0f, r24	; 15
 86c:	77 9b       	sbis	0x0e, 7	; 14
 86e:	fe cf       	rjmp	.-4      	; 0x86c <__stack+0xd>
 870:	80 81       	ld	r24, Z
 872:	88 23       	and	r24, r24
 874:	b9 f7       	brne	.-18     	; 0x864 <__stack+0x5>
 876:	08 95       	ret

00000878 <spi_read_more_bytes>:
 878:	1f b8       	out	0x0f, r1	; 15
 87a:	77 9b       	sbis	0x0e, 7	; 14
 87c:	fe cf       	rjmp	.-4      	; 0x87a <spi_read_more_bytes+0x2>
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	08 95       	ret

00000882 <itoa>:
 882:	fb 01       	movw	r30, r22
 884:	9f 01       	movw	r18, r30
 886:	e8 94       	clt
 888:	42 30       	cpi	r20, 0x02	; 2
 88a:	c4 f0       	brlt	.+48     	; 0x8bc <itoa+0x3a>
 88c:	45 32       	cpi	r20, 0x25	; 37
 88e:	b4 f4       	brge	.+44     	; 0x8bc <itoa+0x3a>
 890:	4a 30       	cpi	r20, 0x0A	; 10
 892:	29 f4       	brne	.+10     	; 0x89e <itoa+0x1c>
 894:	97 fb       	bst	r25, 7
 896:	1e f4       	brtc	.+6      	; 0x89e <itoa+0x1c>
 898:	90 95       	com	r25
 89a:	81 95       	neg	r24
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	64 2f       	mov	r22, r20
 8a0:	77 27       	eor	r23, r23
 8a2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__udivmodhi4>
 8a6:	80 5d       	subi	r24, 0xD0	; 208
 8a8:	8a 33       	cpi	r24, 0x3A	; 58
 8aa:	0c f0       	brlt	.+2      	; 0x8ae <itoa+0x2c>
 8ac:	89 5d       	subi	r24, 0xD9	; 217
 8ae:	81 93       	st	Z+, r24
 8b0:	cb 01       	movw	r24, r22
 8b2:	00 97       	sbiw	r24, 0x00	; 0
 8b4:	a1 f7       	brne	.-24     	; 0x89e <itoa+0x1c>
 8b6:	16 f4       	brtc	.+4      	; 0x8bc <itoa+0x3a>
 8b8:	5d e2       	ldi	r21, 0x2D	; 45
 8ba:	51 93       	st	Z+, r21
 8bc:	10 82       	st	Z, r1
 8be:	c9 01       	movw	r24, r18
 8c0:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <strrev>

000008c4 <ltoa>:
 8c4:	fa 01       	movw	r30, r20
 8c6:	cf 93       	push	r28
 8c8:	ff 93       	push	r31
 8ca:	ef 93       	push	r30
 8cc:	22 30       	cpi	r18, 0x02	; 2
 8ce:	44 f1       	brlt	.+80     	; 0x920 <ltoa+0x5c>
 8d0:	25 32       	cpi	r18, 0x25	; 37
 8d2:	34 f5       	brge	.+76     	; 0x920 <ltoa+0x5c>
 8d4:	c2 2f       	mov	r28, r18
 8d6:	e8 94       	clt
 8d8:	ca 30       	cpi	r28, 0x0A	; 10
 8da:	49 f4       	brne	.+18     	; 0x8ee <ltoa+0x2a>
 8dc:	97 fb       	bst	r25, 7
 8de:	3e f4       	brtc	.+14     	; 0x8ee <ltoa+0x2a>
 8e0:	90 95       	com	r25
 8e2:	80 95       	com	r24
 8e4:	70 95       	com	r23
 8e6:	61 95       	neg	r22
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	2c 2f       	mov	r18, r28
 8f0:	33 27       	eor	r19, r19
 8f2:	44 27       	eor	r20, r20
 8f4:	55 27       	eor	r21, r21
 8f6:	ff 93       	push	r31
 8f8:	ef 93       	push	r30
 8fa:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__udivmodsi4>
 8fe:	ef 91       	pop	r30
 900:	ff 91       	pop	r31
 902:	60 5d       	subi	r22, 0xD0	; 208
 904:	6a 33       	cpi	r22, 0x3A	; 58
 906:	0c f0       	brlt	.+2      	; 0x90a <ltoa+0x46>
 908:	69 5d       	subi	r22, 0xD9	; 217
 90a:	61 93       	st	Z+, r22
 90c:	b9 01       	movw	r22, r18
 90e:	ca 01       	movw	r24, r20
 910:	60 50       	subi	r22, 0x00	; 0
 912:	70 40       	sbci	r23, 0x00	; 0
 914:	80 40       	sbci	r24, 0x00	; 0
 916:	90 40       	sbci	r25, 0x00	; 0
 918:	51 f7       	brne	.-44     	; 0x8ee <ltoa+0x2a>
 91a:	16 f4       	brtc	.+4      	; 0x920 <ltoa+0x5c>
 91c:	cd e2       	ldi	r28, 0x2D	; 45
 91e:	c1 93       	st	Z+, r28
 920:	10 82       	st	Z, r1
 922:	8f 91       	pop	r24
 924:	9f 91       	pop	r25
 926:	cf 91       	pop	r28
 928:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <strrev>

0000092c <ultoa>:
 92c:	fa 01       	movw	r30, r20
 92e:	cf 93       	push	r28
 930:	ff 93       	push	r31
 932:	ef 93       	push	r30
 934:	22 30       	cpi	r18, 0x02	; 2
 936:	cc f0       	brlt	.+50     	; 0x96a <ultoa+0x3e>
 938:	25 32       	cpi	r18, 0x25	; 37
 93a:	bc f4       	brge	.+46     	; 0x96a <ultoa+0x3e>
 93c:	c2 2f       	mov	r28, r18
 93e:	2c 2f       	mov	r18, r28
 940:	33 27       	eor	r19, r19
 942:	44 27       	eor	r20, r20
 944:	55 27       	eor	r21, r21
 946:	ff 93       	push	r31
 948:	ef 93       	push	r30
 94a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__udivmodsi4>
 94e:	ef 91       	pop	r30
 950:	ff 91       	pop	r31
 952:	60 5d       	subi	r22, 0xD0	; 208
 954:	6a 33       	cpi	r22, 0x3A	; 58
 956:	0c f0       	brlt	.+2      	; 0x95a <ultoa+0x2e>
 958:	69 5d       	subi	r22, 0xD9	; 217
 95a:	61 93       	st	Z+, r22
 95c:	b9 01       	movw	r22, r18
 95e:	ca 01       	movw	r24, r20
 960:	60 50       	subi	r22, 0x00	; 0
 962:	70 40       	sbci	r23, 0x00	; 0
 964:	80 40       	sbci	r24, 0x00	; 0
 966:	90 40       	sbci	r25, 0x00	; 0
 968:	51 f7       	brne	.-44     	; 0x93e <ultoa+0x12>
 96a:	10 82       	st	Z, r1
 96c:	8f 91       	pop	r24
 96e:	9f 91       	pop	r25
 970:	cf 91       	pop	r28
 972:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <strrev>

00000976 <utoa>:
 976:	fb 01       	movw	r30, r22
 978:	9f 01       	movw	r18, r30
 97a:	42 30       	cpi	r20, 0x02	; 2
 97c:	74 f0       	brlt	.+28     	; 0x99a <utoa+0x24>
 97e:	45 32       	cpi	r20, 0x25	; 37
 980:	64 f4       	brge	.+24     	; 0x99a <utoa+0x24>
 982:	64 2f       	mov	r22, r20
 984:	77 27       	eor	r23, r23
 986:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__udivmodhi4>
 98a:	80 5d       	subi	r24, 0xD0	; 208
 98c:	8a 33       	cpi	r24, 0x3A	; 58
 98e:	0c f0       	brlt	.+2      	; 0x992 <utoa+0x1c>
 990:	89 5d       	subi	r24, 0xD9	; 217
 992:	81 93       	st	Z+, r24
 994:	cb 01       	movw	r24, r22
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	a1 f7       	brne	.-24     	; 0x982 <utoa+0xc>
 99a:	10 82       	st	Z, r1
 99c:	c9 01       	movw	r24, r18
 99e:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <strrev>

000009a2 <strrev>:
 9a2:	dc 01       	movw	r26, r24
 9a4:	fc 01       	movw	r30, r24
 9a6:	67 2f       	mov	r22, r23
 9a8:	71 91       	ld	r23, Z+
 9aa:	77 23       	and	r23, r23
 9ac:	e1 f7       	brne	.-8      	; 0x9a6 <strrev+0x4>
 9ae:	32 97       	sbiw	r30, 0x02	; 2
 9b0:	04 c0       	rjmp	.+8      	; 0x9ba <strrev+0x18>
 9b2:	7c 91       	ld	r23, X
 9b4:	6d 93       	st	X+, r22
 9b6:	70 83       	st	Z, r23
 9b8:	62 91       	ld	r22, -Z
 9ba:	ae 17       	cp	r26, r30
 9bc:	bf 07       	cpc	r27, r31
 9be:	c8 f3       	brcs	.-14     	; 0x9b2 <strrev+0x10>
 9c0:	08 95       	ret

000009c2 <__udivmodhi4>:
 9c2:	aa 1b       	sub	r26, r26
 9c4:	bb 1b       	sub	r27, r27
 9c6:	51 e1       	ldi	r21, 0x11	; 17
 9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <__udivmodhi4_ep>

000009ca <__udivmodhi4_loop>:
 9ca:	aa 1f       	adc	r26, r26
 9cc:	bb 1f       	adc	r27, r27
 9ce:	a6 17       	cp	r26, r22
 9d0:	b7 07       	cpc	r27, r23
 9d2:	10 f0       	brcs	.+4      	; 0x9d8 <__udivmodhi4_ep>
 9d4:	a6 1b       	sub	r26, r22
 9d6:	b7 0b       	sbc	r27, r23

000009d8 <__udivmodhi4_ep>:
 9d8:	88 1f       	adc	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	5a 95       	dec	r21
 9de:	a9 f7       	brne	.-22     	; 0x9ca <__udivmodhi4_loop>
 9e0:	80 95       	com	r24
 9e2:	90 95       	com	r25
 9e4:	bc 01       	movw	r22, r24
 9e6:	cd 01       	movw	r24, r26
 9e8:	08 95       	ret

000009ea <__udivmodsi4>:
 9ea:	a1 e2       	ldi	r26, 0x21	; 33
 9ec:	1a 2e       	mov	r1, r26
 9ee:	aa 1b       	sub	r26, r26
 9f0:	bb 1b       	sub	r27, r27
 9f2:	fd 01       	movw	r30, r26
 9f4:	0d c0       	rjmp	.+26     	; 0xa10 <__udivmodsi4_ep>

000009f6 <__udivmodsi4_loop>:
 9f6:	aa 1f       	adc	r26, r26
 9f8:	bb 1f       	adc	r27, r27
 9fa:	ee 1f       	adc	r30, r30
 9fc:	ff 1f       	adc	r31, r31
 9fe:	a2 17       	cp	r26, r18
 a00:	b3 07       	cpc	r27, r19
 a02:	e4 07       	cpc	r30, r20
 a04:	f5 07       	cpc	r31, r21
 a06:	20 f0       	brcs	.+8      	; 0xa10 <__udivmodsi4_ep>
 a08:	a2 1b       	sub	r26, r18
 a0a:	b3 0b       	sbc	r27, r19
 a0c:	e4 0b       	sbc	r30, r20
 a0e:	f5 0b       	sbc	r31, r21

00000a10 <__udivmodsi4_ep>:
 a10:	66 1f       	adc	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	88 1f       	adc	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	1a 94       	dec	r1
 a1a:	69 f7       	brne	.-38     	; 0x9f6 <__udivmodsi4_loop>
 a1c:	60 95       	com	r22
 a1e:	70 95       	com	r23
 a20:	80 95       	com	r24
 a22:	90 95       	com	r25
 a24:	9b 01       	movw	r18, r22
 a26:	ac 01       	movw	r20, r24
 a28:	bd 01       	movw	r22, r26
 a2a:	cf 01       	movw	r24, r30
 a2c:	08 95       	ret

00000a2e <_exit>:
 a2e:	f8 94       	cli

00000a30 <__stop_program>:
 a30:	ff cf       	rjmp	.-2      	; 0xa30 <__stop_program>
