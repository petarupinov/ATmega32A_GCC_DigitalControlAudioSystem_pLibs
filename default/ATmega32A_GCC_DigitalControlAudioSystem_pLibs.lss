
ATmega32A_GCC_DigitalControlAudioSystem_pLibs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00000bd4  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000f6  008000f6  00000cfe  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005d3  00000000  00000000  00000e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a5c  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b4  00000000  00000000  00002e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001639  00000000  00000000  00003801  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c0  00000000  00000000  00004e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c2  00000000  00000000  000052fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a8  00000000  00000000  00005abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  00006066  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_3>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_4>
  14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3f       	cpi	r26, 0xF6	; 246
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 ef       	ldi	r26, 0xF6	; 246
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 30       	cpi	r26, 0x0A	; 10
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  8a:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:
*****************************************/
void port_init()
{	

// PORT A connections
	DDRA  = 0b11111111;		//  PA7:U8/PGA2310,CS; PA6:U7/PGA2310,CS; PA5:CON2LCD,RS; PA4:CON2LCD,RW; PA3:CON2LCD,E; PA2:U2/74HC595,RCLK(LCD); PA1:U2/74HC595,SCLK(LCD); PA0:U2/74HC595,DATA(LCD);
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//	Interfaces: NOT USED. PULLUP DISABLE in PORTA.
  96:	1b ba       	out	0x1b, r1	; 27

// PORT B connections
	DDRB  = 0b10111000;		//  PB7:U6,U7,U8/PGA2310,SCLK; PB6:U6,U7,U8/PGA2310,SDO(CON33,36,39); PB5:U6,U7,U8/PGA2310,SDI; PB4:U12/74HC595,DATA(REL_OUT); PB3:U6/PGA2310,CS; PB2:CON8/BUTTON,"ESCAPE",INT2; PB1:CON5/BUTTON,"ON/OFF"; PB0:CON14TempSensor/DS18S20,DQ,IN/OUT;
  98:	88 eb       	ldi	r24, 0xB8	; 184
  9a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000111;		//	Interfaces: EXTERNAL INTERRUPT 2; SPI. set pullup to IRTSOP2240 / BUTTON(on/off) / DS18s20.
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	88 bb       	out	0x18, r24	; 24

// PORT C connections
	DDRC  = 0b11001100;		//  PC7:U10/74HC595,DATA(REL_IN); PC6:U10/74HC595,SCLK(REL_IN); PC5:EncoderED1112S,A; PC4:EncoderED1112S,B; PC3:U10/74HC595,RCLK(REL_IN); PC2:Q2/BD237(RELAY_POWER_SUPPLY); PC1:DS1307/24C64,I2C/SDA; PC0:DS1307/24C64,I2C/SCL;
  a0:	8c ec       	ldi	r24, 0xCC	; 204
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;		//	Interfaces: I2C. PULLUP DISABLE in PORTC.
  a4:	15 ba       	out	0x15, r1	; 21

// PORT D connections
	DDRD  = 0b11110000;		//  PD7:U12/74HC595,RCLK(REL_OUT); PD6:U12/74HC595,SCLK(REL_OUT); PD5:Q1/BD237(FAN_CONTROL_PWM); PD4:LED5/"ON/OFF AUDIO SYSTEM"; PD3:CON11/EncoderBUTTON,"MENU/ENTER"/INT1; PD2:CON12/IR/TSOP2240,/INT0; PD1:CON14/MAX232,UART/TXD; PD0:CON14/MAX232,UART/RXD;
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;		//	Interfaces: TIMER1; UART/USART; EXTERNAL INTERRUPT 0, 1. PULLUP DISABLE in PORTD.
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	82 bb       	out	0x12, r24	; 18
//	DDRD&=~_BV(0);// DDD0 = "0"  (DDD0=DDRD nulev bit) set PORTD pin0 to zero as input
//	PORTD|=_BV(0);// PD0  = "1"  Enable pull up
//	PORTD|=_BV(1);// PD1  = "1"  led
//	DDRD|=_BV(1); // DDD1 = "1"  (DDD1=DDRD parvi bit) set PORTD pin1 to one as output

}
  ae:	08 95       	ret

000000b0 <timer2_init>:
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init()
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  b4:	81 e8       	ldi	r24, 0x81	; 129
  b6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
  b8:	13 bc       	out	0x23, r1	; 35
}
  ba:	08 95       	ret

000000bc <timer2_on>:
/*************************************
******** DEFINITIONS OF TIMER ********
*************************************/
void timer2_on()	// Timer2 On
{
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  bc:	81 e8       	ldi	r24, 0x81	; 129
  be:	85 bd       	out	0x25, r24	; 37
	OCR2 = 1; // FAN PWM ON
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	83 bd       	out	0x23, r24	; 35
}
  c4:	08 95       	ret

000000c6 <timer2_off>:

void timer2_off()	// Timer2 Off
{
	TCCR2 = 0b00000000;		// DISABLED OCOC1A - PWM, OC1B - Disabled, normal port.
  c6:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0; // FAN PWM OFF
  c8:	13 bc       	out	0x23, r1	; 35
}
  ca:	08 95       	ret

000000cc <__vector_1>:

/*****************************************
**** EXTERNAL INTERRUPT 0 VECTOR 01 ******
*****************************************/
ISR(INT0_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
}
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_2>:

/*****************************************
**** EXTERNAL INTERRUPT 1 VECTOR 02 ******
*****************************************/
ISR(INT1_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
}
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_3>:

/*****************************************
**** EXTERNAL INTERRUPT 2 VECTOR 03 ******
*****************************************/
ISR(INT2_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
}
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_4>:

/*****************************************
**** TIMER 2 OUTPUT COMPARE VECTOR 04 ****
*****************************************/
ISR(TIMER2_COMP_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
}
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_5>:

/*****************************************
**** TIMER 2 OVERFLOW VECTOR 05 **********
*****************************************/
ISR(TIMER2_OVF_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
}
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <init_all>:
*********************************** START OF APPLICATION ************************************
********************************************************************************************/

void init_all()
{
	port_init();
 130:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init()
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
 138:	81 e8       	ldi	r24, 0x81	; 129
 13a:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
 13c:	13 bc       	out	0x23, r1	; 35

void init_all()
{
	port_init();
	timer2_init();
	LCD_INIT();
 13e:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_INIT>
	LCD_EXECUTE_COMMAND(LCD_CLEAR);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
}
 148:	08 95       	ret

0000014a <ampliferOff>:

/********************
**** AMPLIFER OFF ****
********************/
void ampliferOff()
{
 14a:	88 e5       	ldi	r24, 0x58	; 88
 14c:	9b e1       	ldi	r25, 0x1B	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14e:	20 e9       	ldi	r18, 0x90	; 144
 150:	31 e0       	ldi	r19, 0x01	; 1
 152:	f9 01       	movw	r30, r18
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <ampliferOff+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	d9 f7       	brne	.-10     	; 0x152 <ampliferOff+0x8>
 15c:	88 e5       	ldi	r24, 0x58	; 88
 15e:	9b e1       	ldi	r25, 0x1B	; 27
 160:	20 e9       	ldi	r18, 0x90	; 144
 162:	31 e0       	ldi	r19, 0x01	; 1
 164:	f9 01       	movw	r30, r18
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <ampliferOff+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16c:	d9 f7       	brne	.-10     	; 0x164 <ampliferOff+0x1a>
	_delay_ms(700);								// PESHO COMMENT 14.08.2015, 21:10
//	relays_in_off();	// RELAYS IN1 CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
	_delay_ms(700);								// PESHO COMMENT 14.08.2015, 21:10
//	REL_POWER_low();// RELAY POWER OFF				// PESHO COMMENT 14.08.2015, 21:10

	transmitUartString("Standby\r\n");
 16e:	80 e6       	ldi	r24, 0x60	; 96
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 05 04 	call	0x80a	; 0x80a <transmitUartString>
//				uart_transmit("<STANDBY>\r\n", 11);		// "\r\n" - 2 symbols (not 4 symbols)

	LCD_INIT();								// LCD INITIZLIZATION
 176:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_INIT>
	LCD_EXECUTE_COMMAND(LCD_SELECT_1ROW);	// select row 1
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
lcdDataString("       Standby");
 180:	8a e6       	ldi	r24, 0x6A	; 106
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 14 03 	call	0x628	; 0x628 <lcdDataString>
//				LCD_EXECUTE_DATA(" >>  <STANDBY>   << ",20);		// char "DATA", int 13 of chars of "DATA"
//				_delay_ms(500);	// izchakvane - migasht efekt
//				LCD_INIT();								// LCD INITIZLIZATION
//				_delay_ms(250);	// izchakvane - migasht efekt, natiskane i otpuskane na buton - filtar treptqsht kontakt buton
	LCD_EXECUTE_COMMAND(LCD_SELECT_3ROW);	// select row 1
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
lcdDataString("    Amplifer Off");
 18e:	89 e7       	ldi	r24, 0x79	; 121
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 14 03 	call	0x628	; 0x628 <lcdDataString>
 196:	88 e8       	ldi	r24, 0x88	; 136
 198:	93 e1       	ldi	r25, 0x13	; 19
 19a:	20 e9       	ldi	r18, 0x90	; 144
 19c:	31 e0       	ldi	r19, 0x01	; 1
 19e:	f9 01       	movw	r30, r18
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <ampliferOff+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a6:	d9 f7       	brne	.-10     	; 0x19e <ampliferOff+0x54>
 1a8:	84 ef       	ldi	r24, 0xF4	; 244
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	20 e9       	ldi	r18, 0x90	; 144
 1ae:	31 e0       	ldi	r19, 0x01	; 1
 1b0:	f9 01       	movw	r30, r18
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <ampliferOff+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <ampliferOff+0x66>

	_delay_ms(50);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton

//	FAN_PWM_OFF();
//			LCD_EXECUTE_COMMAND(LCD_OFF);			// LCD OFF
	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
 1ba:	94 9a       	sbi	0x12, 4	; 18
}
 1bc:	08 95       	ret

000001be <ampliferOn>:
**** AMPLIFER ON ****
********************/
char ampliferOn()
{
//	FAN_PWM_SPEED1();	// KOMENTAR ZARADI SIMULACIQTA - MNOGO BAVI PRI SIMULACIQ S TIMER1
	LED_low_DISPLAYLED_high();		// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
 1be:	94 98       	cbi	0x12, 4	; 18
//			FAN_high();		// PORTD5 - FAN ON (logic "1")	NON PWM, NON TIMER1

//			volumeLeft = volumeRight = volumeValue [0];	// nulurane na volume control pri vsqko puskane

	spi_start();
 1c0:	0e 94 89 04 	call	0x912	; 0x912 <spi_start>
//	PGA2310_U6_SPI(volumeLeft, volumeRight);
	spi_stop();
 1c4:	0e 94 8c 04 	call	0x918	; 0x918 <spi_stop>

	spi_start();
 1c8:	0e 94 89 04 	call	0x912	; 0x912 <spi_start>
//	PGA2310_U7_SPI(volumeLeft, volumeRight);
	spi_stop();
 1cc:	0e 94 8c 04 	call	0x918	; 0x918 <spi_stop>

	spi_start();
 1d0:	0e 94 89 04 	call	0x912	; 0x912 <spi_start>
//	PGA2310_U8_SPI(volumeLeft, volumeRight);
	spi_stop();
 1d4:	0e 94 8c 04 	call	0x918	; 0x918 <spi_stop>

	transmitUartString("Amplifer On\r\n");
 1d8:	8a e8       	ldi	r24, 0x8A	; 138
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 05 04 	call	0x80a	; 0x80a <transmitUartString>
//		uart_transmit("<AMPLIFER ON>\r\n", 15);	// "\r\n" - 2 symbols (not 4 symbols)

	LCD_INIT();								// LCD INITIZLIZATION
 1e0:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_INIT>
	LCD_EXECUTE_COMMAND(LCD_SELECT_1ROW);	// select row 1
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
//		LCD_EXECUTE_DATA(" << AMPLIFER  ON >> ",20);	// char "DATA", int 13 of chars of "DATA"
lcdDataString("    Amplifer On");
 1ea:	88 e9       	ldi	r24, 0x98	; 152
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 14 03 	call	0x628	; 0x628 <lcdDataString>
	LCD_EXECUTE_COMMAND(LCD_SELECT_2ROW);	// select row 2
 1f2:	80 ec       	ldi	r24, 0xC0	; 192
 1f4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
	LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
 1f8:	88 ea       	ldi	r24, 0xA8	; 168
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	64 e1       	ldi	r22, 0x14	; 20
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_EXECUTE_DATA>
//			LCD_EXECUTE_COMMAND(LCD_SELECT_3ROW);	// select row 3
//			LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
//			LCD_EXECUTE_COMMAND(LCD_SELECT_4ROW);	// select row 4
//			LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
	LCD_EXECUTE_COMMAND(LCD_ON);			// LCD ON without CURSOR
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
 20a:	80 e4       	ldi	r24, 0x40	; 64
 20c:	9c e9       	ldi	r25, 0x9C	; 156
 20e:	20 e9       	ldi	r18, 0x90	; 144
 210:	31 e0       	ldi	r19, 0x01	; 1
 212:	f9 01       	movw	r30, r18
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <ampliferOn+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 218:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 21a:	d9 f7       	brne	.-10     	; 0x212 <ampliferOn+0x54>
 21c:	88 e5       	ldi	r24, 0x58	; 88
 21e:	9b e1       	ldi	r25, 0x1B	; 27
 220:	20 e9       	ldi	r18, 0x90	; 144
 222:	31 e0       	ldi	r19, 0x01	; 1
 224:	f9 01       	movw	r30, r18
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <ampliferOn+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22c:	d9 f7       	brne	.-10     	; 0x224 <ampliferOn+0x66>
	_delay_ms(700);									// PESHO COMMENT 14.08.2015, 21:10
//	relays_out_6ch();	// RELAYS OUT CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10

//			PGA2310_U8_SPI(volumeLeft, volumeRight);	// 'A', 'A', 0b01111110, 0b01111110
	return SUCCESS;
}
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret

00000232 <buttons_press>:
	LCD_INIT();
	LCD_EXECUTE_COMMAND(LCD_CLEAR);
}

void buttons_press()
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	c0 e9       	ldi	r28, 0x90	; 144
 238:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char pgaVolumeLeft, pgaVolumeRight;
	pgaVolumeLeft = pgaVolumeRight = 0b00001111;

	while(1)
	{
		if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 0)	// obj ptr flagStatusBtnRegister from struct flagStatusBtnOnOff
 23a:	b1 99       	sbic	0x16, 1	; 22
 23c:	1a c0       	rjmp	.+52     	; 0x272 <buttons_press+0x40>
 23e:	e0 91 02 01 	lds	r30, 0x0102
 242:	f0 91 03 01 	lds	r31, 0x0103
 246:	80 81       	ld	r24, Z
 248:	80 fd       	sbrc	r24, 0
 24a:	13 c0       	rjmp	.+38     	; 0x272 <buttons_press+0x40>
		{
			test = ampliferOn();
 24c:	0e 94 df 00 	call	0x1be	; 0x1be <ampliferOn>
			if(SUCCESS == test)
 250:	88 23       	and	r24, r24
 252:	99 f7       	brne	.-26     	; 0x23a <buttons_press+0x8>
			{
				flagStatusBits->flagPower = 1;			// filter za buton ON
 254:	e0 91 02 01 	lds	r30, 0x0102
 258:	f0 91 03 01 	lds	r31, 0x0103
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
 262:	80 e1       	ldi	r24, 0x10	; 16
 264:	97 e2       	ldi	r25, 0x27	; 39
 266:	fe 01       	movw	r30, r28
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <buttons_press+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26e:	d9 f7       	brne	.-10     	; 0x266 <buttons_press+0x34>
 270:	e4 cf       	rjmp	.-56     	; 0x23a <buttons_press+0x8>
				_delay_ms(1000);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton
			}
		}
		else if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 1)
 272:	b1 99       	sbic	0x16, 1	; 22
 274:	e2 cf       	rjmp	.-60     	; 0x23a <buttons_press+0x8>
 276:	e0 91 02 01 	lds	r30, 0x0102
 27a:	f0 91 03 01 	lds	r31, 0x0103
 27e:	80 81       	ld	r24, Z
 280:	80 ff       	sbrs	r24, 0
 282:	db cf       	rjmp	.-74     	; 0x23a <buttons_press+0x8>
		{
			ampliferOff();
 284:	0e 94 a5 00 	call	0x14a	; 0x14a <ampliferOff>
			flagStatusBits->flagPower = 0;			// filter za buton OFF
 288:	e0 91 02 01 	lds	r30, 0x0102
 28c:	f0 91 03 01 	lds	r31, 0x0103
 290:	80 81       	ld	r24, Z
 292:	8e 7f       	andi	r24, 0xFE	; 254
 294:	80 83       	st	Z, r24
 296:	d1 cf       	rjmp	.-94     	; 0x23a <buttons_press+0x8>

00000298 <main>:
********************************************************************************************/

int main(void)
{

	init_all();				// inicializacia na vsichko
 298:	0e 94 98 00 	call	0x130	; 0x130 <init_all>

	sei();							// file "avr/interrupt.h"
 29c:	78 94       	sei
//	SREG = (1<<I);

	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
 29e:	94 9a       	sbi	0x12, 4	; 18
	while(1)
	{
//		struct flagStatusBtnOnOff flagStatusBtnRegister;	// obj flagStatusBtnRegister from struct flagStatusBtnOnOff
//		flagStatusBtnRegister.bit0 = 0;
		
		buttons_press();	// izchakvane za natiskane na buton
 2a0:	0e 94 19 01 	call	0x232	; 0x232 <buttons_press>
 2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <main+0x8>

000002a6 <eeprom_24c64_read>:
	// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
	// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !
	
	byte eepromReceiveByte0, eepromReceiveByte1, eepromReceiveByte2, eepromReceiveByte3, eepromReceiveByte4, eepromReceiveByte5;
// EEPROM READ
	i2c_start();
 2a6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);		// EEPROM 24C64 ADDRESS ACCESS WRITE
 2aa:	80 ea       	ldi	r24, 0xA0	; 160
 2ac:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>

	i2c_start();
 2bc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_READ);		// EEPROM 24C64 ADDRESS ACCESS READ
 2c0:	81 ea       	ldi	r24, 0xA1	; 161
 2c2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	eepromReceiveByte0	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_read>
	eepromReceiveByte1	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_read>
	eepromReceiveByte2	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_read>
	eepromReceiveByte3	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_read>
	eepromReceiveByte4	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_read>
	eepromReceiveByte5	= i2c_read(1);				// EEPROM DATA READ BYTE	// i2c_read(1) parametar razlichen ot 0 spira komunikaciqta NACK
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_read>
	i2c_stop();
 2ea:	0e 94 67 02 	call	0x4ce	; 0x4ce <i2c_stop>
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte2);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte3);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte4);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte5);
*/
}
 2ee:	08 95       	ret

000002f0 <eeprom_24c64_write>:
// Za da se vijda tova koeto se e zapisalo v pametta, a ne ot tozi bibliotechen fail !!!!!!!!!
// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !

// EEPROM WRITE
	i2c_start();
 2f0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
 2f4:	80 ea       	ldi	r24, 0xA0	; 160
 2f6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
// Write data
	i2c_write(0x30);	// Data is stored: 0x30 - '0'
 306:	80 e3       	ldi	r24, 0x30	; 48
 308:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	i2c_write(0x31);	// Data is stored: 0x31 - '1'
 30c:	81 e3       	ldi	r24, 0x31	; 49
 30e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	i2c_write(0x32);	// Data is stored: 0x32 - '2'
 312:	82 e3       	ldi	r24, 0x32	; 50
 314:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	i2c_write(0x33);	// Data is stored: 0x33 - '3'
 318:	83 e3       	ldi	r24, 0x33	; 51
 31a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	i2c_write(0x34);	// Data is stored: 0x34 - '4'
 31e:	84 e3       	ldi	r24, 0x34	; 52
 320:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	i2c_stop();
 324:	0e 94 67 02 	call	0x4ce	; 0x4ce <i2c_stop>
}
 328:	08 95       	ret

0000032a <eeprom_24c64_reset>:

/*************************************
** RESET AND ZERO FILL EEPROM 24C64 **
*************************************/
void eeprom_24c64_reset()
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
	unsigned int i;	// 16 bits
// EEPROM WRITE
	i2c_start();
 32e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
 332:	80 ea       	ldi	r24, 0xA0	; 160
 334:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
 344:	c0 e0       	ldi	r28, 0x00	; 0
 346:	d0 e0       	ldi	r29, 0x00	; 0
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
 34e:	21 96       	adiw	r28, 0x01	; 1
 350:	8f e1       	ldi	r24, 0x1F	; 31
 352:	cf 3f       	cpi	r28, 0xFF	; 255
 354:	d8 07       	cpc	r29, r24
 356:	c1 f7       	brne	.-16     	; 0x348 <eeprom_24c64_reset+0x1e>
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
	}
	i2c_stop();
 358:	0e 94 67 02 	call	0x4ce	; 0x4ce <i2c_stop>
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <reset>:
}
*/

unsigned char reset(void)
{
    DDRx |= (1<<Px);            //Ausgang
 362:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 364:	c0 98       	cbi	0x18, 0	; 24
 366:	80 e8       	ldi	r24, 0x80	; 128
 368:	97 e0       	ldi	r25, 0x07	; 7
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <reset+0x8>
    _delay_us(480);
	DDRx &= ~(1<<Px);
 36e:	b8 98       	cbi	0x17, 0	; 23
 370:	80 e4       	ldi	r24, 0x40	; 64
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <reset+0x12>
    _delay_us(80);
	if(!(PINx & (1<<Px)))     //Prüfe Slave-Antwort
 378:	b0 9b       	sbis	0x16, 0	; 22
 37a:	02 c0       	rjmp	.+4      	; 0x380 <reset+0x1e>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
 380:	88 e0       	ldi	r24, 0x08	; 8
 382:	97 e0       	ldi	r25, 0x07	; 7
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <reset+0x22>
 388:	81 e0       	ldi	r24, 0x01	; 1
	}
    else
	{
        return 0;
	}
}
 38a:	08 95       	ret

0000038c <read_bit>:

unsigned char read_bit(void)
{
    DDRx |= (1<<Px);            //Ausgang
 38c:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 38e:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 390:	85 e0       	ldi	r24, 0x05	; 5
 392:	8a 95       	dec	r24
 394:	f1 f7       	brne	.-4      	; 0x392 <read_bit+0x6>
    _delay_us(1);
	DDRx &= ~(1<<Px);
 396:	b8 98       	cbi	0x17, 0	; 23
 398:	80 e4       	ldi	r24, 0x40	; 64
 39a:	8a 95       	dec	r24
 39c:	f1 f7       	brne	.-4      	; 0x39a <read_bit+0xe>
    _delay_us(12);
    if(!(PINx & (1<<Px)))       //Abtastung innerhalb von 15µs
 39e:	86 b3       	in	r24, 0x16	; 22
	}
	else
    {
		return 1;
	}
}
 3a0:	81 70       	andi	r24, 0x01	; 1
 3a2:	08 95       	ret

000003a4 <write_bit>:

void write_bit(unsigned char bitval)    //kann 0 oder 1 sein
{
    DDRx |= (1<<Px);            //Ausgang
 3a4:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 3a6:	c0 98       	cbi	0x18, 0	; 24
    if(bitval)
 3a8:	81 11       	cpse	r24, r1
	{
        PORTx |= (1<<Px);      //H-Pegel
 3aa:	c0 9a       	sbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3ac:	88 eb       	ldi	r24, 0xB8	; 184
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <write_bit+0xc>
    }
	_delay_us(110);        
    DDRx &= ~(1<<Px);
 3b4:	b8 98       	cbi	0x17, 0	; 23
    PORTx &= ~(1<<Px);
 3b6:	c0 98       	cbi	0x18, 0	; 24
}
 3b8:	08 95       	ret

000003ba <read_byte>:

unsigned char read_byte(void)
{
 3ba:	cf 92       	push	r12
 3bc:	df 92       	push	r13
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	10 e0       	ldi	r17, 0x00	; 0
 3ca:	c0 e0       	ldi	r28, 0x00	; 0
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
		{
            byte |= (1<<i);
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	c9 2e       	mov	r12, r25
 3d2:	d1 2c       	mov	r13, r1
 3d4:	80 ee       	ldi	r24, 0xE0	; 224
 3d6:	e8 2e       	mov	r14, r24
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	f8 2e       	mov	r15, r24
unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
 3dc:	0e 94 c6 01 	call	0x38c	; 0x38c <read_bit>
 3e0:	88 23       	and	r24, r24
 3e2:	41 f0       	breq	.+16     	; 0x3f4 <read_byte+0x3a>
		{
            byte |= (1<<i);
 3e4:	c6 01       	movw	r24, r12
 3e6:	0c 2e       	mov	r0, r28
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <read_byte+0x34>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <read_byte+0x30>
 3f2:	18 2b       	or	r17, r24
 3f4:	c7 01       	movw	r24, r14
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <read_byte+0x3c>
 3fa:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
 3fc:	c8 30       	cpi	r28, 0x08	; 8
 3fe:	d1 05       	cpc	r29, r1
 400:	69 f7       	brne	.-38     	; 0x3dc <read_byte+0x22>
            byte |= (1<<i);
		}
        _delay_us(120);
    }
    return byte;
}
 402:	81 2f       	mov	r24, r17
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	08 95       	ret

00000414 <write_byte>:

void write_byte(unsigned char byte)
{
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	c0 e0       	ldi	r28, 0x00	; 0
 41e:	d0 e0       	ldi	r29, 0x00	; 0
    for(unsigned char i=0; i<8; i++)
	{
        if(byte & (1<<i))
 420:	08 2f       	mov	r16, r24
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	c8 01       	movw	r24, r16
 426:	0c 2e       	mov	r0, r28
 428:	02 c0       	rjmp	.+4      	; 0x42e <write_byte+0x1a>
 42a:	95 95       	asr	r25
 42c:	87 95       	ror	r24
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <write_byte+0x16>
 432:	80 ff       	sbrs	r24, 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <write_byte+0x26>
		{
			write_bit(1);
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	01 c0       	rjmp	.+2      	; 0x43c <write_byte+0x28>
		}
        else
		{
            write_bit(0);
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <write_bit>
 440:	21 96       	adiw	r28, 0x01	; 1
    return byte;
}

void write_byte(unsigned char byte)
{
    for(unsigned char i=0; i<8; i++)
 442:	c8 30       	cpi	r28, 0x08	; 8
 444:	d1 05       	cpc	r29, r1
 446:	71 f7       	brne	.-36     	; 0x424 <write_byte+0x10>
 448:	80 ee       	ldi	r24, 0xE0	; 224
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <write_byte+0x38>
		{
            write_bit(0);
		}
	}
    _delay_us(120);
}  
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <wait_ready>:
	return 0;
}

void wait_ready(void)
{
	while(!(read_bit()));
 45a:	0e 94 c6 01 	call	0x38c	; 0x38c <read_bit>
 45e:	88 23       	and	r24, r24
 460:	e1 f3       	breq	.-8      	; 0x45a <wait_ready>
}
 462:	08 95       	ret

00000464 <read_scratchpad>:
	}
    _delay_us(120);
}  

unsigned char read_scratchpad(void)
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29

	if(reset())
 468:	0e 94 b1 01 	call	0x362	; 0x362 <reset>
 46c:	88 23       	and	r24, r24
 46e:	e9 f0       	breq	.+58     	; 0x4aa <read_scratchpad+0x46>
	{
		write_byte(0xCC);
 470:	8c ec       	ldi	r24, 0xCC	; 204
 472:	0e 94 0a 02 	call	0x414	; 0x414 <write_byte>
		write_byte(0x44);
 476:	84 e4       	ldi	r24, 0x44	; 68
 478:	0e 94 0a 02 	call	0x414	; 0x414 <write_byte>
		wait_ready();
 47c:	0e 94 2d 02 	call	0x45a	; 0x45a <wait_ready>
		if(reset())
 480:	0e 94 b1 01 	call	0x362	; 0x362 <reset>
 484:	88 23       	and	r24, r24
 486:	89 f0       	breq	.+34     	; 0x4aa <read_scratchpad+0x46>
		{
			write_byte(0xCC);
 488:	8c ec       	ldi	r24, 0xCC	; 204
 48a:	0e 94 0a 02 	call	0x414	; 0x414 <write_byte>
			write_byte(0xBE);
 48e:	8e eb       	ldi	r24, 0xBE	; 190
 490:	0e 94 0a 02 	call	0x414	; 0x414 <write_byte>
 494:	c7 ef       	ldi	r28, 0xF7	; 247
 496:	d0 e0       	ldi	r29, 0x00	; 0
			for(unsigned char i=0; i<9; i++)
			{
				scratchpad [i] = read_byte();
 498:	0e 94 dd 01 	call	0x3ba	; 0x3ba <read_byte>
 49c:	89 93       	st	Y+, r24
		wait_ready();
		if(reset())
		{
			write_byte(0xCC);
			write_byte(0xBE);
			for(unsigned char i=0; i<9; i++)
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	c0 30       	cpi	r28, 0x00	; 0
 4a2:	d8 07       	cpc	r29, r24
 4a4:	c9 f7       	brne	.-14     	; 0x498 <read_scratchpad+0x34>
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <read_scratchpad+0x48>
 4aa:	80 e0       	ldi	r24, 0x00	; 0
			}
			return 1;
		}
	}
	return 0;
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <i2c_init>:
|== TWPS = 1 => (4^TWPS)= 4  // TWSR = (0<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx01 => TWSR = 1 (DEC) => 4^1 =  4 =|
|== TWPS = 2 => (4^TWPS)=16  // TWSR = (1<<TWPS1)|(0<<TWPS0) => TWSR = 0bxxxxxx10 => TWSR = 2 (DEC) => 4^2 = 16 =|
|== TWPS = 3 => (4^TWPS)=64  // TWSR = (1<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx11 => TWSR = 3 (DEC) => 4^3 = 64 =|
|===============================================================================================================*/

	TWBR = 0b00010010;	// HEX=0x12	or DEC=18	// FCPU = 16 000 000 |-> SCL = 16000000 / (16+(2*TWBR*(4^TWPS)) = 16000000 / (16+(2*18*(4))) = 16000000 / 160 = 100 000 Hz = 100 kHz
 4b2:	82 e1       	ldi	r24, 0x12	; 18
 4b4:	80 b9       	out	0x00, r24	; 0
	TWSR = (0<<TWPS1)|(1<<TWPS0);	// SCL = 16 000 000 / 64  = 250 000 = 250kHz
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	81 b9       	out	0x01, r24	; 1
	TWCR = (1<<TWEN);	//	TWCR = 0x04; // TWCR = (x<<TWINT)|(x<<TWEA)|(x<<TWSTA)|(x<<TWSTO)|(x<<TWEN)|(x<<TWIE);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz
 4ba:	84 e0       	ldi	r24, 0x04	; 4
 4bc:	86 bf       	out	0x36, r24	; 54
	TWDR = 0b00000000;
 4be:	13 b8       	out	0x03, r1	; 3
}
 4c0:	08 95       	ret

000004c2 <i2c_start>:
/*****************************************
** START CONDITION OF I2C COMMUNICATION **
*****************************************/
void i2c_start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 4c2:	84 ea       	ldi	r24, 0xA4	; 164
 4c4:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
 4c6:	06 b6       	in	r0, 0x36	; 54
 4c8:	07 fe       	sbrs	r0, 7
 4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <i2c_start+0x4>
	{
	}
}
 4cc:	08 95       	ret

000004ce <i2c_stop>:
/****************************************
** STOP CONDITION OF I2C COMMUNICATION **
****************************************/
void i2c_stop()
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 4ce:	84 e9       	ldi	r24, 0x94	; 148
 4d0:	86 bf       	out	0x36, r24	; 54
}
 4d2:	08 95       	ret

000004d4 <i2c_write>:
/*******************************************
** WRITE/SEND 1 BYTE OF I2C COMMUNICATION **
*******************************************/
void i2c_write(unsigned char data)
{
	TWDR = data;
 4d4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 4d6:	84 e8       	ldi	r24, 0x84	; 132
 4d8:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
 4da:	06 b6       	in	r0, 0x36	; 54
 4dc:	07 fe       	sbrs	r0, 7
 4de:	fd cf       	rjmp	.-6      	; 0x4da <i2c_write+0x6>
	{
	}
}
 4e0:	08 95       	ret

000004e2 <i2c_read>:
/**********************************************
** READ/RECEIVE BYTE(S) OF I2C COMMUNICATION **
**********************************************/
unsigned char i2c_read(unsigned char isLast)
{
	if(isLast == 0 )
 4e2:	88 23       	and	r24, r24
 4e4:	11 f4       	brne	.+4      	; 0x4ea <i2c_read+0x8>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);	// to next receive byte
 4e6:	84 ec       	ldi	r24, 0xC4	; 196
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <i2c_read+0xa>
	}
	else
	{
		TWCR = (1<<TWINT)|(1<<TWEN);			// to end of communication
 4ea:	84 e8       	ldi	r24, 0x84	; 132
 4ec:	86 bf       	out	0x36, r24	; 54
	}
	
	while((TWCR & (1<<TWINT)) == 0)
 4ee:	06 b6       	in	r0, 0x36	; 54
 4f0:	07 fe       	sbrs	r0, 7
 4f2:	fd cf       	rjmp	.-6      	; 0x4ee <i2c_read+0xc>
	{
	}
	return TWDR;
 4f4:	83 b1       	in	r24, 0x03	; 3
}
 4f6:	08 95       	ret

000004f8 <LCD_EXECUTE_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_EXECUTE_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
 4f8:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 4fa:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 4fc:	87 ff       	sbrs	r24, 7
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <LCD_EXECUTE_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 500:	d8 9a       	sbi	0x1b, 0	; 27
 502:	01 c0       	rjmp	.+2      	; 0x506 <LCD_EXECUTE_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
 504:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 506:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 508:	9f 5f       	subi	r25, 0xFF	; 255
 50a:	98 30       	cpi	r25, 0x08	; 8
 50c:	11 f0       	breq	.+4      	; 0x512 <LCD_EXECUTE_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 50e:	88 0f       	add	r24, r24
 510:	f4 cf       	rjmp	.-24     	; 0x4fa <LCD_EXECUTE_COMMAND+0x2>
	}
//update from down comment
	LCD_REGSELECT_low();	// RS = 0
 512:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 514:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 516:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
	LCD_RCK_low();
 518:	da 98       	cbi	0x1b, 2	; 27
 51a:	88 ea       	ldi	r24, 0xA8	; 168
 51c:	92 e0       	ldi	r25, 0x02	; 2
 51e:	fc 01       	movw	r30, r24
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <LCD_EXECUTE_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 524:	da 9a       	sbi	0x1b, 2	; 27
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <LCD_EXECUTE_COMMAND+0x2e>
	LCD_REGSELECT_low();	// RS = 0
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);			//rcall 180 us
*/
	LCD_ENABLE_low();		// EN = 0
 52a:	db 98       	cbi	0x1b, 3	; 27
 52c:	80 e9       	ldi	r24, 0x90	; 144
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <LCD_EXECUTE_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us

}
 534:	08 95       	ret

00000536 <LCD_CLEAR_CONTAINS>:
/**************************************
** CLEAR ALL CONTAINS ON LCD DISPLAY **
**************************************/
void LCD_CLEAR_CONTAINS()
{
	LCD_EXECUTE_COMMAND(LCD_CLEAR);						// 0b00000001	// 1. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
 53c:	80 ec       	ldi	r24, 0xC0	; 192
 53e:	92 e1       	ldi	r25, 0x12	; 18
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_CLEAR_CONTAINS+0xa>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
}
 544:	08 95       	ret

00000546 <LCD_INIT>:
/**********************************
** INITIZLIZATION OF LCD DISPLAY **
**********************************/
void LCD_INIT()
{
	LCD_EXECUTE_COMMAND(LCD_8BIT_2ROWS_FONT5X7);		// 0b00111000	// 2. Function set: 8-bit interface data (DL = 1), 2-line display (N = 1), 5 x 7 dot character font (F = 0)
 546:	88 e3       	ldi	r24, 0x38	; 56
 548:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_EXECUTE_COMMAND(LCD_ON_BLINK_CURSOR);			// 0b00001111	// 3. Display on/off control: Display on (D = 1), Cursor on (C = 1), Blinking on (B = 1)
 54c:	8f e0       	ldi	r24, 0x0F	; 15
 54e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_EXECUTE_COMMAND(LCD_ENTRY_MODE_INC_NOSHIFT);	// 0b00000110	// 4. Entry mode set: Increment by 1 (I/D = 1), No shift (S = 0)
 552:	86 e0       	ldi	r24, 0x06	; 6
 554:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_EXECUTE_COMMAND(LCD_MOVE_FIRST);
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_EXECUTE_COMMAND(LCD_CLEAR);						// 0b00000001	// 1. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	92 e1       	ldi	r25, 0x12	; 18
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <LCD_INIT+0x22>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
}
 56c:	08 95       	ret

0000056e <LCD_EXECUTE_DATA>:

/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	a8 ea       	ldi	r26, 0xA8	; 168
 578:	b2 e0       	ldi	r27, 0x02	; 2
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];
 57a:	c0 e9       	ldi	r28, 0x90	; 144
 57c:	d1 e0       	ldi	r29, 0x01	; 1
 57e:	22 c0       	rjmp	.+68     	; 0x5c4 <LCD_EXECUTE_DATA+0x56>
 580:	fc 01       	movw	r30, r24
 582:	e4 0f       	add	r30, r20
 584:	f5 1f       	adc	r31, r21
 586:	e0 81       	ld	r30, Z
 588:	20 e0       	ldi	r18, 0x00	; 0

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
 58a:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 58c:	e7 ff       	sbrs	r30, 7
 58e:	02 c0       	rjmp	.+4      	; 0x594 <LCD_EXECUTE_DATA+0x26>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 590:	d8 9a       	sbi	0x1b, 0	; 27
 592:	01 c0       	rjmp	.+2      	; 0x596 <LCD_EXECUTE_DATA+0x28>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 594:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
 596:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 598:	2f 5f       	subi	r18, 0xFF	; 255
 59a:	28 30       	cpi	r18, 0x08	; 8
 59c:	11 f0       	breq	.+4      	; 0x5a2 <LCD_EXECUTE_DATA+0x34>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 59e:	ee 0f       	add	r30, r30
 5a0:	f4 cf       	rjmp	.-24     	; 0x58a <LCD_EXECUTE_DATA+0x1c>
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
 5a2:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
 5a4:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
 5a6:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
 5a8:	da 98       	cbi	0x1b, 2	; 27
 5aa:	fd 01       	movw	r30, r26
 5ac:	31 97       	sbiw	r30, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <LCD_EXECUTE_DATA+0x3e>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
 5b0:	da 9a       	sbi	0x1b, 2	; 27
 5b2:	fd 01       	movw	r30, r26
 5b4:	31 97       	sbiw	r30, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <LCD_EXECUTE_DATA+0x46>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
 5b8:	db 98       	cbi	0x1b, 3	; 27
 5ba:	fe 01       	movw	r30, r28
 5bc:	31 97       	sbiw	r30, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <LCD_EXECUTE_DATA+0x4e>
/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
 5c0:	4f 5f       	subi	r20, 0xFF	; 255
 5c2:	5f 4f       	sbci	r21, 0xFF	; 255
 5c4:	46 17       	cp	r20, r22
 5c6:	57 07       	cpc	r21, r23
 5c8:	dc f2       	brlt	.-74     	; 0x580 <LCD_EXECUTE_DATA+0x12>
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}

//	LCD_EXECUTE_DATA_LAST();	// flush -> posleden simvol ili gore v cikala count_ns < numsymbols+1 ili count_ns <= numsymbols
}
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

000005d0 <LCD_EXECUTE_DATA_ONE>:

/************************************************
** WRITE/TRANSMIT ONE DATA BYTE TO LCD DISPLAY **
************************************************/
void LCD_EXECUTE_DATA_ONE(unsigned char data)	// HELP: LCD_EXECUTE_DATA(unsigned char data_byte_symbols) // LCD shift left out, msb is first
{
 5d0:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 5d2:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 5d4:	87 ff       	sbrs	r24, 7
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <LCD_EXECUTE_DATA_ONE+0xc>
		{
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 5d8:	d8 9a       	sbi	0x1b, 0	; 27
 5da:	01 c0       	rjmp	.+2      	; 0x5de <LCD_EXECUTE_DATA_ONE+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 5dc:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 5de:	d9 9a       	sbi	0x1b, 1	; 27
{
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 5e0:	9f 5f       	subi	r25, 0xFF	; 255
 5e2:	98 30       	cpi	r25, 0x08	; 8
 5e4:	11 f0       	breq	.+4      	; 0x5ea <LCD_EXECUTE_DATA_ONE+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 5e6:	88 0f       	add	r24, r24
 5e8:	f4 cf       	rjmp	.-24     	; 0x5d2 <LCD_EXECUTE_DATA_ONE+0x2>
	}
//update from down comment
	LCD_REGSELECT_high();	// RS = 1
 5ea:	dd 9a       	sbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 5ec:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 5ee:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment

	LCD_RCK_low();
 5f0:	da 98       	cbi	0x1b, 2	; 27
 5f2:	88 ea       	ldi	r24, 0xA8	; 168
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	fc 01       	movw	r30, r24
 5f8:	31 97       	sbiw	r30, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_EXECUTE_DATA_ONE+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 5fc:	da 9a       	sbi	0x1b, 2	; 27
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <LCD_EXECUTE_DATA_ONE+0x2e>
	LCD_REGSELECT_high();	// RS = 1
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);
*/
	LCD_ENABLE_low();		// EN = 0
 602:	db 98       	cbi	0x1b, 3	; 27
 604:	80 e9       	ldi	r24, 0x90	; 144
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <LCD_EXECUTE_DATA_ONE+0x38>
	_delay_us(100);
}
 60c:	08 95       	ret

0000060e <LCD_EXECUTE_DATA_LAST>:
/*****************************************************************************
** WRITE/TRANSMIT LAST DATA BYTE TO LCD DISPLAY AND FLUSH SN74HC595 BUFFER  **
*****************************************************************************/
void LCD_EXECUTE_DATA_LAST()	// flush -> izchistvane na bufer - prinuditelno izpisvane na posleden simvol
{
	LCD_ENABLE_low();
 60e:	db 98       	cbi	0x1b, 3	; 27
	LCD_READWRITE_low();
 610:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
 612:	dd 9a       	sbi	0x1b, 5	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 614:	85 ed       	ldi	r24, 0xD5	; 213
 616:	98 2f       	mov	r25, r24
 618:	9a 95       	dec	r25
 61a:	f1 f7       	brne	.-4      	; 0x618 <LCD_EXECUTE_DATA_LAST+0xa>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
	LCD_ENABLE_high();
 61c:	db 9a       	sbi	0x1b, 3	; 27
	LCD_READWRITE_low();
 61e:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
 620:	dd 9a       	sbi	0x1b, 5	; 27
 622:	8a 95       	dec	r24
 624:	f1 f7       	brne	.-4      	; 0x622 <LCD_EXECUTE_DATA_LAST+0x14>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
}
 626:	08 95       	ret

00000628 <lcdDataString>:

/*********************************************************
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void lcdDataString(char *data)
{
 628:	fc 01       	movw	r30, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 62a:	28 ea       	ldi	r18, 0xA8	; 168
 62c:	32 e0       	ldi	r19, 0x02	; 2
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
 62e:	40 e9       	ldi	r20, 0x90	; 144
 630:	51 e0       	ldi	r21, 0x01	; 1
 632:	1d c0       	rjmp	.+58     	; 0x66e <lcdDataString+0x46>
 634:	90 e0       	ldi	r25, 0x00	; 0
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
 636:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 638:	87 ff       	sbrs	r24, 7
 63a:	02 c0       	rjmp	.+4      	; 0x640 <lcdDataString+0x18>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 63c:	d8 9a       	sbi	0x1b, 0	; 27
 63e:	01 c0       	rjmp	.+2      	; 0x642 <lcdDataString+0x1a>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 640:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
 642:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	98 30       	cpi	r25, 0x08	; 8
 648:	11 f0       	breq	.+4      	; 0x64e <lcdDataString+0x26>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 64a:	88 0f       	add	r24, r24
 64c:	f4 cf       	rjmp	.-24     	; 0x636 <lcdDataString+0xe>
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;
 64e:	31 96       	adiw	r30, 0x01	; 1
			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
 650:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
 652:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
 654:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
 656:	da 98       	cbi	0x1b, 2	; 27
 658:	c9 01       	movw	r24, r18
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <lcdDataString+0x32>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
 65e:	da 9a       	sbi	0x1b, 2	; 27
 660:	c9 01       	movw	r24, r18
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <lcdDataString+0x3a>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
 666:	db 98       	cbi	0x1b, 3	; 27
 668:	ca 01       	movw	r24, r20
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <lcdDataString+0x42>
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void lcdDataString(char *data)
{
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
 66e:	80 81       	ld	r24, Z
 670:	88 23       	and	r24, r24
 672:	01 f7       	brne	.-64     	; 0x634 <lcdDataString+0xc>
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}
}
 674:	08 95       	ret

00000676 <LCD_CGRAM_CUSTOM_SYMBOLS>:
	 { 0x0E, 0x1B, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },	// Battery Charging  80%	// addr40-47
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
	for(rows=0; rows<7; rows++)
 67a:	10 92 07 01 	sts	0x0107, r1
 67e:	10 92 06 01 	sts	0x0106, r1
 682:	25 c0       	rjmp	.+74     	; 0x6ce <LCD_CGRAM_CUSTOM_SYMBOLS+0x58>
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
 684:	08 96       	adiw	r24, 0x08	; 8
 686:	88 0f       	add	r24, r24
 688:	88 0f       	add	r24, r24
 68a:	88 0f       	add	r24, r24
 68c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_EXECUTE_COMMAND>
 690:	c0 e0       	ldi	r28, 0x00	; 0
 692:	d0 e0       	ldi	r29, 0x00	; 0
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
 694:	e0 91 06 01 	lds	r30, 0x0106
 698:	f0 91 07 01 	lds	r31, 0x0107
 69c:	83 e0       	ldi	r24, 0x03	; 3
 69e:	ee 0f       	add	r30, r30
 6a0:	ff 1f       	adc	r31, r31
 6a2:	8a 95       	dec	r24
 6a4:	e1 f7       	brne	.-8      	; 0x69e <LCD_CGRAM_CUSTOM_SYMBOLS+0x28>
 6a6:	ec 0f       	add	r30, r28
 6a8:	fd 1f       	adc	r31, r29
 6aa:	e3 54       	subi	r30, 0x43	; 67
 6ac:	ff 4f       	sbci	r31, 0xFF	; 255
 6ae:	80 81       	ld	r24, Z
 6b0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_EXECUTE_DATA_ONE>
void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
 6b4:	21 96       	adiw	r28, 0x01	; 1
 6b6:	c8 30       	cpi	r28, 0x08	; 8
 6b8:	d1 05       	cpc	r29, r1
 6ba:	61 f7       	brne	.-40     	; 0x694 <LCD_CGRAM_CUSTOM_SYMBOLS+0x1e>
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
 6bc:	80 91 06 01 	lds	r24, 0x0106
 6c0:	90 91 07 01 	lds	r25, 0x0107
 6c4:	01 96       	adiw	r24, 0x01	; 1
 6c6:	90 93 07 01 	sts	0x0107, r25
 6ca:	80 93 06 01 	sts	0x0106, r24
 6ce:	80 91 06 01 	lds	r24, 0x0106
 6d2:	90 91 07 01 	lds	r25, 0x0107
 6d6:	87 30       	cpi	r24, 0x07	; 7
 6d8:	91 05       	cpc	r25, r1
 6da:	a4 f2       	brlt	.-88     	; 0x684 <LCD_CGRAM_CUSTOM_SYMBOLS+0xe>
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
		}
	}
}
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <lcdDataInt>:
/******************************************************
** WRITE/TRANSMIT MORE DATA INT BYTES TO LCD DISPLAY **
******************************************************/
// USE THIS: lcdDataInt( (int)k + 1 );
void lcdDataInt(int data)		// void lcdDataInt(const int data)
{
 6e2:	df 93       	push	r29
 6e4:	cf 93       	push	r28
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
 6ea:	2a 97       	sbiw	r28, 0x0a	; 10
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	de bf       	out	0x3e, r29	; 62
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	lcdDataString(itoa(data, buffer, 10));	// 10 -> DECIMAL
 6f6:	be 01       	movw	r22, r28
 6f8:	6f 5f       	subi	r22, 0xFF	; 255
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	4a e0       	ldi	r20, 0x0A	; 10
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	0e 94 12 05 	call	0xa24	; 0xa24 <itoa>
 704:	0e 94 14 03 	call	0x628	; 0x628 <lcdDataString>
}
 708:	2a 96       	adiw	r28, 0x0a	; 10
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
 714:	cf 91       	pop	r28
 716:	df 91       	pop	r29
 718:	08 95       	ret

0000071a <PGA2310_Volume_Update>:

/*************************************
** DEFINITION PGA2310 VOLUME UPDATE **
*************************************/
void PGA2310_Volume_Update(unsigned char pgaVolumeLeft, unsigned char pgaVolumeRight)
{
 71a:	0f 93       	push	r16
 71c:	1f 93       	push	r17
 71e:	18 2f       	mov	r17, r24
 720:	06 2f       	mov	r16, r22
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 722:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 724:	0e 94 94 04 	call	0x928	; 0x928 <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 728:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 72a:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 72c:	81 2f       	mov	r24, r17
 72e:	60 2f       	mov	r22, r16
 730:	0e 94 94 04 	call	0x928	; 0x928 <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 734:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA7 - /SS ENABLE
 736:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 738:	81 2f       	mov	r24, r17
 73a:	60 2f       	mov	r22, r16
 73c:	0e 94 94 04 	call	0x928	; 0x928 <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 740:	df 9a       	sbi	0x1b, 7	; 27
}
 742:	1f 91       	pop	r17
 744:	0f 91       	pop	r16
 746:	08 95       	ret

00000748 <pga2310_init>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_init()
{
	spi_init();
 748:	0e 94 83 04 	call	0x906	; 0x906 <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 74c:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	0e 94 94 04 	call	0x928	; 0x928 <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 756:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 758:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	0e 94 94 04 	call	0x928	; 0x928 <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 762:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 764:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	0e 94 94 04 	call	0x928	; 0x928 <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 76e:	df 9a       	sbi	0x1b, 7	; 27
}
 770:	08 95       	ret

00000772 <pga2310_reset>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_reset()
{
	spi_init();
 772:	0e 94 83 04 	call	0x906	; 0x906 <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 776:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	0e 94 94 04 	call	0x928	; 0x928 <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 780:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 782:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	0e 94 94 04 	call	0x928	; 0x928 <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 78c:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 78e:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	0e 94 94 04 	call	0x928	; 0x928 <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 798:	df 9a       	sbi	0x1b, 7	; 27
}
 79a:	08 95       	ret

0000079c <uart_init>:
{

	// Razpoznavane na baudrate (skorost): 1. Izprashta se byte. 2. Poluchava se byte. 3. Sravnqva se polucheniq byte == izprateniq byte. // This is LOOP TX->RX
	// 4. Ako byte pri sravnqvaneto e edin i sasht to skorostta e izbranata v momenta, ako byte e razlichen - da se probva sas sledvashta baudrate.

	UBRRL = 103;			// Baudrate: 9600; Parity: 0; StopBits: 1 (Error = 0.2%; 16MHz)
 79c:	87 e6       	ldi	r24, 0x67	; 103
 79e:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
 7a0:	10 bc       	out	0x20, r1	; 32

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
 7a2:	86 e8       	ldi	r24, 0x86	; 134
 7a4:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0b10011000;		// TXEN,RXEN,RXCIE					// Enable Uart/Usart TX and RX
 7a6:	88 e9       	ldi	r24, 0x98	; 152
 7a8:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
 7aa:	1c b8       	out	0x0c, r1	; 12
}
 7ac:	08 95       	ret

000007ae <uart_setup>:
			
		}
	}

//	UBRRL = 103;			// Baudrate: 9600; Parity: 0; StopBits: 1 (Error = 0.2%; 16MHz)
	UBRRH = 0;
 7ae:	10 bc       	out	0x20, r1	; 32

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
 7b0:	86 e8       	ldi	r24, 0x86	; 134
 7b2:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0b10011000;		// TXEN,RXEN,RXCIE					// Enable Uart/Usart TX and RX
 7b4:	88 e9       	ldi	r24, 0x98	; 152
 7b6:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
 7b8:	1c b8       	out	0x0c, r1	; 12
}
 7ba:	08 95       	ret

000007bc <uart_transmit>:

/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
 7bc:	ac 01       	movw	r20, r24
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <uart_transmit+0x1a>
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		//UDR = uart_data[count_ns];
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 7c4:	5d 9b       	sbis	0x0b, 5	; 11
 7c6:	fe cf       	rjmp	.-4      	; 0x7c4 <uart_transmit+0x8>
		{
		}
		UDR = uart_data[count_ns];
 7c8:	fa 01       	movw	r30, r20
 7ca:	e2 0f       	add	r30, r18
 7cc:	f3 1f       	adc	r31, r19
 7ce:	80 81       	ld	r24, Z
 7d0:	8c b9       	out	0x0c, r24	; 12
/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
 7d2:	2f 5f       	subi	r18, 0xFF	; 255
 7d4:	3f 4f       	sbci	r19, 0xFF	; 255
 7d6:	26 17       	cp	r18, r22
 7d8:	37 07       	cpc	r19, r23
 7da:	a4 f3       	brlt	.-24     	; 0x7c4 <uart_transmit+0x8>
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
		{
		}
		UDR = uart_data[count_ns];
	}
}
 7dc:	08 95       	ret

000007de <uart_transmit_one>:
/***************************************
** TRANSMIT/SEND 1 BYTE OF UART/USART **
***************************************/
void uart_transmit_one(unsigned char uart_data)
{
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 7de:	5d 9b       	sbis	0x0b, 5	; 11
 7e0:	fe cf       	rjmp	.-4      	; 0x7de <uart_transmit_one>
	{
	}
	UDR = uart_data;
 7e2:	8c b9       	out	0x0c, r24	; 12
}
 7e4:	08 95       	ret

000007e6 <uart_transmit_DEC_to_BCD>:

/*****************************************************************		// NOT FINISHED
** TRANSMIT/SEND 1 BYTE CONVERTED FROM DEC TO BCD OF UART/USART **		// NOT FINISHED
*****************************************************************/		// NOT FINISHED
void uart_transmit_DEC_to_BCD(unsigned char dec_to_bcd_data)
{// pravi se preobrazuvane ot DEC to BCD i preobrazuvane za izvejdane na parviq simvol s filtar
 7e6:	98 2f       	mov	r25, r24
	
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 7e8:	5d 9b       	sbis	0x0b, 5	; 11
 7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <uart_transmit_DEC_to_BCD+0x2>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data>>4));
 7ec:	89 2f       	mov	r24, r25
 7ee:	82 95       	swap	r24
 7f0:	8f 70       	andi	r24, 0x0F	; 15
 7f2:	80 5d       	subi	r24, 0xD0	; 208
 7f4:	8c b9       	out	0x0c, r24	; 12

	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 7f6:	5d 9b       	sbis	0x0b, 5	; 11
 7f8:	fe cf       	rjmp	.-4      	; 0x7f6 <uart_transmit_DEC_to_BCD+0x10>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data & 0x0F));
 7fa:	9f 70       	andi	r25, 0x0F	; 15
 7fc:	90 5d       	subi	r25, 0xD0	; 208
 7fe:	9c b9       	out	0x0c, r25	; 12
	byte bcdToDec(byte val)
	{
  		return ( (val/16*10) + (val%16) );
	}
*/
}
 800:	08 95       	ret

00000802 <transmitUart>:
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
 802:	5d 9b       	sbis	0x0b, 5	; 11
 804:	fe cf       	rjmp	.-4      	; 0x802 <transmitUart>
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
 806:	8c b9       	out	0x0c, r24	; 12
}
 808:	08 95       	ret

0000080a <transmitUartString>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
 80a:	fc 01       	movw	r30, r24
 80c:	04 c0       	rjmp	.+8      	; 0x816 <transmitUartString+0xc>
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
 80e:	5d 9b       	sbis	0x0b, 5	; 11
 810:	fe cf       	rjmp	.-4      	; 0x80e <transmitUartString+0x4>
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
	{
		transmitUart(*data++);
 812:	31 96       	adiw	r30, 0x01	; 1
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
 814:	8c b9       	out	0x0c, r24	; 12
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
 816:	80 81       	ld	r24, Z
 818:	88 23       	and	r24, r24
 81a:	c9 f7       	brne	.-14     	; 0x80e <transmitUartString+0x4>
	{
		transmitUart(*data++);
	}
}
 81c:	08 95       	ret

0000081e <receiveUart>:
/**************************************************		// NOT FINISHED
** RECEIVE/READ unsigned char BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
unsigned char receiveUart(void)
{
	while (!(UCSRA & (1<<RXC)))
 81e:	5f 9b       	sbis	0x0b, 7	; 11
 820:	fe cf       	rjmp	.-4      	; 0x81e <receiveUart>
	{};							/* Wait for data to be received */
	return UDR;					/* Get and return received data from buffer */
 822:	8c b1       	in	r24, 0x0c	; 12
}
 824:	08 95       	ret

00000826 <transmitUartLong>:
/******************************************		// NOT FINISHED
** TRANSMIT/SEND long BYTE OF UART/USART **		// NOT FINISHED
******************************************/		// NOT FINISHED
// USE THIS: transmitUartLong( (long)k + 1 );
void transmitUartLong(long data)		// void transmitUartLong(const long data)
{
 826:	df 93       	push	r29
 828:	cf 93       	push	r28
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	2a 97       	sbiw	r28, 0x0a	; 10
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	f8 94       	cli
 834:	de bf       	out	0x3e, r29	; 62
 836:	0f be       	out	0x3f, r0	; 63
 838:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ltoa(data, buffer, 10));		// 10 -> DECIMAL
 83a:	ae 01       	movw	r20, r28
 83c:	4f 5f       	subi	r20, 0xFF	; 255
 83e:	5f 4f       	sbci	r21, 0xFF	; 255
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	0e 94 33 05 	call	0xa66	; 0xa66 <ltoa>
 848:	0e 94 05 04 	call	0x80a	; 0x80a <transmitUartString>
}
 84c:	2a 96       	adiw	r28, 0x0a	; 10
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	f8 94       	cli
 852:	de bf       	out	0x3e, r29	; 62
 854:	0f be       	out	0x3f, r0	; 63
 856:	cd bf       	out	0x3d, r28	; 61
 858:	cf 91       	pop	r28
 85a:	df 91       	pop	r29
 85c:	08 95       	ret

0000085e <transmitUartULong>:
/***************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned long BYTE OF UART/USART **		// NOT FINISHED
***************************************************/		// NOT FINISHED
// USE THIS: transmitUartULong( (unsigned long)k + 1 );
void transmitUartULong(unsigned long data)		// void transmitUartULong(const unsigned long data)
{
 85e:	df 93       	push	r29
 860:	cf 93       	push	r28
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
 866:	2a 97       	sbiw	r28, 0x0a	; 10
 868:	0f b6       	in	r0, 0x3f	; 63
 86a:	f8 94       	cli
 86c:	de bf       	out	0x3e, r29	; 62
 86e:	0f be       	out	0x3f, r0	; 63
 870:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ultoa(data, buffer, 10));		// 10 -> DECIMAL
 872:	ae 01       	movw	r20, r28
 874:	4f 5f       	subi	r20, 0xFF	; 255
 876:	5f 4f       	sbci	r21, 0xFF	; 255
 878:	2a e0       	ldi	r18, 0x0A	; 10
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	0e 94 67 05 	call	0xace	; 0xace <ultoa>
 880:	0e 94 05 04 	call	0x80a	; 0x80a <transmitUartString>
}
 884:	2a 96       	adiw	r28, 0x0a	; 10
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	f8 94       	cli
 88a:	de bf       	out	0x3e, r29	; 62
 88c:	0f be       	out	0x3f, r0	; 63
 88e:	cd bf       	out	0x3d, r28	; 61
 890:	cf 91       	pop	r28
 892:	df 91       	pop	r29
 894:	08 95       	ret

00000896 <transmitUartInt>:
/*****************************************		// NOT FINISHED
** TRANSMIT/SEND int BYTE OF UART/USART **		// NOT FINISHED
*****************************************/		// NOT FINISHED
// USE THIS: transmitUartInt( (int)k + 1 );
void transmitUartInt(int data)		// void transmitUartInt(const int data)
{
 896:	df 93       	push	r29
 898:	cf 93       	push	r28
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	2a 97       	sbiw	r28, 0x0a	; 10
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(itoa(data, buffer, 10));		// 10 -> DECIMAL
 8aa:	be 01       	movw	r22, r28
 8ac:	6f 5f       	subi	r22, 0xFF	; 255
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	4a e0       	ldi	r20, 0x0A	; 10
 8b2:	50 e0       	ldi	r21, 0x00	; 0
 8b4:	0e 94 12 05 	call	0xa24	; 0xa24 <itoa>
 8b8:	0e 94 05 04 	call	0x80a	; 0x80a <transmitUartString>
}
 8bc:	2a 96       	adiw	r28, 0x0a	; 10
 8be:	0f b6       	in	r0, 0x3f	; 63
 8c0:	f8 94       	cli
 8c2:	de bf       	out	0x3e, r29	; 62
 8c4:	0f be       	out	0x3f, r0	; 63
 8c6:	cd bf       	out	0x3d, r28	; 61
 8c8:	cf 91       	pop	r28
 8ca:	df 91       	pop	r29
 8cc:	08 95       	ret

000008ce <transmitUartUInt>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned int BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: transmitUartUInt( (unsigned int)k + 1 );
void transmitUartUInt(unsigned int data)		// void transmitUartUInt(const unsigned int data)
{
 8ce:	df 93       	push	r29
 8d0:	cf 93       	push	r28
 8d2:	cd b7       	in	r28, 0x3d	; 61
 8d4:	de b7       	in	r29, 0x3e	; 62
 8d6:	2a 97       	sbiw	r28, 0x0a	; 10
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	f8 94       	cli
 8dc:	de bf       	out	0x3e, r29	; 62
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(utoa(data, buffer, 10));		// 10 -> DECIMAL
 8e2:	be 01       	movw	r22, r28
 8e4:	6f 5f       	subi	r22, 0xFF	; 255
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	4a e0       	ldi	r20, 0x0A	; 10
 8ea:	50 e0       	ldi	r21, 0x00	; 0
 8ec:	0e 94 8c 05 	call	0xb18	; 0xb18 <utoa>
 8f0:	0e 94 05 04 	call	0x80a	; 0x80a <transmitUartString>
}
 8f4:	2a 96       	adiw	r28, 0x0a	; 10
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	f8 94       	cli
 8fa:	de bf       	out	0x3e, r29	; 62
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	cd bf       	out	0x3d, r28	; 61
 900:	cf 91       	pop	r28
 902:	df 91       	pop	r29
 904:	08 95       	ret

00000906 <spi_init>:
/**************************
** INITIZLIZATION OF SPI **
***************************/
void spi_init()
{
	SPSR = (0<<SPIF)|(0<<WCOL)|(0<<SPI2X);
 906:	1e b8       	out	0x0e, r1	; 14
//	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);			//0b01010010	// SPR1   = 1 - 16 000 000 / 64  = 250 000 = 250kHz  // KOMENTAR ZARADI SIMULACIQTA - PROTEUS BLOKIRANE ZARADI BIT V REGISTAR
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz	 // KAKVA KOMBINACIQ OT 4-te BITa VODI DO RAZBLOKIRANETO ???
 908:	83 e5       	ldi	r24, 0x53	; 83
 90a:	8d b9       	out	0x0d, r24	; 13
	SPDR = 0b00000000;
 90c:	1f b8       	out	0x0f, r1	; 15

	PGA2310_U8_SPI_CS_high();	// /SS - DISABLE
	PGA2310_U8_SPI(0b00000000, 0b00000000);
	*/

	SPCR = (0<<SPE);
 90e:	1d b8       	out	0x0d, r1	; 13
}
 910:	08 95       	ret

00000912 <spi_start>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 912:	83 e5       	ldi	r24, 0x53	; 83
 914:	8d b9       	out	0x0d, r24	; 13
}
 916:	08 95       	ret

00000918 <spi_stop>:
/**************************************
** DEFINITION SPI FUNCTION STOP ONLY **
**************************************/
void spi_stop()
{
	SPCR = (0<<SPE);
 918:	1d b8       	out	0x0d, r1	; 13
}
 91a:	08 95       	ret

0000091c <spi_write_one_byte>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 91c:	93 e5       	ldi	r25, 0x53	; 83
 91e:	9d b9       	out	0x0d, r25	; 13
void spi_write_one_byte(unsigned char data)	// void PGA2310_U7_SPI(byte volume_left, byte volume_right)	//PGA2310_U7_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data;				//volume_right;
 920:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
 922:	77 9b       	sbis	0x0e, 7	; 14
 924:	fe cf       	rjmp	.-4      	; 0x922 <spi_write_one_byte+0x6>
	{
	}
}
 926:	08 95       	ret

00000928 <spi_write_two_bytes>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 928:	93 e5       	ldi	r25, 0x53	; 83
 92a:	9d b9       	out	0x0d, r25	; 13
void spi_write_two_bytes(unsigned char data1, unsigned char data2)	// void PGA2310_U6_SPI(byte volume_left, byte volume_right)	//PGA2310_U6_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data1;				//volume_left;
 92c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
 92e:	77 9b       	sbis	0x0e, 7	; 14
 930:	fe cf       	rjmp	.-4      	; 0x92e <spi_write_two_bytes+0x6>
	{
	}

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data2;				//volume_right;
 932:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)))
 934:	77 9b       	sbis	0x0e, 7	; 14
 936:	fe cf       	rjmp	.-4      	; 0x934 <spi_write_two_bytes+0xc>
	{
	}
}
 938:	08 95       	ret

0000093a <spi_write_more_bytes>:

/*********************************************
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
 93a:	fc 01       	movw	r30, r24
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 93c:	93 e5       	ldi	r25, 0x53	; 83
 93e:	06 c0       	rjmp	.+12     	; 0x94c <spi_write_more_bytes+0x12>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
 940:	31 96       	adiw	r30, 0x01	; 1
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 942:	9d b9       	out	0x0d, r25	; 13
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
	{
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
		spi_start();
		SPDR = *data;			//volume_left;
 944:	80 81       	ld	r24, Z
 946:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)))
 948:	77 9b       	sbis	0x0e, 7	; 14
 94a:	fe cf       	rjmp	.-4      	; 0x948 <spi_write_more_bytes+0xe>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
 94c:	80 81       	ld	r24, Z
 94e:	88 23       	and	r24, r24
 950:	b9 f7       	brne	.-18     	; 0x940 <spi_write_more_bytes+0x6>
		SPDR = *data;			//volume_left;
		while(!(SPSR & (1<<SPIF)))
		{
		}
	}
}
 952:	08 95       	ret

00000954 <spi_read_more_bytes>:
unsigned char spi_read_more_bytes()	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
	unsigned char data = 0b00000000;
	//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data;			//volume_left;
 954:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)))
 956:	77 9b       	sbis	0x0e, 7	; 14
 958:	fe cf       	rjmp	.-4      	; 0x956 <spi_read_more_bytes+0x2>
	{
	}
	return data;
}
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	08 95       	ret

0000095e <decToBcd>:

/**************************************************************
**** CONVERT NORMAL DECIMAL NUMBERS TO BINARY CODED DECIMAL ***
**************************************************************/
unsigned char decToBcd(unsigned char val)
{
 95e:	48 2f       	mov	r20, r24
 960:	6a e0       	ldi	r22, 0x0A	; 10
 962:	0e 94 06 05 	call	0xa0c	; 0xa0c <__udivmodqi4>
 966:	28 2f       	mov	r18, r24
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	84 e0       	ldi	r24, 0x04	; 4
 96c:	22 0f       	add	r18, r18
 96e:	33 1f       	adc	r19, r19
 970:	8a 95       	dec	r24
 972:	e1 f7       	brne	.-8      	; 0x96c <decToBcd+0xe>
 974:	84 2f       	mov	r24, r20
 976:	0e 94 06 05 	call	0xa0c	; 0xa0c <__udivmodqi4>
	return ( (val/10*16) + (val%10) );	// Get DEC format -> convert DEC to HEX
}
 97a:	89 2f       	mov	r24, r25
 97c:	82 0f       	add	r24, r18
 97e:	08 95       	ret

00000980 <bcdToDec>:

/**************************************************************
**** CONVERT BINARY CODED DECIMAL TO NORMAL DECIMAL NUMBERS ***
**************************************************************/
unsigned char bcdToDec(unsigned char val)
{
 980:	28 2f       	mov	r18, r24
 982:	22 95       	swap	r18
 984:	2f 70       	andi	r18, 0x0F	; 15
 986:	9a e0       	ldi	r25, 0x0A	; 10
 988:	29 9f       	mul	r18, r25
 98a:	90 01       	movw	r18, r0
 98c:	11 24       	eor	r1, r1
 98e:	8f 70       	andi	r24, 0x0F	; 15
	return ( (val/16*10) + (val%16) );	// Get HEX format -> convert HEX to DEC
}
 990:	82 0f       	add	r24, r18
 992:	08 95       	ret

00000994 <shiftRightOutLsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
 994:	a0 9a       	sbi	0x14, 0	; 20
 996:	94 e4       	ldi	r25, 0x44	; 68
 998:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regALSB & 0x01)	// maska & za log "1" na LSB 0b00000001
 99a:	90 ff       	sbrs	r25, 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <shiftRightOutLsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v LSB
 99e:	a8 9a       	sbi	0x15, 0	; 21
 9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <shiftRightOutLsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
 9a2:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 9a4:	8f 5f       	subi	r24, 0xFF	; 255
 9a6:	88 30       	cpi	r24, 0x08	; 8
 9a8:	11 f0       	breq	.+4      	; 0x9ae <shiftRightOutLsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
		}
		
		regALSB = regALSB >> 1;	// shiftvane na >> nadqsno
 9aa:	96 95       	lsr	r25
 9ac:	f6 cf       	rjmp	.-20     	; 0x99a <shiftRightOutLsbFirst+0x6>
 9ae:	08 95       	ret

000009b0 <shiftLeftOutMsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
 9b0:	a0 9a       	sbi	0x14, 0	; 20
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	84 e4       	ldi	r24, 0x44	; 68

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regAMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 9b6:	87 ff       	sbrs	r24, 7
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <shiftLeftOutMsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v MSB
 9ba:	a8 9a       	sbi	0x15, 0	; 21
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <shiftLeftOutMsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
 9be:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 9c0:	9f 5f       	subi	r25, 0xFF	; 255
 9c2:	98 30       	cpi	r25, 0x08	; 8
 9c4:	11 f0       	breq	.+4      	; 0x9ca <shiftLeftOutMsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
		}
		
		regAMSB = regAMSB << 1;	// shiftvane na << nalqvo
 9c6:	88 0f       	add	r24, r24
 9c8:	f6 cf       	rjmp	.-20     	; 0x9b6 <shiftLeftOutMsbFirst+0x6>
 9ca:	08 95       	ret

000009cc <shiftRightInLsbFirst>:
void shiftRightInLsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
 9cc:	a0 98       	cbi	0x14, 0	; 20
 9ce:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
 9d0:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 9d2:	8f 5f       	subi	r24, 0xFF	; 255
 9d4:	88 30       	cpi	r24, 0x08	; 8
 9d6:	e1 f7       	brne	.-8      	; 0x9d0 <shiftRightInLsbFirst+0x4>
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
	}

}
 9d8:	08 95       	ret

000009da <shiftLeftInMsbFirst>:
void shiftLeftInMsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
 9da:	a0 98       	cbi	0x14, 0	; 20
 9dc:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
 9de:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 9e0:	8f 5f       	subi	r24, 0xFF	; 255
 9e2:	88 30       	cpi	r24, 0x08	; 8
 9e4:	e1 f7       	brne	.-8      	; 0x9de <shiftLeftInMsbFirst+0x4>
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
	}

}
 9e6:	08 95       	ret

000009e8 <delay_ms>:

/*************************************************************
*********** FUNCTION SOFTWARE DELAY IN MILISECONDS ***********
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
 9e8:	40 e0       	ldi	r20, 0x00	; 0
 9ea:	50 e0       	ldi	r21, 0x00	; 0
 9ec:	0b c0       	rjmp	.+22     	; 0xa04 <delay_ms+0x1c>
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
 9ee:	20 e0       	ldi	r18, 0x00	; 0
 9f0:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(j=0;j<100;j++)
		{
		  asm("nop");
 9f2:	00 00       	nop
		  asm("nop");
 9f4:	00 00       	nop
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
	{
		for(j=0;j<100;j++)
 9f6:	2f 5f       	subi	r18, 0xFF	; 255
 9f8:	3f 4f       	sbci	r19, 0xFF	; 255
 9fa:	24 36       	cpi	r18, 0x64	; 100
 9fc:	31 05       	cpc	r19, r1
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <delay_ms+0xa>
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
 a00:	4f 5f       	subi	r20, 0xFF	; 255
 a02:	5f 4f       	sbci	r21, 0xFF	; 255
 a04:	48 17       	cp	r20, r24
 a06:	59 07       	cpc	r21, r25
 a08:	94 f3       	brlt	.-28     	; 0x9ee <delay_ms+0x6>
		{
		  asm("nop");
		  asm("nop");
		}
	}
}
 a0a:	08 95       	ret

00000a0c <__udivmodqi4>:
 a0c:	99 1b       	sub	r25, r25
 a0e:	79 e0       	ldi	r23, 0x09	; 9
 a10:	04 c0       	rjmp	.+8      	; 0xa1a <__udivmodqi4_ep>

00000a12 <__udivmodqi4_loop>:
 a12:	99 1f       	adc	r25, r25
 a14:	96 17       	cp	r25, r22
 a16:	08 f0       	brcs	.+2      	; 0xa1a <__udivmodqi4_ep>
 a18:	96 1b       	sub	r25, r22

00000a1a <__udivmodqi4_ep>:
 a1a:	88 1f       	adc	r24, r24
 a1c:	7a 95       	dec	r23
 a1e:	c9 f7       	brne	.-14     	; 0xa12 <__udivmodqi4_loop>
 a20:	80 95       	com	r24
 a22:	08 95       	ret

00000a24 <itoa>:
 a24:	fb 01       	movw	r30, r22
 a26:	9f 01       	movw	r18, r30
 a28:	e8 94       	clt
 a2a:	42 30       	cpi	r20, 0x02	; 2
 a2c:	c4 f0       	brlt	.+48     	; 0xa5e <itoa+0x3a>
 a2e:	45 32       	cpi	r20, 0x25	; 37
 a30:	b4 f4       	brge	.+44     	; 0xa5e <itoa+0x3a>
 a32:	4a 30       	cpi	r20, 0x0A	; 10
 a34:	29 f4       	brne	.+10     	; 0xa40 <itoa+0x1c>
 a36:	97 fb       	bst	r25, 7
 a38:	1e f4       	brtc	.+6      	; 0xa40 <itoa+0x1c>
 a3a:	90 95       	com	r25
 a3c:	81 95       	neg	r24
 a3e:	9f 4f       	sbci	r25, 0xFF	; 255
 a40:	64 2f       	mov	r22, r20
 a42:	77 27       	eor	r23, r23
 a44:	0e 94 b2 05 	call	0xb64	; 0xb64 <__udivmodhi4>
 a48:	80 5d       	subi	r24, 0xD0	; 208
 a4a:	8a 33       	cpi	r24, 0x3A	; 58
 a4c:	0c f0       	brlt	.+2      	; 0xa50 <itoa+0x2c>
 a4e:	89 5d       	subi	r24, 0xD9	; 217
 a50:	81 93       	st	Z+, r24
 a52:	cb 01       	movw	r24, r22
 a54:	00 97       	sbiw	r24, 0x00	; 0
 a56:	a1 f7       	brne	.-24     	; 0xa40 <itoa+0x1c>
 a58:	16 f4       	brtc	.+4      	; 0xa5e <itoa+0x3a>
 a5a:	5d e2       	ldi	r21, 0x2D	; 45
 a5c:	51 93       	st	Z+, r21
 a5e:	10 82       	st	Z, r1
 a60:	c9 01       	movw	r24, r18
 a62:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <strrev>

00000a66 <ltoa>:
 a66:	fa 01       	movw	r30, r20
 a68:	cf 93       	push	r28
 a6a:	ff 93       	push	r31
 a6c:	ef 93       	push	r30
 a6e:	22 30       	cpi	r18, 0x02	; 2
 a70:	44 f1       	brlt	.+80     	; 0xac2 <ltoa+0x5c>
 a72:	25 32       	cpi	r18, 0x25	; 37
 a74:	34 f5       	brge	.+76     	; 0xac2 <ltoa+0x5c>
 a76:	c2 2f       	mov	r28, r18
 a78:	e8 94       	clt
 a7a:	ca 30       	cpi	r28, 0x0A	; 10
 a7c:	49 f4       	brne	.+18     	; 0xa90 <ltoa+0x2a>
 a7e:	97 fb       	bst	r25, 7
 a80:	3e f4       	brtc	.+14     	; 0xa90 <ltoa+0x2a>
 a82:	90 95       	com	r25
 a84:	80 95       	com	r24
 a86:	70 95       	com	r23
 a88:	61 95       	neg	r22
 a8a:	7f 4f       	sbci	r23, 0xFF	; 255
 a8c:	8f 4f       	sbci	r24, 0xFF	; 255
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	2c 2f       	mov	r18, r28
 a92:	33 27       	eor	r19, r19
 a94:	44 27       	eor	r20, r20
 a96:	55 27       	eor	r21, r21
 a98:	ff 93       	push	r31
 a9a:	ef 93       	push	r30
 a9c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__udivmodsi4>
 aa0:	ef 91       	pop	r30
 aa2:	ff 91       	pop	r31
 aa4:	60 5d       	subi	r22, 0xD0	; 208
 aa6:	6a 33       	cpi	r22, 0x3A	; 58
 aa8:	0c f0       	brlt	.+2      	; 0xaac <ltoa+0x46>
 aaa:	69 5d       	subi	r22, 0xD9	; 217
 aac:	61 93       	st	Z+, r22
 aae:	b9 01       	movw	r22, r18
 ab0:	ca 01       	movw	r24, r20
 ab2:	60 50       	subi	r22, 0x00	; 0
 ab4:	70 40       	sbci	r23, 0x00	; 0
 ab6:	80 40       	sbci	r24, 0x00	; 0
 ab8:	90 40       	sbci	r25, 0x00	; 0
 aba:	51 f7       	brne	.-44     	; 0xa90 <ltoa+0x2a>
 abc:	16 f4       	brtc	.+4      	; 0xac2 <ltoa+0x5c>
 abe:	cd e2       	ldi	r28, 0x2D	; 45
 ac0:	c1 93       	st	Z+, r28
 ac2:	10 82       	st	Z, r1
 ac4:	8f 91       	pop	r24
 ac6:	9f 91       	pop	r25
 ac8:	cf 91       	pop	r28
 aca:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <strrev>

00000ace <ultoa>:
 ace:	fa 01       	movw	r30, r20
 ad0:	cf 93       	push	r28
 ad2:	ff 93       	push	r31
 ad4:	ef 93       	push	r30
 ad6:	22 30       	cpi	r18, 0x02	; 2
 ad8:	cc f0       	brlt	.+50     	; 0xb0c <ultoa+0x3e>
 ada:	25 32       	cpi	r18, 0x25	; 37
 adc:	bc f4       	brge	.+46     	; 0xb0c <ultoa+0x3e>
 ade:	c2 2f       	mov	r28, r18
 ae0:	2c 2f       	mov	r18, r28
 ae2:	33 27       	eor	r19, r19
 ae4:	44 27       	eor	r20, r20
 ae6:	55 27       	eor	r21, r21
 ae8:	ff 93       	push	r31
 aea:	ef 93       	push	r30
 aec:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__udivmodsi4>
 af0:	ef 91       	pop	r30
 af2:	ff 91       	pop	r31
 af4:	60 5d       	subi	r22, 0xD0	; 208
 af6:	6a 33       	cpi	r22, 0x3A	; 58
 af8:	0c f0       	brlt	.+2      	; 0xafc <ultoa+0x2e>
 afa:	69 5d       	subi	r22, 0xD9	; 217
 afc:	61 93       	st	Z+, r22
 afe:	b9 01       	movw	r22, r18
 b00:	ca 01       	movw	r24, r20
 b02:	60 50       	subi	r22, 0x00	; 0
 b04:	70 40       	sbci	r23, 0x00	; 0
 b06:	80 40       	sbci	r24, 0x00	; 0
 b08:	90 40       	sbci	r25, 0x00	; 0
 b0a:	51 f7       	brne	.-44     	; 0xae0 <ultoa+0x12>
 b0c:	10 82       	st	Z, r1
 b0e:	8f 91       	pop	r24
 b10:	9f 91       	pop	r25
 b12:	cf 91       	pop	r28
 b14:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <strrev>

00000b18 <utoa>:
 b18:	fb 01       	movw	r30, r22
 b1a:	9f 01       	movw	r18, r30
 b1c:	42 30       	cpi	r20, 0x02	; 2
 b1e:	74 f0       	brlt	.+28     	; 0xb3c <utoa+0x24>
 b20:	45 32       	cpi	r20, 0x25	; 37
 b22:	64 f4       	brge	.+24     	; 0xb3c <utoa+0x24>
 b24:	64 2f       	mov	r22, r20
 b26:	77 27       	eor	r23, r23
 b28:	0e 94 b2 05 	call	0xb64	; 0xb64 <__udivmodhi4>
 b2c:	80 5d       	subi	r24, 0xD0	; 208
 b2e:	8a 33       	cpi	r24, 0x3A	; 58
 b30:	0c f0       	brlt	.+2      	; 0xb34 <utoa+0x1c>
 b32:	89 5d       	subi	r24, 0xD9	; 217
 b34:	81 93       	st	Z+, r24
 b36:	cb 01       	movw	r24, r22
 b38:	00 97       	sbiw	r24, 0x00	; 0
 b3a:	a1 f7       	brne	.-24     	; 0xb24 <utoa+0xc>
 b3c:	10 82       	st	Z, r1
 b3e:	c9 01       	movw	r24, r18
 b40:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <strrev>

00000b44 <strrev>:
 b44:	dc 01       	movw	r26, r24
 b46:	fc 01       	movw	r30, r24
 b48:	67 2f       	mov	r22, r23
 b4a:	71 91       	ld	r23, Z+
 b4c:	77 23       	and	r23, r23
 b4e:	e1 f7       	brne	.-8      	; 0xb48 <strrev+0x4>
 b50:	32 97       	sbiw	r30, 0x02	; 2
 b52:	04 c0       	rjmp	.+8      	; 0xb5c <strrev+0x18>
 b54:	7c 91       	ld	r23, X
 b56:	6d 93       	st	X+, r22
 b58:	70 83       	st	Z, r23
 b5a:	62 91       	ld	r22, -Z
 b5c:	ae 17       	cp	r26, r30
 b5e:	bf 07       	cpc	r27, r31
 b60:	c8 f3       	brcs	.-14     	; 0xb54 <strrev+0x10>
 b62:	08 95       	ret

00000b64 <__udivmodhi4>:
 b64:	aa 1b       	sub	r26, r26
 b66:	bb 1b       	sub	r27, r27
 b68:	51 e1       	ldi	r21, 0x11	; 17
 b6a:	07 c0       	rjmp	.+14     	; 0xb7a <__udivmodhi4_ep>

00000b6c <__udivmodhi4_loop>:
 b6c:	aa 1f       	adc	r26, r26
 b6e:	bb 1f       	adc	r27, r27
 b70:	a6 17       	cp	r26, r22
 b72:	b7 07       	cpc	r27, r23
 b74:	10 f0       	brcs	.+4      	; 0xb7a <__udivmodhi4_ep>
 b76:	a6 1b       	sub	r26, r22
 b78:	b7 0b       	sbc	r27, r23

00000b7a <__udivmodhi4_ep>:
 b7a:	88 1f       	adc	r24, r24
 b7c:	99 1f       	adc	r25, r25
 b7e:	5a 95       	dec	r21
 b80:	a9 f7       	brne	.-22     	; 0xb6c <__udivmodhi4_loop>
 b82:	80 95       	com	r24
 b84:	90 95       	com	r25
 b86:	bc 01       	movw	r22, r24
 b88:	cd 01       	movw	r24, r26
 b8a:	08 95       	ret

00000b8c <__udivmodsi4>:
 b8c:	a1 e2       	ldi	r26, 0x21	; 33
 b8e:	1a 2e       	mov	r1, r26
 b90:	aa 1b       	sub	r26, r26
 b92:	bb 1b       	sub	r27, r27
 b94:	fd 01       	movw	r30, r26
 b96:	0d c0       	rjmp	.+26     	; 0xbb2 <__udivmodsi4_ep>

00000b98 <__udivmodsi4_loop>:
 b98:	aa 1f       	adc	r26, r26
 b9a:	bb 1f       	adc	r27, r27
 b9c:	ee 1f       	adc	r30, r30
 b9e:	ff 1f       	adc	r31, r31
 ba0:	a2 17       	cp	r26, r18
 ba2:	b3 07       	cpc	r27, r19
 ba4:	e4 07       	cpc	r30, r20
 ba6:	f5 07       	cpc	r31, r21
 ba8:	20 f0       	brcs	.+8      	; 0xbb2 <__udivmodsi4_ep>
 baa:	a2 1b       	sub	r26, r18
 bac:	b3 0b       	sbc	r27, r19
 bae:	e4 0b       	sbc	r30, r20
 bb0:	f5 0b       	sbc	r31, r21

00000bb2 <__udivmodsi4_ep>:
 bb2:	66 1f       	adc	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	1a 94       	dec	r1
 bbc:	69 f7       	brne	.-38     	; 0xb98 <__udivmodsi4_loop>
 bbe:	60 95       	com	r22
 bc0:	70 95       	com	r23
 bc2:	80 95       	com	r24
 bc4:	90 95       	com	r25
 bc6:	9b 01       	movw	r18, r22
 bc8:	ac 01       	movw	r20, r24
 bca:	bd 01       	movw	r22, r26
 bcc:	cf 01       	movw	r24, r30
 bce:	08 95       	ret

00000bd0 <_exit>:
 bd0:	f8 94       	cli

00000bd2 <__stop_program>:
 bd2:	ff cf       	rjmp	.-2      	; 0xbd2 <__stop_program>
