
ATmega32A_GCC_DigitalControlAudioSystem_pLibs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000083e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800060  00800060  000008b2  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000003f0  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000013fe  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000644  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000f6a  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000360  00000000  00000000  00003730  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005c9  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000408  00000000  00000000  00004059  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000288  00000000  00000000  00004461  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_2>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_3>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_4>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  74:	0c 94 1d 04 	jmp	0x83a	; 0x83a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <port_init>:
*****************************************/
void port_init()
{	

// PORT A connections
	DDRA  = 0b11111111;		//  PA7:U8/PGA2310,CS; PA6:U7/PGA2310,CS; PA5:CON2LCD,RS; PA4:CON2LCD,RW; PA3:CON2LCD,E; PA2:U2/74HC595,RCLK(LCD); PA1:U2/74HC595,SCLK(LCD); PA0:U2/74HC595,DATA(LCD);
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//	Interfaces: NOT USED. PULLUP DISABLE in PORTA.
  80:	1b ba       	out	0x1b, r1	; 27

// PORT B connections
	DDRB  = 0b10111000;		//  PB7:U6,U7,U8/PGA2310,SCLK; PB6:U6,U7,U8/PGA2310,SDO(CON33,36,39); PB5:U6,U7,U8/PGA2310,SDI; PB4:U12/74HC595,DATA(REL_OUT); PB3:U6/PGA2310,CS; PB2:CON8/BUTTON,"ESCAPE",INT2; PB1:CON5/BUTTON,"ON/OFF"; PB0:CON14TempSensor/DS18S20,DQ,IN/OUT;
  82:	88 eb       	ldi	r24, 0xB8	; 184
  84:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000111;		//	Interfaces: EXTERNAL INTERRUPT 2; SPI. set pullup to IRTSOP2240 / BUTTON(on/off) / DS18s20.
  86:	87 e0       	ldi	r24, 0x07	; 7
  88:	88 bb       	out	0x18, r24	; 24

// PORT C connections
	DDRC  = 0b11001100;		//  PC7:U10/74HC595,DATA(REL_IN); PC6:U10/74HC595,SCLK(REL_IN); PC5:EncoderED1112S,A; PC4:EncoderED1112S,B; PC3:U10/74HC595,RCLK(REL_IN); PC2:Q2/BD237(RELAY_POWER_SUPPLY); PC1:DS1307/24C64,I2C/SDA; PC0:DS1307/24C64,I2C/SCL;
  8a:	8c ec       	ldi	r24, 0xCC	; 204
  8c:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;		//	Interfaces: I2C. PULLUP DISABLE in PORTC.
  8e:	15 ba       	out	0x15, r1	; 21

// PORT D connections
	DDRD  = 0b11110000;		//  PD7:U12/74HC595,RCLK(REL_OUT); PD6:U12/74HC595,SCLK(REL_OUT); PD5:Q1/BD237(FAN_CONTROL_PWM); PD4:LED5/"ON/OFF AUDIO SYSTEM"; PD3:CON11/EncoderBUTTON,"MENU/ENTER"/INT1; PD2:CON12/IR/TSOP2240,/INT0; PD1:CON14/MAX232,UART/TXD; PD0:CON14/MAX232,UART/RXD;
  90:	80 ef       	ldi	r24, 0xF0	; 240
  92:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;		//	Interfaces: TIMER1; UART/USART; EXTERNAL INTERRUPT 0, 1. PULLUP DISABLE in PORTD.
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	82 bb       	out	0x12, r24	; 18
//	DDRD&=~_BV(0);// DDD0 = "0"  (DDD0=DDRD nulev bit) set PORTD pin0 to zero as input
//	PORTD|=_BV(0);// PD0  = "1"  Enable pull up
//	PORTD|=_BV(1);// PD1  = "1"  led
//	DDRD|=_BV(1); // DDD1 = "1"  (DDD1=DDRD parvi bit) set PORTD pin1 to one as output

}
  98:	08 95       	ret

0000009a <timer2_init>:
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init()
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  9e:	81 e8       	ldi	r24, 0x81	; 129
  a0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
  a2:	13 bc       	out	0x23, r1	; 35
}
  a4:	08 95       	ret

000000a6 <timer2_on>:
/*************************************
******** DEFINITIONS OF TIMER ********
*************************************/
void timer2_on()	// Timer2 On
{
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  a6:	81 e8       	ldi	r24, 0x81	; 129
  a8:	85 bd       	out	0x25, r24	; 37
	OCR2 = 1; // FAN PWM ON
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	83 bd       	out	0x23, r24	; 35
}
  ae:	08 95       	ret

000000b0 <timer2_off>:

void timer2_off()	// Timer2 Off
{
	TCCR2 = 0b00000000;		// DISABLED OCOC1A - PWM, OC1B - Disabled, normal port.
  b0:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0; // FAN PWM OFF
  b2:	13 bc       	out	0x23, r1	; 35
}
  b4:	08 95       	ret

000000b6 <__vector_1>:

/*****************************************
**** EXTERNAL INTERRUPT 0 VECTOR 01 ******
*****************************************/
ISR(INT0_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
}
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_2>:

/*****************************************
**** EXTERNAL INTERRUPT 1 VECTOR 02 ******
*****************************************/
ISR(INT1_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
}
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_3>:

/*****************************************
**** EXTERNAL INTERRUPT 2 VECTOR 03 ******
*****************************************/
ISR(INT2_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
}
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_4>:

/*****************************************
**** TIMER 2 OUTPUT COMPARE VECTOR 04 ****
*****************************************/
ISR(TIMER2_COMP_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
}
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_5>:

/*****************************************
**** TIMER 2 OVERFLOW VECTOR 05 **********
*****************************************/
ISR(TIMER2_OVF_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
}
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <init_all>:
*********************************** START OF APPLICATION ************************************
********************************************************************************************/

void init_all()
{
	port_init();
 11a:	0e 94 3e 00 	call	0x7c	; 0x7c <port_init>
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init()
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
 122:	81 e8       	ldi	r24, 0x81	; 129
 124:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
 126:	13 bc       	out	0x23, r1	; 35
void init_all()
{
	port_init();
	timer2_init();
//	LCD_INIT();
}
 128:	08 95       	ret

0000012a <buttons_press>:
void buttons_press()
{
 12a:	ff cf       	rjmp	.-2      	; 0x12a <buttons_press>

0000012c <main>:
********************************************************************************************/

int main(void)
{

	init_all();				// inicializacia na vsichko
 12c:	0e 94 8d 00 	call	0x11a	; 0x11a <init_all>

	sei();							// file "avr/interrupt.h"
 130:	78 94       	sei
//	SREG = (1<<I);

	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
 132:	94 9a       	sbi	0x12, 4	; 18
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0x8>

00000136 <EEPROM_24C64_READ>:
	// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
	// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !
	
	byte eepromReceiveByte0, eepromReceiveByte1, eepromReceiveByte2, eepromReceiveByte3, eepromReceiveByte4;
// EEPROM READ
	i2c_start();
 136:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);		// EEPROM 24C64 ADDRESS ACCESS WRITE
 13a:	80 ea       	ldi	r24, 0xA0	; 160
 13c:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS);	// HIGH STORE ADDRESS
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS);	// LOW  STORE ADDRESS	
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>

	i2c_start();
 14c:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_READ);		// EEPROM 24C64 ADDRESS ACCESS READ
 150:	81 ea       	ldi	r24, 0xA1	; 161
 152:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
	eepromReceiveByte0	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 9a 01 	call	0x334	; 0x334 <i2c_read>
	eepromReceiveByte1	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 9a 01 	call	0x334	; 0x334 <i2c_read>
	eepromReceiveByte2	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 9a 01 	call	0x334	; 0x334 <i2c_read>
	eepromReceiveByte3	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 9a 01 	call	0x334	; 0x334 <i2c_read>
	eepromReceiveByte4	= i2c_read(1);				// EEPROM DATA READ BYTE	// i2c_read(1) parametar razlichen ot 0 spira komunikaciqta NACK
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 9a 01 	call	0x334	; 0x334 <i2c_read>
	i2c_stop();
 174:	0e 94 90 01 	call	0x320	; 0x320 <i2c_stop>
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte1);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte2);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte3);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte4);
*/
}
 178:	08 95       	ret

0000017a <EEPROM_24C64_WRITE>:
// Za da se vijda tova koeto se e zapisalo v pametta, a ne ot tozi bibliotechen fail !!!!!!!!!
// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !

// EEPROM WRITE
	i2c_start();
 17a:	0e 94 8a 01 	call	0x314	; 0x314 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
 17e:	80 ea       	ldi	r24, 0xA0	; 160
 180:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS);	// HIGH STORE ADDRESS
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS);		// LOW  STORE ADDRESS	
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
// Write data
	i2c_write(0x30);	// Data is stored: 0x30 - '0'
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
	i2c_write(0x31);	// Data is stored: 0x31 - '1'
 196:	81 e3       	ldi	r24, 0x31	; 49
 198:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
	i2c_write(0x32);	// Data is stored: 0x32 - '2'
 19c:	82 e3       	ldi	r24, 0x32	; 50
 19e:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
	i2c_write(0x33);	// Data is stored: 0x33 - '3'
 1a2:	83 e3       	ldi	r24, 0x33	; 51
 1a4:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
	i2c_write(0x34);	// Data is stored: 0x34 - '4'
 1a8:	84 e3       	ldi	r24, 0x34	; 52
 1aa:	0e 94 93 01 	call	0x326	; 0x326 <i2c_write>
	i2c_stop();
 1ae:	0e 94 90 01 	call	0x320	; 0x320 <i2c_stop>
}
 1b2:	08 95       	ret

000001b4 <reset>:
}
*/

unsigned char reset(void)
{
    DDRx |= (1<<Px);            //Ausgang
 1b4:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 1b6:	c0 98       	cbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	97 e0       	ldi	r25, 0x07	; 7
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <reset+0x8>
    _delay_us(480);
	DDRx &= ~(1<<Px);
 1c0:	b8 98       	cbi	0x17, 0	; 23
 1c2:	80 e4       	ldi	r24, 0x40	; 64
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <reset+0x12>
    _delay_us(80);
	if(!(PINx & (1<<Px)))     //Prüfe Slave-Antwort
 1ca:	b0 9b       	sbis	0x16, 0	; 22
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <reset+0x1e>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	97 e0       	ldi	r25, 0x07	; 7
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <reset+0x22>
 1da:	81 e0       	ldi	r24, 0x01	; 1
	}
    else
	{
        return 0;
	}
}
 1dc:	08 95       	ret

000001de <read_bit>:

unsigned char read_bit(void)
{
    DDRx |= (1<<Px);            //Ausgang
 1de:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 1e0:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <read_bit+0x6>
    _delay_us(1);
	DDRx &= ~(1<<Px);
 1e8:	b8 98       	cbi	0x17, 0	; 23
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <read_bit+0xe>
    _delay_us(12);
    if(!(PINx & (1<<Px)))       //Abtastung innerhalb von 15µs
 1f0:	86 b3       	in	r24, 0x16	; 22
	}
	else
    {
		return 1;
	}
}
 1f2:	81 70       	andi	r24, 0x01	; 1
 1f4:	08 95       	ret

000001f6 <write_bit>:

void write_bit(unsigned char bitval)    //kann 0 oder 1 sein
{
    DDRx |= (1<<Px);            //Ausgang
 1f6:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 1f8:	c0 98       	cbi	0x18, 0	; 24
    if(bitval)
 1fa:	81 11       	cpse	r24, r1
	{
        PORTx |= (1<<Px);      //H-Pegel
 1fc:	c0 9a       	sbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1fe:	88 eb       	ldi	r24, 0xB8	; 184
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <write_bit+0xc>
    }
	_delay_us(110);        
    DDRx &= ~(1<<Px);
 206:	b8 98       	cbi	0x17, 0	; 23
    PORTx &= ~(1<<Px);
 208:	c0 98       	cbi	0x18, 0	; 24
}
 20a:	08 95       	ret

0000020c <read_byte>:

unsigned char read_byte(void)
{
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	10 e0       	ldi	r17, 0x00	; 0
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
		{
            byte |= (1<<i);
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	c9 2e       	mov	r12, r25
 224:	d1 2c       	mov	r13, r1
 226:	80 ee       	ldi	r24, 0xE0	; 224
 228:	e8 2e       	mov	r14, r24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	f8 2e       	mov	r15, r24
unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
 22e:	0e 94 ef 00 	call	0x1de	; 0x1de <read_bit>
 232:	88 23       	and	r24, r24
 234:	41 f0       	breq	.+16     	; 0x246 <read_byte+0x3a>
		{
            byte |= (1<<i);
 236:	c6 01       	movw	r24, r12
 238:	0c 2e       	mov	r0, r28
 23a:	02 c0       	rjmp	.+4      	; 0x240 <read_byte+0x34>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <read_byte+0x30>
 244:	18 2b       	or	r17, r24
 246:	c7 01       	movw	r24, r14
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <read_byte+0x3c>
 24c:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
 24e:	c8 30       	cpi	r28, 0x08	; 8
 250:	d1 05       	cpc	r29, r1
 252:	69 f7       	brne	.-38     	; 0x22e <read_byte+0x22>
            byte |= (1<<i);
		}
        _delay_us(120);
    }
    return byte;
}
 254:	81 2f       	mov	r24, r17
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	08 95       	ret

00000266 <write_byte>:

void write_byte(unsigned char byte)
{
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	c0 e0       	ldi	r28, 0x00	; 0
 270:	d0 e0       	ldi	r29, 0x00	; 0
    for(unsigned char i=0; i<8; i++)
	{
        if(byte & (1<<i))
 272:	08 2f       	mov	r16, r24
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	c8 01       	movw	r24, r16
 278:	0c 2e       	mov	r0, r28
 27a:	02 c0       	rjmp	.+4      	; 0x280 <write_byte+0x1a>
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <write_byte+0x16>
 284:	80 ff       	sbrs	r24, 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <write_byte+0x26>
		{
			write_bit(1);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	01 c0       	rjmp	.+2      	; 0x28e <write_byte+0x28>
		}
        else
		{
            write_bit(0);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <write_bit>
 292:	21 96       	adiw	r28, 0x01	; 1
    return byte;
}

void write_byte(unsigned char byte)
{
    for(unsigned char i=0; i<8; i++)
 294:	c8 30       	cpi	r28, 0x08	; 8
 296:	d1 05       	cpc	r29, r1
 298:	71 f7       	brne	.-36     	; 0x276 <write_byte+0x10>
 29a:	80 ee       	ldi	r24, 0xE0	; 224
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <write_byte+0x38>
		{
            write_bit(0);
		}
	}
    _delay_us(120);
}  
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <wait_ready>:
	return 0;
}

void wait_ready(void)
{
	while(!(read_bit()));
 2ac:	0e 94 ef 00 	call	0x1de	; 0x1de <read_bit>
 2b0:	88 23       	and	r24, r24
 2b2:	e1 f3       	breq	.-8      	; 0x2ac <wait_ready>
}
 2b4:	08 95       	ret

000002b6 <read_scratchpad>:
	}
    _delay_us(120);
}  

unsigned char read_scratchpad(void)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29

	if(reset())
 2ba:	0e 94 da 00 	call	0x1b4	; 0x1b4 <reset>
 2be:	88 23       	and	r24, r24
 2c0:	e9 f0       	breq	.+58     	; 0x2fc <read_scratchpad+0x46>
	{
		write_byte(0xCC);
 2c2:	8c ec       	ldi	r24, 0xCC	; 204
 2c4:	0e 94 33 01 	call	0x266	; 0x266 <write_byte>
		write_byte(0x44);
 2c8:	84 e4       	ldi	r24, 0x44	; 68
 2ca:	0e 94 33 01 	call	0x266	; 0x266 <write_byte>
		wait_ready();
 2ce:	0e 94 56 01 	call	0x2ac	; 0x2ac <wait_ready>
		if(reset())
 2d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <reset>
 2d6:	88 23       	and	r24, r24
 2d8:	89 f0       	breq	.+34     	; 0x2fc <read_scratchpad+0x46>
		{
			write_byte(0xCC);
 2da:	8c ec       	ldi	r24, 0xCC	; 204
 2dc:	0e 94 33 01 	call	0x266	; 0x266 <write_byte>
			write_byte(0xBE);
 2e0:	8e eb       	ldi	r24, 0xBE	; 190
 2e2:	0e 94 33 01 	call	0x266	; 0x266 <write_byte>
 2e6:	c1 e6       	ldi	r28, 0x61	; 97
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
			for(unsigned char i=0; i<9; i++)
			{
				scratchpad [i] = read_byte();
 2ea:	0e 94 06 01 	call	0x20c	; 0x20c <read_byte>
 2ee:	89 93       	st	Y+, r24
		wait_ready();
		if(reset())
		{
			write_byte(0xCC);
			write_byte(0xBE);
			for(unsigned char i=0; i<9; i++)
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	ca 36       	cpi	r28, 0x6A	; 106
 2f4:	d8 07       	cpc	r29, r24
 2f6:	c9 f7       	brne	.-14     	; 0x2ea <read_scratchpad+0x34>
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <read_scratchpad+0x48>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
			}
			return 1;
		}
	}
	return 0;
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <i2c_init>:
|== TWPS = 1 => (4^TWPS)= 4  // TWSR = (0<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx01 => TWSR = 1 (DEC) => 4^1 =  4 =|
|== TWPS = 2 => (4^TWPS)=16  // TWSR = (1<<TWPS1)|(0<<TWPS0) => TWSR = 0bxxxxxx10 => TWSR = 2 (DEC) => 4^2 = 16 =|
|== TWPS = 3 => (4^TWPS)=64  // TWSR = (1<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx11 => TWSR = 3 (DEC) => 4^3 = 64 =|
|===============================================================================================================*/

	TWBR = 0b00010010;	// HEX=0x12	or DEC=18	// FCPU = 16 000 000 |-> SCL = 16000000 / (16+(2*TWBR*(4^TWPS)) = 16000000 / (16+(2*18*(4))) = 16000000 / 160 = 100 000 Hz = 100 kHz
 304:	82 e1       	ldi	r24, 0x12	; 18
 306:	80 b9       	out	0x00, r24	; 0
	TWSR = (0<<TWPS1)|(1<<TWPS0);	// SCL = 16 000 000 / 64  = 250 000 = 250kHz
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	81 b9       	out	0x01, r24	; 1
	TWCR = (1<<TWEN);	//	TWCR = 0x04; // TWCR = (x<<TWINT)|(x<<TWEA)|(x<<TWSTA)|(x<<TWSTO)|(x<<TWEN)|(x<<TWIE);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz
 30c:	84 e0       	ldi	r24, 0x04	; 4
 30e:	86 bf       	out	0x36, r24	; 54
	TWDR = 0b00000000;
 310:	13 b8       	out	0x03, r1	; 3
}
 312:	08 95       	ret

00000314 <i2c_start>:
/*****************************************
** START CONDITION OF I2C COMMUNICATION **
*****************************************/
void i2c_start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 314:	84 ea       	ldi	r24, 0xA4	; 164
 316:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
 318:	06 b6       	in	r0, 0x36	; 54
 31a:	07 fe       	sbrs	r0, 7
 31c:	fd cf       	rjmp	.-6      	; 0x318 <i2c_start+0x4>
	{
	}
}
 31e:	08 95       	ret

00000320 <i2c_stop>:
/****************************************
** STOP CONDITION OF I2C COMMUNICATION **
****************************************/
void i2c_stop()
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 320:	84 e9       	ldi	r24, 0x94	; 148
 322:	86 bf       	out	0x36, r24	; 54
}
 324:	08 95       	ret

00000326 <i2c_write>:
/*******************************************
** WRITE/SEND 1 BYTE OF I2C COMMUNICATION **
*******************************************/
void i2c_write(unsigned char data)
{
	TWDR = data;
 326:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 328:	84 e8       	ldi	r24, 0x84	; 132
 32a:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
 32c:	06 b6       	in	r0, 0x36	; 54
 32e:	07 fe       	sbrs	r0, 7
 330:	fd cf       	rjmp	.-6      	; 0x32c <i2c_write+0x6>
	{
	}
}
 332:	08 95       	ret

00000334 <i2c_read>:
/**********************************************
** READ/RECEIVE BYTE(S) OF I2C COMMUNICATION **
**********************************************/
unsigned char i2c_read(unsigned char isLast)
{
	if(isLast == 0 )
 334:	88 23       	and	r24, r24
 336:	11 f4       	brne	.+4      	; 0x33c <i2c_read+0x8>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);	// to next receive byte
 338:	84 ec       	ldi	r24, 0xC4	; 196
 33a:	01 c0       	rjmp	.+2      	; 0x33e <i2c_read+0xa>
	}
	else
	{
		TWCR = (1<<TWINT)|(1<<TWEN);			// to end of communication
 33c:	84 e8       	ldi	r24, 0x84	; 132
 33e:	86 bf       	out	0x36, r24	; 54
	}
	
	while((TWCR & (1<<TWINT)) == 0)
 340:	06 b6       	in	r0, 0x36	; 54
 342:	07 fe       	sbrs	r0, 7
 344:	fd cf       	rjmp	.-6      	; 0x340 <i2c_read+0xc>
	{
	}
	return TWDR;
 346:	83 b1       	in	r24, 0x03	; 3
}
 348:	08 95       	ret

0000034a <LCD_EXECUTE_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_EXECUTE_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
 34a:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 34c:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 34e:	87 ff       	sbrs	r24, 7
 350:	02 c0       	rjmp	.+4      	; 0x356 <LCD_EXECUTE_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 352:	d8 9a       	sbi	0x1b, 0	; 27
 354:	01 c0       	rjmp	.+2      	; 0x358 <LCD_EXECUTE_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
 356:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 358:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 35a:	9f 5f       	subi	r25, 0xFF	; 255
 35c:	98 30       	cpi	r25, 0x08	; 8
 35e:	11 f0       	breq	.+4      	; 0x364 <LCD_EXECUTE_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 360:	88 0f       	add	r24, r24
 362:	f4 cf       	rjmp	.-24     	; 0x34c <LCD_EXECUTE_COMMAND+0x2>
	}

	LCD_RCK_low();
 364:	da 98       	cbi	0x1b, 2	; 27
 366:	88 ea       	ldi	r24, 0xA8	; 168
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	fc 01       	movw	r30, r24
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_EXECUTE_COMMAND+0x22>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 370:	da 9a       	sbi	0x1b, 2	; 27
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <LCD_EXECUTE_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us

	LCD_REGSELECT_low();	// RS = 0
 376:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 378:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 37a:	db 9a       	sbi	0x1b, 3	; 27
 37c:	80 e9       	ldi	r24, 0x90	; 144
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	fc 01       	movw	r30, r24
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_EXECUTE_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us

	LCD_ENABLE_low();		// EN = 0
 386:	db 98       	cbi	0x1b, 3	; 27
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_EXECUTE_COMMAND+0x3e>
	_delay_us(100);			//rcall 180 us

}
 38c:	08 95       	ret

0000038e <LCD_INIT>:
/**********************************
** INITIZLIZATION OF LCD DISPLAY **
**********************************/
void LCD_INIT()
{
	LCD_EXECUTE_COMMAND(LCD_CLEAR);					// LCD_CLEAR
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_EXECUTE_COMMAND>
	LCD_EXECUTE_COMMAND(LCD_MOVE_FIRST);			// LCD_MOVE_FIRST
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_EXECUTE_COMMAND>
	LCD_EXECUTE_COMMAND(LCD_ON_BLINK_CURSOR);		// LCD_ON_BLINK_CURSOR
 39a:	8f e0       	ldi	r24, 0x0F	; 15
 39c:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_EXECUTE_COMMAND>
	LCD_EXECUTE_COMMAND(LCD_8BIT_2ROWS_FONT5X10);	// LCD_8BIT_2ROWS_FONT5X10
 3a0:	8c e3       	ldi	r24, 0x3C	; 60
 3a2:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_EXECUTE_COMMAND>
}
 3a6:	08 95       	ret

000003a8 <LCD_EXECUTE_DATA>:

/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	c8 ea       	ldi	r28, 0xA8	; 168
 3b2:	d2 e0       	ldi	r29, 0x02	; 2
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];
 3b4:	a0 e9       	ldi	r26, 0x90	; 144
 3b6:	b1 e0       	ldi	r27, 0x01	; 1
 3b8:	25 c0       	rjmp	.+74     	; 0x404 <LCD_EXECUTE_DATA+0x5c>
 3ba:	fc 01       	movw	r30, r24
 3bc:	e4 0f       	add	r30, r20
 3be:	f5 1f       	adc	r31, r21
 3c0:	e0 81       	ld	r30, Z
 3c2:	20 e0       	ldi	r18, 0x00	; 0

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
 3c4:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 3c6:	e7 ff       	sbrs	r30, 7
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <LCD_EXECUTE_DATA+0x26>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 3ca:	d8 9a       	sbi	0x1b, 0	; 27
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <LCD_EXECUTE_DATA+0x28>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 3ce:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
 3d0:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 3d2:	2f 5f       	subi	r18, 0xFF	; 255
 3d4:	28 30       	cpi	r18, 0x08	; 8
 3d6:	11 f0       	breq	.+4      	; 0x3dc <LCD_EXECUTE_DATA+0x34>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 3d8:	ee 0f       	add	r30, r30
 3da:	f4 cf       	rjmp	.-24     	; 0x3c4 <LCD_EXECUTE_DATA+0x1c>
		}

		LCD_RCK_low();
 3dc:	da 98       	cbi	0x1b, 2	; 27
 3de:	fe 01       	movw	r30, r28
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_EXECUTE_DATA+0x38>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
 3e4:	da 9a       	sbi	0x1b, 2	; 27
 3e6:	fe 01       	movw	r30, r28
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCD_EXECUTE_DATA+0x40>
		_delay_us(170);			//rcall 180 us

		LCD_REGSELECT_high();	// RS = 1
 3ec:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
 3ee:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
 3f0:	db 9a       	sbi	0x1b, 3	; 27
 3f2:	fd 01       	movw	r30, r26
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_EXECUTE_DATA+0x4c>
		_delay_us(100);

		LCD_ENABLE_low();		// EN = 0
 3f8:	db 98       	cbi	0x1b, 3	; 27
 3fa:	fd 01       	movw	r30, r26
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_EXECUTE_DATA+0x54>
/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
 400:	4f 5f       	subi	r20, 0xFF	; 255
 402:	5f 4f       	sbci	r21, 0xFF	; 255
 404:	46 17       	cp	r20, r22
 406:	57 07       	cpc	r21, r23
 408:	c4 f2       	brlt	.-80     	; 0x3ba <LCD_EXECUTE_DATA+0x12>
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}

//	LCD_EXECUTE_DATA_LAST();	// flush -> posleden simvol ili gore v cikala count_ns < numsymbols+1 ili count_ns <= numsymbols
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <LCD_EXECUTE_DATA_ONE>:

/************************************************
** WRITE/TRANSMIT ONE DATA BYTE TO LCD DISPLAY **
************************************************/
void LCD_EXECUTE_DATA_ONE(unsigned char data)	// HELP: LCD_EXECUTE_DATA(unsigned char data_byte_symbols) // LCD shift left out, msb is first
{
 410:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 412:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 414:	87 ff       	sbrs	r24, 7
 416:	02 c0       	rjmp	.+4      	; 0x41c <LCD_EXECUTE_DATA_ONE+0xc>
		{
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 418:	d8 9a       	sbi	0x1b, 0	; 27
 41a:	01 c0       	rjmp	.+2      	; 0x41e <LCD_EXECUTE_DATA_ONE+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 41c:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 41e:	d9 9a       	sbi	0x1b, 1	; 27
{
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 420:	9f 5f       	subi	r25, 0xFF	; 255
 422:	98 30       	cpi	r25, 0x08	; 8
 424:	11 f0       	breq	.+4      	; 0x42a <LCD_EXECUTE_DATA_ONE+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 426:	88 0f       	add	r24, r24
 428:	f4 cf       	rjmp	.-24     	; 0x412 <LCD_EXECUTE_DATA_ONE+0x2>
	}

	LCD_RCK_low();
 42a:	da 98       	cbi	0x1b, 2	; 27
 42c:	88 ea       	ldi	r24, 0xA8	; 168
 42e:	92 e0       	ldi	r25, 0x02	; 2
 430:	fc 01       	movw	r30, r24
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <LCD_EXECUTE_DATA_ONE+0x22>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 436:	da 9a       	sbi	0x1b, 2	; 27
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <LCD_EXECUTE_DATA_ONE+0x28>
	_delay_us(170);			//rcall 180 us

	LCD_REGSELECT_high();	// RS = 1
 43c:	dd 9a       	sbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 43e:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 440:	db 9a       	sbi	0x1b, 3	; 27
 442:	80 e9       	ldi	r24, 0x90	; 144
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	fc 01       	movw	r30, r24
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <LCD_EXECUTE_DATA_ONE+0x38>
	_delay_us(100);

	LCD_ENABLE_low();		// EN = 0
 44c:	db 98       	cbi	0x1b, 3	; 27
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <LCD_EXECUTE_DATA_ONE+0x3e>
	_delay_us(100);

}
 452:	08 95       	ret

00000454 <LCD_EXECUTE_DATA_LAST>:
/*****************************************************************************
** WRITE/TRANSMIT LAST DATA BYTE TO LCD DISPLAY AND FLUSH SN74HC595 BUFFER  **
*****************************************************************************/
void LCD_EXECUTE_DATA_LAST()	// flush -> izchistvane na bufer - prinuditelno izpisvane na posleden simvol
{
	LCD_ENABLE_low();
 454:	db 98       	cbi	0x1b, 3	; 27
	LCD_READWRITE_low();
 456:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
 458:	dd 9a       	sbi	0x1b, 5	; 27
 45a:	80 e9       	ldi	r24, 0x90	; 144
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	fc 01       	movw	r30, r24
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <LCD_EXECUTE_DATA_LAST+0xc>
	_delay_us(100);				//rcall 180 us
	LCD_ENABLE_high();
 464:	db 9a       	sbi	0x1b, 3	; 27
	LCD_READWRITE_low();
 466:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
 468:	dd 9a       	sbi	0x1b, 5	; 27
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <LCD_EXECUTE_DATA_LAST+0x16>
	_delay_us(100);				//rcall 180 us
}
 46e:	08 95       	ret

00000470 <lcdDataString>:

/*********************************************************
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void lcdDataString(char *data)
{
 470:	fc 01       	movw	r30, r24
 472:	48 ea       	ldi	r20, 0xA8	; 168
 474:	52 e0       	ldi	r21, 0x02	; 2
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)
 476:	20 e9       	ldi	r18, 0x90	; 144
 478:	31 e0       	ldi	r19, 0x01	; 1
 47a:	20 c0       	rjmp	.+64     	; 0x4bc <lcdDataString+0x4c>
 47c:	90 e0       	ldi	r25, 0x00	; 0
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
 47e:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 480:	87 ff       	sbrs	r24, 7
 482:	02 c0       	rjmp	.+4      	; 0x488 <lcdDataString+0x18>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 484:	d8 9a       	sbi	0x1b, 0	; 27
 486:	01 c0       	rjmp	.+2      	; 0x48a <lcdDataString+0x1a>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 488:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
 48a:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 48c:	9f 5f       	subi	r25, 0xFF	; 255
 48e:	98 30       	cpi	r25, 0x08	; 8
 490:	11 f0       	breq	.+4      	; 0x496 <lcdDataString+0x26>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 492:	88 0f       	add	r24, r24
 494:	f4 cf       	rjmp	.-24     	; 0x47e <lcdDataString+0xe>
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;
 496:	31 96       	adiw	r30, 0x01	; 1
			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
		}

		LCD_RCK_low();
 498:	da 98       	cbi	0x1b, 2	; 27
 49a:	ca 01       	movw	r24, r20
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <lcdDataString+0x2c>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
 4a0:	da 9a       	sbi	0x1b, 2	; 27
 4a2:	ca 01       	movw	r24, r20
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <lcdDataString+0x34>
		_delay_us(170);			//rcall 180 us

		LCD_REGSELECT_high();	// RS = 1
 4a8:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
 4aa:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
 4ac:	db 9a       	sbi	0x1b, 3	; 27
 4ae:	c9 01       	movw	r24, r18
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <lcdDataString+0x40>
		_delay_us(100);

		LCD_ENABLE_low();		// EN = 0
 4b4:	db 98       	cbi	0x1b, 3	; 27
 4b6:	c9 01       	movw	r24, r18
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <lcdDataString+0x48>
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void lcdDataString(char *data)
{
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)
 4bc:	80 81       	ld	r24, Z
 4be:	88 23       	and	r24, r24
 4c0:	e9 f6       	brne	.-70     	; 0x47c <lcdDataString+0xc>
		_delay_us(100);

		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}
}
 4c2:	08 95       	ret

000004c4 <lcdDataInt>:
/******************************************************
** WRITE/TRANSMIT MORE DATA INT BYTES TO LCD DISPLAY **
******************************************************/
// USE THIS: lcdDataInt( (int)k + 1 );
void lcdDataInt(int data)		// void lcdDataInt(const int data)
{
 4c4:	df 93       	push	r29
 4c6:	cf 93       	push	r28
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	2a 97       	sbiw	r28, 0x0a	; 10
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	lcdDataString(itoa(data, buffer, 10));	// 10 -> DECIMAL
 4d8:	be 01       	movw	r22, r28
 4da:	6f 5f       	subi	r22, 0xFF	; 255
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	4a e0       	ldi	r20, 0x0A	; 10
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	0e 94 47 03 	call	0x68e	; 0x68e <itoa>
 4e6:	0e 94 38 02 	call	0x470	; 0x470 <lcdDataString>
}
 4ea:	2a 96       	adiw	r28, 0x0a	; 10
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	cf 91       	pop	r28
 4f8:	df 91       	pop	r29
 4fa:	08 95       	ret

000004fc <PGA2310_U6_SPI>:
** DEFINITION PGA2310 U6 SPI FUNCTIONS **
****************************************/
void PGA2310_U6_SPI(unsigned char pgaVolumeLeft, unsigned char pgaVolumeRight)	//PGA2310_U6_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// PB4 - /SS ENABLE
	PGA2310_U6_SPI_CS_low();	// PB3 - ENABLE PGA2310 U6 SPI
 4fc:	c3 98       	cbi	0x18, 3	; 24

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = pgaVolumeLeft;		//volume left;
 4fe:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
 500:	77 9b       	sbis	0x0e, 7	; 14
 502:	fe cf       	rjmp	.-4      	; 0x500 <PGA2310_U6_SPI+0x4>
	{
	}

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = pgaVolumeRight;		//volume right;
 504:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)))
 506:	77 9b       	sbis	0x0e, 7	; 14
 508:	fe cf       	rjmp	.-4      	; 0x506 <PGA2310_U6_SPI+0xa>
	{
	}

	PGA2310_U6_SPI_CS_high();	// PB3 - DISABLE PGA2310 U6 SPI
 50a:	c3 9a       	sbi	0x18, 3	; 24
//	PORTB = (1<<PB4);			// PB4 - /SS DISABLE
}
 50c:	08 95       	ret

0000050e <PGA2310_U7_SPI>:
** DEFINITION PGA2310 U7 SPI FUNCTIONS **
****************************************/
void PGA2310_U7_SPI(unsigned char pgaVolumeLeft, unsigned char pgaVolumeRight)	//PGA2310_U7_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// PB4 - /SS ENABLE
	PGA2310_U7_SPI_CS_low();	// PB3 - ENABLE PGA2310 U7 SPI
 50e:	de 98       	cbi	0x1b, 6	; 27

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = pgaVolumeLeft;		//volume_left;
 510:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
 512:	77 9b       	sbis	0x0e, 7	; 14
 514:	fe cf       	rjmp	.-4      	; 0x512 <PGA2310_U7_SPI+0x4>
	{
	}

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = pgaVolumeRight;		//volume right;
 516:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)))
 518:	77 9b       	sbis	0x0e, 7	; 14
 51a:	fe cf       	rjmp	.-4      	; 0x518 <PGA2310_U7_SPI+0xa>
	{
	}

	PGA2310_U7_SPI_CS_high();	// PB3 - DISABLE PGA2310 U7 SPI
 51c:	de 9a       	sbi	0x1b, 6	; 27
//	PORTB = (1<<PB4);			// PB4 - /SS DISABLE
}
 51e:	08 95       	ret

00000520 <PGA2310_U8_SPI>:
** DEFINITION PGA2310 U8 SPI FUNCTIONS **
****************************************/
void PGA2310_U8_SPI(unsigned char pgaVolumeLeft, unsigned char pgaVolumeRight)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// PB4 - /SS ENABLE
	PGA2310_U8_SPI_CS_low();	// PB3 - ENABLE PGA2310 U8 SPI
 520:	df 98       	cbi	0x1b, 7	; 27

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = pgaVolumeLeft;		//volume left;
 522:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
 524:	77 9b       	sbis	0x0e, 7	; 14
 526:	fe cf       	rjmp	.-4      	; 0x524 <PGA2310_U8_SPI+0x4>
	{
	}

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = pgaVolumeRight;		//volume right;
 528:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)))
 52a:	77 9b       	sbis	0x0e, 7	; 14
 52c:	fe cf       	rjmp	.-4      	; 0x52a <PGA2310_U8_SPI+0xa>
	{
	}

	PGA2310_U8_SPI_CS_high();	// PB3 - DISABLE PGA2310 U8 SPI
 52e:	df 9a       	sbi	0x1b, 7	; 27
//	PORTB = (1<<PB4);			// PB4 - /SS DISABLE
}
 530:	08 95       	ret

00000532 <uart_init>:
/*********************************
** INITIZLIZATION OF UART/USART **
*********************************/
void uart_init()
{
	UBRRL = 103;			// 9600, 0, 0 (Error = 0.2%; 16MHz)
 532:	87 e6       	ldi	r24, 0x67	; 103
 534:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
 536:	10 bc       	out	0x20, r1	; 32

	UCSRC = 0b10000110;		// URSEL = 1; UCSZ1 = 1; UCSZ0 = 1; 8-bit
 538:	86 e8       	ldi	r24, 0x86	; 134
 53a:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0b10011000;		// TXEN,RXEN,RXCIE
 53c:	88 e9       	ldi	r24, 0x98	; 152
 53e:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
 540:	1c b8       	out	0x0c, r1	; 12
}
 542:	08 95       	ret

00000544 <uart_transmit>:

/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
 544:	ac 01       	movw	r20, r24
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	09 c0       	rjmp	.+18     	; 0x55e <uart_transmit+0x1a>
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		//UDR = uart_data[count_ns];
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 54c:	5d 9b       	sbis	0x0b, 5	; 11
 54e:	fe cf       	rjmp	.-4      	; 0x54c <uart_transmit+0x8>
		{
		}
		UDR = uart_data[count_ns];
 550:	fa 01       	movw	r30, r20
 552:	e2 0f       	add	r30, r18
 554:	f3 1f       	adc	r31, r19
 556:	80 81       	ld	r24, Z
 558:	8c b9       	out	0x0c, r24	; 12
/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
 55a:	2f 5f       	subi	r18, 0xFF	; 255
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
 55e:	26 17       	cp	r18, r22
 560:	37 07       	cpc	r19, r23
 562:	a4 f3       	brlt	.-24     	; 0x54c <uart_transmit+0x8>
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
		{
		}
		UDR = uart_data[count_ns];
	}
}
 564:	08 95       	ret

00000566 <uart_transmit_one>:
/***************************************
** TRANSMIT/SEND 1 BYTE OF UART/USART **
***************************************/
void uart_transmit_one(unsigned char uart_data)
{
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 566:	5d 9b       	sbis	0x0b, 5	; 11
 568:	fe cf       	rjmp	.-4      	; 0x566 <uart_transmit_one>
	{
	}
	UDR = uart_data;
 56a:	8c b9       	out	0x0c, r24	; 12
}
 56c:	08 95       	ret

0000056e <uart_transmit_DEC_to_BCD>:

/*****************************************************************		// NOT FINISHED
** TRANSMIT/SEND 1 BYTE CONVERTED FROM DEC TO BCD OF UART/USART **		// NOT FINISHED
*****************************************************************/		// NOT FINISHED
void uart_transmit_DEC_to_BCD(unsigned char dec_to_bcd_data)
{// pravi se preobrazuvane ot DEC to BCD i preobrazuvane za izvejdane na parviq simvol s filtar
 56e:	98 2f       	mov	r25, r24
	
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 570:	5d 9b       	sbis	0x0b, 5	; 11
 572:	fe cf       	rjmp	.-4      	; 0x570 <uart_transmit_DEC_to_BCD+0x2>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data>>4));
 574:	89 2f       	mov	r24, r25
 576:	82 95       	swap	r24
 578:	8f 70       	andi	r24, 0x0F	; 15
 57a:	80 5d       	subi	r24, 0xD0	; 208
 57c:	8c b9       	out	0x0c, r24	; 12

	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 57e:	5d 9b       	sbis	0x0b, 5	; 11
 580:	fe cf       	rjmp	.-4      	; 0x57e <uart_transmit_DEC_to_BCD+0x10>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data & 0x0F));
 582:	9f 70       	andi	r25, 0x0F	; 15
 584:	90 5d       	subi	r25, 0xD0	; 208
 586:	9c b9       	out	0x0c, r25	; 12
	byte bcdToDec(byte val)
	{
  		return ( (val/16*10) + (val%16) );
	}
*/
}
 588:	08 95       	ret

0000058a <transmitUart>:
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
 58a:	5d 9b       	sbis	0x0b, 5	; 11
 58c:	fe cf       	rjmp	.-4      	; 0x58a <transmitUart>
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
 58e:	8c b9       	out	0x0c, r24	; 12
}
 590:	08 95       	ret

00000592 <transmitUartString>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
 592:	fc 01       	movw	r30, r24
 594:	04 c0       	rjmp	.+8      	; 0x59e <transmitUartString+0xc>
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
 596:	5d 9b       	sbis	0x0b, 5	; 11
 598:	fe cf       	rjmp	.-4      	; 0x596 <transmitUartString+0x4>
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
	{
		transmitUart(*data++);
 59a:	31 96       	adiw	r30, 0x01	; 1
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
 59c:	8c b9       	out	0x0c, r24	; 12
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
 59e:	80 81       	ld	r24, Z
 5a0:	88 23       	and	r24, r24
 5a2:	c9 f7       	brne	.-14     	; 0x596 <transmitUartString+0x4>
	{
		transmitUart(*data++);
	}
}
 5a4:	08 95       	ret

000005a6 <receiveUart>:
/**************************************************		// NOT FINISHED
** RECEIVE/READ unsigned char BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
unsigned char receiveUart(void)
{
	while (!(UCSRA & (1<<RXC)))
 5a6:	5f 9b       	sbis	0x0b, 7	; 11
 5a8:	fe cf       	rjmp	.-4      	; 0x5a6 <receiveUart>
	{};							/* Wait for data to be received */
	return UDR;					/* Get and return received data from buffer */
 5aa:	8c b1       	in	r24, 0x0c	; 12
}
 5ac:	08 95       	ret

000005ae <transmitUartLong>:
/******************************************		// NOT FINISHED
** TRANSMIT/SEND long BYTE OF UART/USART **		// NOT FINISHED
******************************************/		// NOT FINISHED
// USE THIS: transmitUartLong( (long)k + 1 );
void transmitUartLong(long data)		// void transmitUartLong(const long data)
{
 5ae:	df 93       	push	r29
 5b0:	cf 93       	push	r28
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	2a 97       	sbiw	r28, 0x0a	; 10
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ltoa(data, buffer, 10));		// 10 -> DECIMAL
 5c2:	ae 01       	movw	r20, r28
 5c4:	4f 5f       	subi	r20, 0xFF	; 255
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	2a e0       	ldi	r18, 0x0A	; 10
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <ltoa>
 5d0:	0e 94 c9 02 	call	0x592	; 0x592 <transmitUartString>
}
 5d4:	2a 96       	adiw	r28, 0x0a	; 10
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
 5e0:	cf 91       	pop	r28
 5e2:	df 91       	pop	r29
 5e4:	08 95       	ret

000005e6 <transmitUartULong>:
/***************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned long BYTE OF UART/USART **		// NOT FINISHED
***************************************************/		// NOT FINISHED
// USE THIS: transmitUartULong( (unsigned long)k + 1 );
void transmitUartULong(unsigned long data)		// void transmitUartULong(const unsigned long data)
{
 5e6:	df 93       	push	r29
 5e8:	cf 93       	push	r28
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	2a 97       	sbiw	r28, 0x0a	; 10
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ultoa(data, buffer, 10));		// 10 -> DECIMAL
 5fa:	ae 01       	movw	r20, r28
 5fc:	4f 5f       	subi	r20, 0xFF	; 255
 5fe:	5f 4f       	sbci	r21, 0xFF	; 255
 600:	2a e0       	ldi	r18, 0x0A	; 10
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	0e 94 9c 03 	call	0x738	; 0x738 <ultoa>
 608:	0e 94 c9 02 	call	0x592	; 0x592 <transmitUartString>
}
 60c:	2a 96       	adiw	r28, 0x0a	; 10
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
 618:	cf 91       	pop	r28
 61a:	df 91       	pop	r29
 61c:	08 95       	ret

0000061e <transmitUartInt>:
/*****************************************		// NOT FINISHED
** TRANSMIT/SEND int BYTE OF UART/USART **		// NOT FINISHED
*****************************************/		// NOT FINISHED
// USE THIS: transmitUartInt( (int)k + 1 );
void transmitUartInt(int data)		// void transmitUartInt(const int data)
{
 61e:	df 93       	push	r29
 620:	cf 93       	push	r28
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
 626:	2a 97       	sbiw	r28, 0x0a	; 10
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	f8 94       	cli
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	0f be       	out	0x3f, r0	; 63
 630:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(itoa(data, buffer, 10));		// 10 -> DECIMAL
 632:	be 01       	movw	r22, r28
 634:	6f 5f       	subi	r22, 0xFF	; 255
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	4a e0       	ldi	r20, 0x0A	; 10
 63a:	50 e0       	ldi	r21, 0x00	; 0
 63c:	0e 94 47 03 	call	0x68e	; 0x68e <itoa>
 640:	0e 94 c9 02 	call	0x592	; 0x592 <transmitUartString>
}
 644:	2a 96       	adiw	r28, 0x0a	; 10
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	cf 91       	pop	r28
 652:	df 91       	pop	r29
 654:	08 95       	ret

00000656 <transmitUartUInt>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned int BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: transmitUartUInt( (unsigned int)k + 1 );
void transmitUartUInt(unsigned int data)		// void transmitUartUInt(const unsigned int data)
{
 656:	df 93       	push	r29
 658:	cf 93       	push	r28
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	2a 97       	sbiw	r28, 0x0a	; 10
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	f8 94       	cli
 664:	de bf       	out	0x3e, r29	; 62
 666:	0f be       	out	0x3f, r0	; 63
 668:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(utoa(data, buffer, 10));		// 10 -> DECIMAL
 66a:	be 01       	movw	r22, r28
 66c:	6f 5f       	subi	r22, 0xFF	; 255
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	4a e0       	ldi	r20, 0x0A	; 10
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	0e 94 c1 03 	call	0x782	; 0x782 <utoa>
 678:	0e 94 c9 02 	call	0x592	; 0x592 <transmitUartString>
}
 67c:	2a 96       	adiw	r28, 0x0a	; 10
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	f8 94       	cli
 682:	de bf       	out	0x3e, r29	; 62
 684:	0f be       	out	0x3f, r0	; 63
 686:	cd bf       	out	0x3d, r28	; 61
 688:	cf 91       	pop	r28
 68a:	df 91       	pop	r29
 68c:	08 95       	ret

0000068e <itoa>:
 68e:	fb 01       	movw	r30, r22
 690:	9f 01       	movw	r18, r30
 692:	e8 94       	clt
 694:	42 30       	cpi	r20, 0x02	; 2
 696:	c4 f0       	brlt	.+48     	; 0x6c8 <itoa+0x3a>
 698:	45 32       	cpi	r20, 0x25	; 37
 69a:	b4 f4       	brge	.+44     	; 0x6c8 <itoa+0x3a>
 69c:	4a 30       	cpi	r20, 0x0A	; 10
 69e:	29 f4       	brne	.+10     	; 0x6aa <itoa+0x1c>
 6a0:	97 fb       	bst	r25, 7
 6a2:	1e f4       	brtc	.+6      	; 0x6aa <itoa+0x1c>
 6a4:	90 95       	com	r25
 6a6:	81 95       	neg	r24
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	64 2f       	mov	r22, r20
 6ac:	77 27       	eor	r23, r23
 6ae:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__udivmodhi4>
 6b2:	80 5d       	subi	r24, 0xD0	; 208
 6b4:	8a 33       	cpi	r24, 0x3A	; 58
 6b6:	0c f0       	brlt	.+2      	; 0x6ba <itoa+0x2c>
 6b8:	89 5d       	subi	r24, 0xD9	; 217
 6ba:	81 93       	st	Z+, r24
 6bc:	cb 01       	movw	r24, r22
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	a1 f7       	brne	.-24     	; 0x6aa <itoa+0x1c>
 6c2:	16 f4       	brtc	.+4      	; 0x6c8 <itoa+0x3a>
 6c4:	5d e2       	ldi	r21, 0x2D	; 45
 6c6:	51 93       	st	Z+, r21
 6c8:	10 82       	st	Z, r1
 6ca:	c9 01       	movw	r24, r18
 6cc:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <strrev>

000006d0 <ltoa>:
 6d0:	fa 01       	movw	r30, r20
 6d2:	cf 93       	push	r28
 6d4:	ff 93       	push	r31
 6d6:	ef 93       	push	r30
 6d8:	22 30       	cpi	r18, 0x02	; 2
 6da:	44 f1       	brlt	.+80     	; 0x72c <ltoa+0x5c>
 6dc:	25 32       	cpi	r18, 0x25	; 37
 6de:	34 f5       	brge	.+76     	; 0x72c <ltoa+0x5c>
 6e0:	c2 2f       	mov	r28, r18
 6e2:	e8 94       	clt
 6e4:	ca 30       	cpi	r28, 0x0A	; 10
 6e6:	49 f4       	brne	.+18     	; 0x6fa <ltoa+0x2a>
 6e8:	97 fb       	bst	r25, 7
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <ltoa+0x2a>
 6ec:	90 95       	com	r25
 6ee:	80 95       	com	r24
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	2c 2f       	mov	r18, r28
 6fc:	33 27       	eor	r19, r19
 6fe:	44 27       	eor	r20, r20
 700:	55 27       	eor	r21, r21
 702:	ff 93       	push	r31
 704:	ef 93       	push	r30
 706:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__udivmodsi4>
 70a:	ef 91       	pop	r30
 70c:	ff 91       	pop	r31
 70e:	60 5d       	subi	r22, 0xD0	; 208
 710:	6a 33       	cpi	r22, 0x3A	; 58
 712:	0c f0       	brlt	.+2      	; 0x716 <ltoa+0x46>
 714:	69 5d       	subi	r22, 0xD9	; 217
 716:	61 93       	st	Z+, r22
 718:	b9 01       	movw	r22, r18
 71a:	ca 01       	movw	r24, r20
 71c:	60 50       	subi	r22, 0x00	; 0
 71e:	70 40       	sbci	r23, 0x00	; 0
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	51 f7       	brne	.-44     	; 0x6fa <ltoa+0x2a>
 726:	16 f4       	brtc	.+4      	; 0x72c <ltoa+0x5c>
 728:	cd e2       	ldi	r28, 0x2D	; 45
 72a:	c1 93       	st	Z+, r28
 72c:	10 82       	st	Z, r1
 72e:	8f 91       	pop	r24
 730:	9f 91       	pop	r25
 732:	cf 91       	pop	r28
 734:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <strrev>

00000738 <ultoa>:
 738:	fa 01       	movw	r30, r20
 73a:	cf 93       	push	r28
 73c:	ff 93       	push	r31
 73e:	ef 93       	push	r30
 740:	22 30       	cpi	r18, 0x02	; 2
 742:	cc f0       	brlt	.+50     	; 0x776 <ultoa+0x3e>
 744:	25 32       	cpi	r18, 0x25	; 37
 746:	bc f4       	brge	.+46     	; 0x776 <ultoa+0x3e>
 748:	c2 2f       	mov	r28, r18
 74a:	2c 2f       	mov	r18, r28
 74c:	33 27       	eor	r19, r19
 74e:	44 27       	eor	r20, r20
 750:	55 27       	eor	r21, r21
 752:	ff 93       	push	r31
 754:	ef 93       	push	r30
 756:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__udivmodsi4>
 75a:	ef 91       	pop	r30
 75c:	ff 91       	pop	r31
 75e:	60 5d       	subi	r22, 0xD0	; 208
 760:	6a 33       	cpi	r22, 0x3A	; 58
 762:	0c f0       	brlt	.+2      	; 0x766 <ultoa+0x2e>
 764:	69 5d       	subi	r22, 0xD9	; 217
 766:	61 93       	st	Z+, r22
 768:	b9 01       	movw	r22, r18
 76a:	ca 01       	movw	r24, r20
 76c:	60 50       	subi	r22, 0x00	; 0
 76e:	70 40       	sbci	r23, 0x00	; 0
 770:	80 40       	sbci	r24, 0x00	; 0
 772:	90 40       	sbci	r25, 0x00	; 0
 774:	51 f7       	brne	.-44     	; 0x74a <ultoa+0x12>
 776:	10 82       	st	Z, r1
 778:	8f 91       	pop	r24
 77a:	9f 91       	pop	r25
 77c:	cf 91       	pop	r28
 77e:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <strrev>

00000782 <utoa>:
 782:	fb 01       	movw	r30, r22
 784:	9f 01       	movw	r18, r30
 786:	42 30       	cpi	r20, 0x02	; 2
 788:	74 f0       	brlt	.+28     	; 0x7a6 <utoa+0x24>
 78a:	45 32       	cpi	r20, 0x25	; 37
 78c:	64 f4       	brge	.+24     	; 0x7a6 <utoa+0x24>
 78e:	64 2f       	mov	r22, r20
 790:	77 27       	eor	r23, r23
 792:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__udivmodhi4>
 796:	80 5d       	subi	r24, 0xD0	; 208
 798:	8a 33       	cpi	r24, 0x3A	; 58
 79a:	0c f0       	brlt	.+2      	; 0x79e <utoa+0x1c>
 79c:	89 5d       	subi	r24, 0xD9	; 217
 79e:	81 93       	st	Z+, r24
 7a0:	cb 01       	movw	r24, r22
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	a1 f7       	brne	.-24     	; 0x78e <utoa+0xc>
 7a6:	10 82       	st	Z, r1
 7a8:	c9 01       	movw	r24, r18
 7aa:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <strrev>

000007ae <strrev>:
 7ae:	dc 01       	movw	r26, r24
 7b0:	fc 01       	movw	r30, r24
 7b2:	67 2f       	mov	r22, r23
 7b4:	71 91       	ld	r23, Z+
 7b6:	77 23       	and	r23, r23
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <strrev+0x4>
 7ba:	32 97       	sbiw	r30, 0x02	; 2
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <strrev+0x18>
 7be:	7c 91       	ld	r23, X
 7c0:	6d 93       	st	X+, r22
 7c2:	70 83       	st	Z, r23
 7c4:	62 91       	ld	r22, -Z
 7c6:	ae 17       	cp	r26, r30
 7c8:	bf 07       	cpc	r27, r31
 7ca:	c8 f3       	brcs	.-14     	; 0x7be <strrev+0x10>
 7cc:	08 95       	ret

000007ce <__udivmodhi4>:
 7ce:	aa 1b       	sub	r26, r26
 7d0:	bb 1b       	sub	r27, r27
 7d2:	51 e1       	ldi	r21, 0x11	; 17
 7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <__udivmodhi4_ep>

000007d6 <__udivmodhi4_loop>:
 7d6:	aa 1f       	adc	r26, r26
 7d8:	bb 1f       	adc	r27, r27
 7da:	a6 17       	cp	r26, r22
 7dc:	b7 07       	cpc	r27, r23
 7de:	10 f0       	brcs	.+4      	; 0x7e4 <__udivmodhi4_ep>
 7e0:	a6 1b       	sub	r26, r22
 7e2:	b7 0b       	sbc	r27, r23

000007e4 <__udivmodhi4_ep>:
 7e4:	88 1f       	adc	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	5a 95       	dec	r21
 7ea:	a9 f7       	brne	.-22     	; 0x7d6 <__udivmodhi4_loop>
 7ec:	80 95       	com	r24
 7ee:	90 95       	com	r25
 7f0:	bc 01       	movw	r22, r24
 7f2:	cd 01       	movw	r24, r26
 7f4:	08 95       	ret

000007f6 <__udivmodsi4>:
 7f6:	a1 e2       	ldi	r26, 0x21	; 33
 7f8:	1a 2e       	mov	r1, r26
 7fa:	aa 1b       	sub	r26, r26
 7fc:	bb 1b       	sub	r27, r27
 7fe:	fd 01       	movw	r30, r26
 800:	0d c0       	rjmp	.+26     	; 0x81c <__udivmodsi4_ep>

00000802 <__udivmodsi4_loop>:
 802:	aa 1f       	adc	r26, r26
 804:	bb 1f       	adc	r27, r27
 806:	ee 1f       	adc	r30, r30
 808:	ff 1f       	adc	r31, r31
 80a:	a2 17       	cp	r26, r18
 80c:	b3 07       	cpc	r27, r19
 80e:	e4 07       	cpc	r30, r20
 810:	f5 07       	cpc	r31, r21
 812:	20 f0       	brcs	.+8      	; 0x81c <__udivmodsi4_ep>
 814:	a2 1b       	sub	r26, r18
 816:	b3 0b       	sbc	r27, r19
 818:	e4 0b       	sbc	r30, r20
 81a:	f5 0b       	sbc	r31, r21

0000081c <__udivmodsi4_ep>:
 81c:	66 1f       	adc	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	1a 94       	dec	r1
 826:	69 f7       	brne	.-38     	; 0x802 <__udivmodsi4_loop>
 828:	60 95       	com	r22
 82a:	70 95       	com	r23
 82c:	80 95       	com	r24
 82e:	90 95       	com	r25
 830:	9b 01       	movw	r18, r22
 832:	ac 01       	movw	r20, r24
 834:	bd 01       	movw	r22, r26
 836:	cf 01       	movw	r24, r30
 838:	08 95       	ret

0000083a <_exit>:
 83a:	f8 94       	cli

0000083c <__stop_program>:
 83c:	ff cf       	rjmp	.-2      	; 0x83c <__stop_program>
