
ATmega32A_GCC_DigitalControlAudioSystem_pLibs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00000e32  00000ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000f4  008000f4  00000f5a  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007b5  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023e8  00000000  00000000  0000186f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be2  00000000  00000000  00003c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cdc  00000000  00000000  00004839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  00006518  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009a7  00000000  00000000  00006b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c9e  00000000  00000000  000074ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  0000818d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_3>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_4>
  14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 3f       	cpi	r26, 0xF4	; 244
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 ef       	ldi	r26, 0xF4	; 244
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 30       	cpi	r26, 0x08	; 8
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  8a:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:
*****************************************/
void port_init(void)
{	

// PORT A connections
	DDRA  = 0b11111111;		//  PA7:U8/PGA2310,CS; PA6:U7/PGA2310,CS; PA5:CON2LCD,RS; PA4:CON2LCD,RW; PA3:CON2LCD,E; PA2:U2/74HC595,RCLK(LCD); PA1:U2/74HC595,SCLK(LCD); PA0:U2/74HC595,DATA(LCD);
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//	Interfaces: NOT USED. PULLUP DISABLE in PORTA.
  96:	1b ba       	out	0x1b, r1	; 27

// PORT B connections
	DDRB  = 0b10111000;		//  PB7:U6,U7,U8/PGA2310,SCLK; PB6:U6,U7,U8/PGA2310,SDO(CON33,36,39); PB5:U6,U7,U8/PGA2310,SDI; PB4:U12/74HC595,DATA(REL_OUT); PB3:U6/PGA2310,CS; PB2:CON8/BUTTON,"ESCAPE",INT2; PB1:CON5/BUTTON,"ON/OFF"; PB0:CON14TempSensor/DS18S20,DQ,IN/OUT;
  98:	88 eb       	ldi	r24, 0xB8	; 184
  9a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000111;		//	Interfaces: EXTERNAL INTERRUPT 2; SPI. set pullup to IRTSOP2240 / BUTTON(on/off) / DS18s20.
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	88 bb       	out	0x18, r24	; 24

// PORT C connections
	DDRC  = 0b11001100;		//  PC7:U10/74HC595,DATA(REL_IN); PC6:U10/74HC595,SCLK(REL_IN); PC5:EncoderED1112S,A; PC4:EncoderED1112S,B; PC3:U10/74HC595,RCLK(REL_IN); PC2:Q2/BD237(RELAY_POWER_SUPPLY); PC1:DS1307/24C64,I2C/SDA; PC0:DS1307/24C64,I2C/SCL;
  a0:	8c ec       	ldi	r24, 0xCC	; 204
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;		//	Interfaces: I2C. PULLUP DISABLE in PORTC.
  a4:	15 ba       	out	0x15, r1	; 21

// PORT D connections
	DDRD  = 0b11110000;		//  PD7:U12/74HC595,RCLK(REL_OUT); PD6:U12/74HC595,SCLK(REL_OUT); PD5:Q1/BD237(FAN_CONTROL_PWM); PD4:LED5/"ON/OFF AUDIO SYSTEM"; PD3:CON11/EncoderBUTTON,"MENU/ENTER"/INT1; PD2:CON12/IR/TSOP2240,/INT0; PD1:CON14/MAX232,UART/TXD; PD0:CON14/MAX232,UART/RXD;
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;		//	Interfaces: TIMER1; UART/USART; EXTERNAL INTERRUPT 0, 1. PULLUP DISABLE in PORTD.
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	82 bb       	out	0x12, r24	; 18
//	DDRD&=~_BV(0);// DDD0 = "0"  (DDD0=DDRD nulev bit) set PORTD pin0 to zero as input
//	PORTD|=_BV(0);// PD0  = "1"  Enable pull up
//	PORTD|=_BV(1);// PD1  = "1"  led
//	DDRD|=_BV(1); // DDD1 = "1"  (DDD1=DDRD parvi bit) set PORTD pin1 to one as output

}
  ae:	08 95       	ret

000000b0 <timer2_init>:
/*****************************
** INITIZLIZATION OF TIMER2 **
*****************************/
void timer2_init(void)
{
	SFIOR = 0b00000010;		// Prescaler Reset Timer2 (bit1 –> PSR2)
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	80 bf       	out	0x30, r24	; 48
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  b4:	81 e8       	ldi	r24, 0x81	; 129
  b6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0; // FAN PWM ON
  b8:	13 bc       	out	0x23, r1	; 35
}
  ba:	08 95       	ret

000000bc <timer2_on>:
/*************************************
******** DEFINITIONS OF TIMER ********
*************************************/
void timer2_on(void)	// Timer2 On
{
	TCCR2 = 0b10000001;		// 0b10100001 - OC1A,OC1B - PWM;  0b10000001 - OC1A PWM, OC1B - Disabled, normal port.
  bc:	81 e8       	ldi	r24, 0x81	; 129
  be:	85 bd       	out	0x25, r24	; 37
	OCR2 = 1; // FAN PWM ON
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	83 bd       	out	0x23, r24	; 35
}
  c4:	08 95       	ret

000000c6 <timer2_off>:

void timer2_off(void)	// Timer2 Off
{
	TCCR2 = 0b00000000;		// DISABLED OCOC1A - PWM, OC1B - Disabled, normal port.
  c6:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0; // FAN PWM OFF
  c8:	13 bc       	out	0x23, r1	; 35
}
  ca:	08 95       	ret

000000cc <__vector_1>:

/*****************************************
**** EXTERNAL INTERRUPT 0 VECTOR 01 ******
*****************************************/
ISR(INT0_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
}
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_2>:

/*****************************************
**** EXTERNAL INTERRUPT 1 VECTOR 02 ******
*****************************************/
ISR(INT1_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
}
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_3>:

/*****************************************
**** EXTERNAL INTERRUPT 2 VECTOR 03 ******
*****************************************/
ISR(INT2_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
}
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_4>:

/*****************************************
**** TIMER 2 OUTPUT COMPARE VECTOR 04 ****
*****************************************/
ISR(TIMER2_COMP_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
}
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_5>:

/*****************************************
**** TIMER 2 OVERFLOW VECTOR 05 **********
*****************************************/
ISR(TIMER2_OVF_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
}
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <init_all>:
*********************************** START OF APPLICATION ************************************
********************************************************************************************/

void init_all()
{
	port_init();		// IO init and configure all port
 130:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
//	timer2_init();
	LCD_INIT();			// LCD init and reset all lcd contain
 134:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_INIT>
	pga2310_init();		// SPI init and reset all (U6, U7, U8) PGA2310 volume values to null
 138:	0e 94 27 04 	call	0x84e	; 0x84e <pga2310_init>
	relays_in_init();	// ?? nujno li e ?
 13c:	0e 94 0a 06 	call	0xc14	; 0xc14 <relays_in_init>
	relays_out_init();	// ?? nujno li e ?
 140:	0e 94 31 06 	call	0xc62	; 0xc62 <relays_out_init>
}
 144:	08 95       	ret

00000146 <rotaryEncoder>:
**** ROTARY ENCODER ****
***********************/
void rotaryEncoder(void)
{
	unsigned char temp = 0;
	temp = rotaryEncoderNikBarzakov();
 146:	0e 94 89 05 	call	0xb12	; 0xb12 <rotaryEncoderNikBarzakov>
	if(0==temp)
 14a:	88 23       	and	r24, r24
 14c:	09 f4       	brne	.+2      	; 0x150 <rotaryEncoder+0xa>
 14e:	42 c0       	rjmp	.+132    	; 0x1d4 <rotaryEncoder+0x8e>
	{
		// do nothing, encoder havn't been rotated  // ne e bil zavartan
	}
	else if(1==temp)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	01 f5       	brne	.+64     	; 0x194 <rotaryEncoder+0x4e>
	{
		// encoder is decrement
//		volumeIndex = volumeIndex - temp;	// pomesteno v else
		if(volumeIndex < (VOLUME_MIN + 1))
 154:	80 91 f4 00 	lds	r24, 0x00F4
 158:	88 23       	and	r24, r24
 15a:	19 f4       	brne	.+6      	; 0x162 <rotaryEncoder+0x1c>
		{
			volumeIndex = VOLUME_MIN;
 15c:	10 92 f4 00 	sts	0x00F4, r1
 160:	03 c0       	rjmp	.+6      	; 0x168 <rotaryEncoder+0x22>
		}
		else
		{
			volumeIndex = volumeIndex - temp;		
 162:	81 50       	subi	r24, 0x01	; 1
 164:	80 93 f4 00 	sts	0x00F4, r24
		}
		PGA2310_Volume_Update(volumeValue[volumeIndex], volumeValue[volumeIndex]);
 168:	e0 91 f4 00 	lds	r30, 0x00F4
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e8 55       	subi	r30, 0x58	; 88
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	60 81       	ld	r22, Z
 174:	86 2f       	mov	r24, r22
 176:	0e 94 10 04 	call	0x820	; 0x820 <PGA2310_Volume_Update>
		LCD_COMMAND(LCD_SELECT_4ROW);	// select row 3
 17a:	84 ed       	ldi	r24, 0xD4	; 212
 17c:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
		LCD_DATA_STRING("Volume: ");	// 20 symbols
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_DATA_STRING>
		LCD_DATA_INT(volumeIndex);		// 20 symbols
 188:	80 91 f4 00 	lds	r24, 0x00F4
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <LCD_DATA_INT>
 192:	08 95       	ret
	}
	else if(2==temp)
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	f1 f4       	brne	.+60     	; 0x1d4 <rotaryEncoder+0x8e>
	{
		// encoder is increment
//		volumeIndex = volumeIndex + temp;	// pomesteno v else
		if (volumeIndex > (VOLUME_MAX - 2))
 198:	80 91 f4 00 	lds	r24, 0x00F4
 19c:	83 31       	cpi	r24, 0x13	; 19
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <rotaryEncoder+0x5e>
		{
			volumeIndex = (VOLUME_MAX - 1);
 1a0:	83 e1       	ldi	r24, 0x13	; 19
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <rotaryEncoder+0x60>
		}
		else
		{
			volumeIndex = volumeIndex + temp;
 1a4:	8e 5f       	subi	r24, 0xFE	; 254
 1a6:	80 93 f4 00 	sts	0x00F4, r24
		}
		PGA2310_Volume_Update(volumeValue[volumeIndex], volumeValue[volumeIndex]);
 1aa:	e0 91 f4 00 	lds	r30, 0x00F4
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e8 55       	subi	r30, 0x58	; 88
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	60 81       	ld	r22, Z
 1b6:	86 2f       	mov	r24, r22
 1b8:	0e 94 10 04 	call	0x820	; 0x820 <PGA2310_Volume_Update>
		LCD_COMMAND(LCD_SELECT_4ROW);	// select row 3
 1bc:	84 ed       	ldi	r24, 0xD4	; 212
 1be:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
		LCD_DATA_STRING("Volume: ");	// 20 symbols
 1c2:	80 e6       	ldi	r24, 0x60	; 96
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_DATA_STRING>
		LCD_DATA_INT(volumeIndex);		// 20 symbols
 1ca:	80 91 f4 00 	lds	r24, 0x00F4
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <LCD_DATA_INT>
 1d4:	08 95       	ret

000001d6 <ampliferOff>:
/*********************
**** AMPLIFER OFF ****
*********************/
void ampliferOff(void)
{
	LCD_CLEAR_CONTAIN();
 1d6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LCD_CLEAR_CONTAIN>

	LCD_COMMAND(LCD_SELECT_1ROW);				// select row 1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
	LCD_DATA_STRING("    Amplifer Off    ");	// 20 symbols
 1e0:	89 e6       	ldi	r24, 0x69	; 105
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_DATA_STRING>

	LCD_COMMAND(LCD_OFF);						// LCD ON without CURSOR
 1e8:	88 e0       	ldi	r24, 0x08	; 8
 1ea:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>

//			FAN_low();		// PORTD5 - FAN OFF (logic "0")  NON PWM, NON TIMER1

// RELAYS OFF
	relays_out_off();	// RELAYS OUT CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
 1ee:	0e 94 2d 06 	call	0xc5a	; 0xc5a <relays_out_off>
 1f2:	88 e5       	ldi	r24, 0x58	; 88
 1f4:	9b e1       	ldi	r25, 0x1B	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f6:	20 e9       	ldi	r18, 0x90	; 144
 1f8:	31 e0       	ldi	r19, 0x01	; 1
 1fa:	f9 01       	movw	r30, r18
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <ampliferOff+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 200:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 202:	d9 f7       	brne	.-10     	; 0x1fa <ampliferOff+0x24>
	_delay_ms(700);								// PESHO COMMENT 14.08.2015, 21:10
	relays_in_off();	// RELAYS IN1 CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
 204:	0e 94 06 06 	call	0xc0c	; 0xc0c <relays_in_off>
 208:	88 e5       	ldi	r24, 0x58	; 88
 20a:	9b e1       	ldi	r25, 0x1B	; 27
 20c:	20 e9       	ldi	r18, 0x90	; 144
 20e:	31 e0       	ldi	r19, 0x01	; 1
 210:	f9 01       	movw	r30, r18
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <ampliferOff+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 216:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 218:	d9 f7       	brne	.-10     	; 0x210 <ampliferOff+0x3a>
	_delay_ms(700);								// PESHO COMMENT 14.08.2015, 21:10
	REL_POWER_low();// RELAY POWER OFF				// PESHO COMMENT 14.08.2015, 21:10
 21a:	aa 98       	cbi	0x15, 2	; 21

//	_delay_ms(50);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton

//	FAN_PWM_OFF();
//			LCD_EXECUTE_COMMAND(LCD_OFF);			// LCD OFF
	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
 21c:	94 9a       	sbi	0x12, 4	; 18
}
 21e:	08 95       	ret

00000220 <ampliferOn>:
/********************
**** AMPLIFER ON ****
********************/
void ampliferOn(void)
{
	LED_low_DISPLAYLED_high();		// PORTD4 - LED OFF (logic "0"), DISPLAY BACKLIGHT ON (logic "0"),  NON PWM, NON TIMER1
 220:	94 98       	cbi	0x12, 4	; 18

	LCD_CLEAR_CONTAIN();						// clear all contain on display
 222:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LCD_CLEAR_CONTAIN>
	LCD_COMMAND(LCD_SELECT_1ROW);				// select row 1
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
	LCD_DATA_STRING("    Amplifer On     ");	// 20 symbols
 22c:	8e e7       	ldi	r24, 0x7E	; 126
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_DATA_STRING>
	LCD_COMMAND(LCD_SELECT_2ROW);				// select row 2
 234:	80 ec       	ldi	r24, 0xC0	; 192
 236:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
	LCD_DATA_STRING("P.UPINOV  P.STOYANOV");	// 20 symbols //	LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
 23a:	83 e9       	ldi	r24, 0x93	; 147
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_DATA_STRING>
	LCD_COMMAND(LCD_ON);						// LCD ON without CURSOR
 242:	8c e0       	ldi	r24, 0x0C	; 12
 244:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
//			LCD_EXECUTE_COMMAND(LCD_SELECT_4ROW);	// select row 4
//			LCD_EXECUTE_DATA("P.UPINOV  P.STOYANOV",20);	// char "DATA", int 13 of chars of "DATA"
//	LCD_EXECUTE_COMMAND(LCD_ON);			// LCD ON without CURSOR

// RELAYS ON
	REL_POWER_high();// RELAY POWER ON TRAFs		// PESHO COMMENT 14.08.2015, 21:10
 248:	aa 9a       	sbi	0x15, 2	; 21
 24a:	80 e4       	ldi	r24, 0x40	; 64
 24c:	9c e9       	ldi	r25, 0x9C	; 156
 24e:	20 e9       	ldi	r18, 0x90	; 144
 250:	31 e0       	ldi	r19, 0x01	; 1
 252:	f9 01       	movw	r30, r18
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <ampliferOn+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 258:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25a:	d9 f7       	brne	.-10     	; 0x252 <ampliferOn+0x32>
	_delay_ms(4000);								// PESHO COMMENT 14.08.2015, 21:10
	relays_in1_6ch();	// RELAYS IN1 CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
 25c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <relays_in1_6ch>
 260:	88 e5       	ldi	r24, 0x58	; 88
 262:	9b e1       	ldi	r25, 0x1B	; 27
 264:	20 e9       	ldi	r18, 0x90	; 144
 266:	31 e0       	ldi	r19, 0x01	; 1
 268:	f9 01       	movw	r30, r18
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <ampliferOn+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 270:	d9 f7       	brne	.-10     	; 0x268 <ampliferOn+0x48>
	_delay_ms(700);									// PESHO COMMENT 14.08.2015, 21:10
	relays_out_6ch();	// RELAYS OUT CHANNELS 6	// PESHO COMMENT 14.08.2015, 21:10
 272:	0e 94 29 06 	call	0xc52	; 0xc52 <relays_out_6ch>

//			PGA2310_U8_SPI(volumeLeft, volumeRight);	// 'A', 'A', 0b01111110, 0b01111110
}
 276:	08 95       	ret

00000278 <buttons_press>:
	relays_in_init();	// ?? nujno li e ?
	relays_out_init();	// ?? nujno li e ?
}

void buttons_press()
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	c0 e9       	ldi	r28, 0x90	; 144
 27e:	d1 e0       	ldi	r29, 0x01	; 1
//	unsigned char pgaVolumeLeft, pgaVolumeRight;
//	pgaVolumeLeft = pgaVolumeRight = 0b00001111;

	while(1)
	{
		if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 0)	// obj ptr flagStatusBtnRegister from struct flagStatusBtnOnOff
 280:	b1 99       	sbic	0x16, 1	; 22
 282:	13 c0       	rjmp	.+38     	; 0x2aa <buttons_press+0x32>
 284:	e0 91 00 01 	lds	r30, 0x0100
 288:	f0 91 01 01 	lds	r31, 0x0101
 28c:	80 81       	ld	r24, Z
 28e:	80 fd       	sbrc	r24, 0
 290:	0c c0       	rjmp	.+24     	; 0x2aa <buttons_press+0x32>
		{
			flagStatusBits->flagPower = 1;			// filter za buton ON
 292:	81 60       	ori	r24, 0x01	; 1
 294:	80 83       	st	Z, r24
			ampliferOn();
 296:	0e 94 10 01 	call	0x220	; 0x220 <ampliferOn>
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	97 e2       	ldi	r25, 0x27	; 39
 29e:	fe 01       	movw	r30, r28
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <buttons_press+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a6:	d9 f7       	brne	.-10     	; 0x29e <buttons_press+0x26>
 2a8:	eb cf       	rjmp	.-42     	; 0x280 <buttons_press+0x8>
			_delay_ms(1000);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton
		}
		else if(BUTTON_ON_OFF_low() && flagStatusBits->flagPower == 1)
 2aa:	b1 99       	sbic	0x16, 1	; 22
 2ac:	13 c0       	rjmp	.+38     	; 0x2d4 <buttons_press+0x5c>
 2ae:	e0 91 00 01 	lds	r30, 0x0100
 2b2:	f0 91 01 01 	lds	r31, 0x0101
 2b6:	80 81       	ld	r24, Z
 2b8:	80 ff       	sbrs	r24, 0
 2ba:	0c c0       	rjmp	.+24     	; 0x2d4 <buttons_press+0x5c>
		{
			flagStatusBits->flagPower = 0;			// filter za buton OFF
 2bc:	8e 7f       	andi	r24, 0xFE	; 254
 2be:	80 83       	st	Z, r24
			ampliferOff();
 2c0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <ampliferOff>
 2c4:	88 e8       	ldi	r24, 0x88	; 136
 2c6:	93 e1       	ldi	r25, 0x13	; 19
 2c8:	fe 01       	movw	r30, r28
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <buttons_press+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d0:	d9 f7       	brne	.-10     	; 0x2c8 <buttons_press+0x50>
 2d2:	d6 cf       	rjmp	.-84     	; 0x280 <buttons_press+0x8>
			_delay_ms(500);	// izchakvane za natiskane i otpuskane na buton - filtar treptqsht kontakt buton
		}
		else if(BUTTON_ESC_low() && flagStatusBits->flagPower == 1)
 2d4:	b2 99       	sbic	0x16, 2	; 22
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <buttons_press+0x7e>
 2d8:	e0 91 00 01 	lds	r30, 0x0100
 2dc:	f0 91 01 01 	lds	r31, 0x0101
 2e0:	80 81       	ld	r24, Z
 2e2:	80 ff       	sbrs	r24, 0
 2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <buttons_press+0x7e>
 2e6:	88 e8       	ldi	r24, 0x88	; 136
 2e8:	93 e1       	ldi	r25, 0x13	; 19
 2ea:	fe 01       	movw	r30, r28
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <buttons_press+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f2:	d9 f7       	brne	.-10     	; 0x2ea <buttons_press+0x72>
 2f4:	c5 cf       	rjmp	.-118    	; 0x280 <buttons_press+0x8>
//			LCD_COMMAND(LCD_ON);
			_delay_ms(500);
//			volumeUp();
//			_delay_ms(200);
		}
		else if(BUTTON_ENCODER_low() && flagStatusBits->flagPower == 1)
 2f6:	83 99       	sbic	0x10, 3	; 16
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <buttons_press+0xa0>
 2fa:	e0 91 00 01 	lds	r30, 0x0100
 2fe:	f0 91 01 01 	lds	r31, 0x0101
 302:	80 81       	ld	r24, Z
 304:	80 ff       	sbrs	r24, 0
 306:	08 c0       	rjmp	.+16     	; 0x318 <buttons_press+0xa0>
 308:	88 e8       	ldi	r24, 0x88	; 136
 30a:	93 e1       	ldi	r25, 0x13	; 19
 30c:	fe 01       	movw	r30, r28
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <buttons_press+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 312:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 314:	d9 f7       	brne	.-10     	; 0x30c <buttons_press+0x94>
 316:	b4 cf       	rjmp	.-152    	; 0x280 <buttons_press+0x8>
			_delay_ms(500);
//			volumeDown();
//			_delay_ms(200);

		}
		else if(BUTTON_ESC_low() && flagStatusBits->flagPower == 0)
 318:	b2 99       	sbic	0x16, 2	; 22
 31a:	11 c0       	rjmp	.+34     	; 0x33e <buttons_press+0xc6>
 31c:	e0 91 00 01 	lds	r30, 0x0100
 320:	f0 91 01 01 	lds	r31, 0x0101
 324:	80 81       	ld	r24, Z
 326:	80 fd       	sbrc	r24, 0
 328:	0a c0       	rjmp	.+20     	; 0x33e <buttons_press+0xc6>
		{
			LCD_CLEAR_CONTAIN();
 32a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LCD_CLEAR_CONTAIN>
 32e:	88 e8       	ldi	r24, 0x88	; 136
 330:	93 e1       	ldi	r25, 0x13	; 19
 332:	fe 01       	movw	r30, r28
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <buttons_press+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 338:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33a:	d9 f7       	brne	.-10     	; 0x332 <buttons_press+0xba>
 33c:	a1 cf       	rjmp	.-190    	; 0x280 <buttons_press+0x8>
//			LCD_COMMAND(LCD_ON);
			_delay_ms(500);
//			setupMode();
//			_delay_ms(1000);
		}
		else if(BUTTON_ENCODER_low() && flagStatusBits->flagPower == 0)
 33e:	83 99       	sbic	0x10, 3	; 16
 340:	0f c0       	rjmp	.+30     	; 0x360 <buttons_press+0xe8>
 342:	e0 91 00 01 	lds	r30, 0x0100
 346:	f0 91 01 01 	lds	r31, 0x0101
 34a:	80 81       	ld	r24, Z
 34c:	80 fd       	sbrc	r24, 0
 34e:	08 c0       	rjmp	.+16     	; 0x360 <buttons_press+0xe8>
 350:	88 e8       	ldi	r24, 0x88	; 136
 352:	93 e1       	ldi	r25, 0x13	; 19
 354:	fe 01       	movw	r30, r28
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <buttons_press+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 35c:	d9 f7       	brne	.-10     	; 0x354 <buttons_press+0xdc>
 35e:	90 cf       	rjmp	.-224    	; 0x280 <buttons_press+0x8>
//			about();
//			_delay_ms(1000);
		}
		else //if(flagStatusBits->flagPower == 0)	// zashto ne raboti encoder-a kogato se proverqva bita flagPower?
		{
			rotaryEncoder();	// v momenta na zavartane na encodera flaga stava nula flagStatusBits->flagPower = 0, zashto ???
 360:	0e 94 a3 00 	call	0x146	; 0x146 <rotaryEncoder>
 364:	8d cf       	rjmp	.-230    	; 0x280 <buttons_press+0x8>

00000366 <main>:
********************************************************************************************/

int main(void)
{

	init_all();				// inicializacia na vsichko
 366:	0e 94 98 00 	call	0x130	; 0x130 <init_all>

	sei();							// file "avr/interrupt.h"
 36a:	78 94       	sei
//	SREG = (1<<I);

	LED_high_DISPLAYLED_low();		// PORTD4 - LED ON (logic "1"), DISPLAY BACKLIGHT OFF (logic "1"),  NON PWM, NON TIMER1
 36c:	94 9a       	sbi	0x12, 4	; 18
	while(1)
	{
//		struct flagStatusBtnOnOff flagStatusBtnRegister;	// obj flagStatusBtnRegister from struct flagStatusBtnOnOff
//		flagStatusBtnRegister.bit0 = 0;
		
		buttons_press();	// izchakvane za natiskane na buton
 36e:	0e 94 3c 01 	call	0x278	; 0x278 <buttons_press>
 372:	fd cf       	rjmp	.-6      	; 0x36e <main+0x8>

00000374 <eeprom_24c64_read>:
	// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
	// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !
	
	byte eepromReceiveByte0, eepromReceiveByte1, eepromReceiveByte2, eepromReceiveByte3, eepromReceiveByte4, eepromReceiveByte5;
// EEPROM READ
	i2c_start();
 374:	0e 94 c8 02 	call	0x590	; 0x590 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);		// EEPROM 24C64 ADDRESS ACCESS WRITE
 378:	80 ea       	ldi	r24, 0xA0	; 160
 37a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>

	i2c_start();
 38a:	0e 94 c8 02 	call	0x590	; 0x590 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_READ);		// EEPROM 24C64 ADDRESS ACCESS READ
 38e:	81 ea       	ldi	r24, 0xA1	; 161
 390:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	eepromReceiveByte0	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_read>
	eepromReceiveByte1	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_read>
	eepromReceiveByte2	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_read>
	eepromReceiveByte3	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_read>
	eepromReceiveByte4	= i2c_read(0);				// EEPROM DATA READ BYTE	// i2c_read(0) parametar raven na 0 prodaljava komunikaciqta kato potvarjdava ACK
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_read>
	eepromReceiveByte5	= i2c_read(1);				// EEPROM DATA READ BYTE	// i2c_read(1) parametar razlichen ot 0 spira komunikaciqta NACK
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_read>
	i2c_stop();
 3b8:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_stop>
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte2);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte3);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte4);
	LCD_EXECUTE_DATA_ONE(eepromReceiveByte5);
*/
}
 3bc:	08 95       	ret

000003be <eeprom_24c64_write>:
// Za da se vijda tova koeto se e zapisalo v pametta, a ne ot tozi bibliotechen fail !!!!!!!!!
// ZA TAZI CEL TRQBVA DA IMA UKAZATEL/MASIV KOITO DA VARNE REZULTATA OT CHETENETO NA PAMETTA
// SAMO AKO E NUJNO DA SE VIJDA KAKVO E BILO ZAPISANO !

// EEPROM WRITE
	i2c_start();
 3be:	0e 94 c8 02 	call	0x590	; 0x590 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
 3c2:	80 ea       	ldi	r24, 0xA0	; 160
 3c4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
// Write data
	i2c_write(0x30);	// Data is stored: 0x30 - '0'
 3d4:	80 e3       	ldi	r24, 0x30	; 48
 3d6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	i2c_write(0x31);	// Data is stored: 0x31 - '1'
 3da:	81 e3       	ldi	r24, 0x31	; 49
 3dc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	i2c_write(0x32);	// Data is stored: 0x32 - '2'
 3e0:	82 e3       	ldi	r24, 0x32	; 50
 3e2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	i2c_write(0x33);	// Data is stored: 0x33 - '3'
 3e6:	83 e3       	ldi	r24, 0x33	; 51
 3e8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	i2c_write(0x34);	// Data is stored: 0x34 - '4'
 3ec:	84 e3       	ldi	r24, 0x34	; 52
 3ee:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	i2c_stop();
 3f2:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_stop>
}
 3f6:	08 95       	ret

000003f8 <eeprom_24c64_reset>:

/*************************************
** RESET AND ZERO FILL EEPROM 24C64 **
*************************************/
void eeprom_24c64_reset()
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
	unsigned int i;	// 16 bits
// EEPROM WRITE
	i2c_start();
 3fc:	0e 94 c8 02 	call	0x590	; 0x590 <i2c_start>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
 400:	80 ea       	ldi	r24, 0xA0	; 160
 402:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
 412:	c0 e0       	ldi	r28, 0x00	; 0
 414:	d0 e0       	ldi	r29, 0x00	; 0
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_write>
	i2c_write(EEPROM_24C64_I2C_ADDRESS_WRITE);	// EEPROM AT24C64 ADDRESS ACCESS WRITE
// HIGH and LOW BYTE ADDRESS
	i2c_write(EEPROM_24C64_I2C_HIGH_BYTE_ADDRESS_MIN);	// HIGH STORE ADDRESS
	i2c_write(EEPROM_24C64_I2C_LOW_BYTE_ADDRESS_MIN);	// LOW  STORE ADDRESS	
// Write data
	for(i=0; i<8191; i++)	// from 0x0000 to 0x1FFF
 41c:	21 96       	adiw	r28, 0x01	; 1
 41e:	8f e1       	ldi	r24, 0x1F	; 31
 420:	cf 3f       	cpi	r28, 0xFF	; 255
 422:	d8 07       	cpc	r29, r24
 424:	c1 f7       	brne	.-16     	; 0x416 <eeprom_24c64_reset+0x1e>
	{
		i2c_write(0b00000000);	// Data is stored: 0x00 from Address 0x00 to 0xFF
	}
	i2c_stop();
 426:	0e 94 ce 02 	call	0x59c	; 0x59c <i2c_stop>
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <reset>:
}
*/

unsigned char reset(void)
{
    DDRx |= (1<<Px);            //Ausgang
 430:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 432:	c0 98       	cbi	0x18, 0	; 24
 434:	80 e8       	ldi	r24, 0x80	; 128
 436:	97 e0       	ldi	r25, 0x07	; 7
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <reset+0x8>
    _delay_us(480);
	DDRx &= ~(1<<Px);
 43c:	b8 98       	cbi	0x17, 0	; 23
 43e:	80 e4       	ldi	r24, 0x40	; 64
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <reset+0x12>
    _delay_us(80);
	if(!(PINx & (1<<Px)))     //Prüfe Slave-Antwort
 446:	b0 9b       	sbis	0x16, 0	; 22
 448:	02 c0       	rjmp	.+4      	; 0x44e <reset+0x1e>
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret
 44e:	88 e0       	ldi	r24, 0x08	; 8
 450:	97 e0       	ldi	r25, 0x07	; 7
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <reset+0x22>
 456:	81 e0       	ldi	r24, 0x01	; 1
	}
    else
	{
        return 0;
	}
}
 458:	08 95       	ret

0000045a <read_bit>:

unsigned char read_bit(void)
{
    DDRx |= (1<<Px);            //Ausgang
 45a:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 45c:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 45e:	85 e0       	ldi	r24, 0x05	; 5
 460:	8a 95       	dec	r24
 462:	f1 f7       	brne	.-4      	; 0x460 <read_bit+0x6>
    _delay_us(1);
	DDRx &= ~(1<<Px);
 464:	b8 98       	cbi	0x17, 0	; 23
 466:	80 e4       	ldi	r24, 0x40	; 64
 468:	8a 95       	dec	r24
 46a:	f1 f7       	brne	.-4      	; 0x468 <read_bit+0xe>
    _delay_us(12);
    if(!(PINx & (1<<Px)))       //Abtastung innerhalb von 15µs
 46c:	86 b3       	in	r24, 0x16	; 22
	}
	else
    {
		return 1;
	}
}
 46e:	81 70       	andi	r24, 0x01	; 1
 470:	08 95       	ret

00000472 <write_bit>:

void write_bit(unsigned char bitval)    //kann 0 oder 1 sein
{
    DDRx |= (1<<Px);            //Ausgang
 472:	b8 9a       	sbi	0x17, 0	; 23
	PORTx &= ~(1<<Px);
 474:	c0 98       	cbi	0x18, 0	; 24
    if(bitval)
 476:	81 11       	cpse	r24, r1
	{
        PORTx |= (1<<Px);      //H-Pegel
 478:	c0 9a       	sbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 47a:	88 eb       	ldi	r24, 0xB8	; 184
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <write_bit+0xc>
    }
	_delay_us(110);        
    DDRx &= ~(1<<Px);
 482:	b8 98       	cbi	0x17, 0	; 23
    PORTx &= ~(1<<Px);
 484:	c0 98       	cbi	0x18, 0	; 24
}
 486:	08 95       	ret

00000488 <read_byte>:

unsigned char read_byte(void)
{
 488:	cf 92       	push	r12
 48a:	df 92       	push	r13
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	10 e0       	ldi	r17, 0x00	; 0
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
		{
            byte |= (1<<i);
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	c9 2e       	mov	r12, r25
 4a0:	d1 2c       	mov	r13, r1
 4a2:	80 ee       	ldi	r24, 0xE0	; 224
 4a4:	e8 2e       	mov	r14, r24
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	f8 2e       	mov	r15, r24
unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
	{
        if(read_bit ())
 4aa:	0e 94 2d 02 	call	0x45a	; 0x45a <read_bit>
 4ae:	88 23       	and	r24, r24
 4b0:	41 f0       	breq	.+16     	; 0x4c2 <read_byte+0x3a>
		{
            byte |= (1<<i);
 4b2:	c6 01       	movw	r24, r12
 4b4:	0c 2e       	mov	r0, r28
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <read_byte+0x34>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <read_byte+0x30>
 4c0:	18 2b       	or	r17, r24
 4c2:	c7 01       	movw	r24, r14
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <read_byte+0x3c>
 4c8:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char read_byte(void)
{
    unsigned char byte = 0;
    for(unsigned char i=0; i<8; i++)
 4ca:	c8 30       	cpi	r28, 0x08	; 8
 4cc:	d1 05       	cpc	r29, r1
 4ce:	69 f7       	brne	.-38     	; 0x4aa <read_byte+0x22>
            byte |= (1<<i);
		}
        _delay_us(120);
    }
    return byte;
}
 4d0:	81 2f       	mov	r24, r17
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	ff 90       	pop	r15
 4da:	ef 90       	pop	r14
 4dc:	df 90       	pop	r13
 4de:	cf 90       	pop	r12
 4e0:	08 95       	ret

000004e2 <write_byte>:

void write_byte(unsigned char byte)
{
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	c0 e0       	ldi	r28, 0x00	; 0
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
    for(unsigned char i=0; i<8; i++)
	{
        if(byte & (1<<i))
 4ee:	08 2f       	mov	r16, r24
 4f0:	10 e0       	ldi	r17, 0x00	; 0
 4f2:	c8 01       	movw	r24, r16
 4f4:	0c 2e       	mov	r0, r28
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <write_byte+0x1a>
 4f8:	95 95       	asr	r25
 4fa:	87 95       	ror	r24
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <write_byte+0x16>
 500:	80 ff       	sbrs	r24, 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <write_byte+0x26>
		{
			write_bit(1);
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	01 c0       	rjmp	.+2      	; 0x50a <write_byte+0x28>
		}
        else
		{
            write_bit(0);
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 39 02 	call	0x472	; 0x472 <write_bit>
 50e:	21 96       	adiw	r28, 0x01	; 1
    return byte;
}

void write_byte(unsigned char byte)
{
    for(unsigned char i=0; i<8; i++)
 510:	c8 30       	cpi	r28, 0x08	; 8
 512:	d1 05       	cpc	r29, r1
 514:	71 f7       	brne	.-36     	; 0x4f2 <write_byte+0x10>
 516:	80 ee       	ldi	r24, 0xE0	; 224
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <write_byte+0x38>
		{
            write_bit(0);
		}
	}
    _delay_us(120);
}  
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	08 95       	ret

00000528 <wait_ready>:
	return 0;
}

void wait_ready(void)
{
	while(!(read_bit()));
 528:	0e 94 2d 02 	call	0x45a	; 0x45a <read_bit>
 52c:	88 23       	and	r24, r24
 52e:	e1 f3       	breq	.-8      	; 0x528 <wait_ready>
}
 530:	08 95       	ret

00000532 <read_scratchpad>:
	}
    _delay_us(120);
}  

unsigned char read_scratchpad(void)
{
 532:	cf 93       	push	r28
 534:	df 93       	push	r29

	if(reset())
 536:	0e 94 18 02 	call	0x430	; 0x430 <reset>
 53a:	88 23       	and	r24, r24
 53c:	e9 f0       	breq	.+58     	; 0x578 <read_scratchpad+0x46>
	{
		write_byte(0xCC);
 53e:	8c ec       	ldi	r24, 0xCC	; 204
 540:	0e 94 71 02 	call	0x4e2	; 0x4e2 <write_byte>
		write_byte(0x44);
 544:	84 e4       	ldi	r24, 0x44	; 68
 546:	0e 94 71 02 	call	0x4e2	; 0x4e2 <write_byte>
		wait_ready();
 54a:	0e 94 94 02 	call	0x528	; 0x528 <wait_ready>
		if(reset())
 54e:	0e 94 18 02 	call	0x430	; 0x430 <reset>
 552:	88 23       	and	r24, r24
 554:	89 f0       	breq	.+34     	; 0x578 <read_scratchpad+0x46>
		{
			write_byte(0xCC);
 556:	8c ec       	ldi	r24, 0xCC	; 204
 558:	0e 94 71 02 	call	0x4e2	; 0x4e2 <write_byte>
			write_byte(0xBE);
 55c:	8e eb       	ldi	r24, 0xBE	; 190
 55e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <write_byte>
 562:	c5 ef       	ldi	r28, 0xF5	; 245
 564:	d0 e0       	ldi	r29, 0x00	; 0
			for(unsigned char i=0; i<9; i++)
			{
				scratchpad [i] = read_byte();
 566:	0e 94 44 02 	call	0x488	; 0x488 <read_byte>
 56a:	89 93       	st	Y+, r24
		wait_ready();
		if(reset())
		{
			write_byte(0xCC);
			write_byte(0xBE);
			for(unsigned char i=0; i<9; i++)
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	ce 3f       	cpi	r28, 0xFE	; 254
 570:	d8 07       	cpc	r29, r24
 572:	c9 f7       	brne	.-14     	; 0x566 <read_scratchpad+0x34>
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	01 c0       	rjmp	.+2      	; 0x57a <read_scratchpad+0x48>
 578:	80 e0       	ldi	r24, 0x00	; 0
			}
			return 1;
		}
	}
	return 0;
}
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <i2c_init>:
|== TWPS = 1 => (4^TWPS)= 4  // TWSR = (0<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx01 => TWSR = 1 (DEC) => 4^1 =  4 =|
|== TWPS = 2 => (4^TWPS)=16  // TWSR = (1<<TWPS1)|(0<<TWPS0) => TWSR = 0bxxxxxx10 => TWSR = 2 (DEC) => 4^2 = 16 =|
|== TWPS = 3 => (4^TWPS)=64  // TWSR = (1<<TWPS1)|(1<<TWPS0) => TWSR = 0bxxxxxx11 => TWSR = 3 (DEC) => 4^3 = 64 =|
|===============================================================================================================*/

	TWBR = 0b00010010;	// HEX=0x12	or DEC=18	// FCPU = 16 000 000 |-> SCL = 16000000 / (16+(2*TWBR*(4^TWPS)) = 16000000 / (16+(2*18*(4))) = 16000000 / 160 = 100 000 Hz = 100 kHz
 580:	82 e1       	ldi	r24, 0x12	; 18
 582:	80 b9       	out	0x00, r24	; 0
	TWSR = (0<<TWPS1)|(1<<TWPS0);	// SCL = 16 000 000 / 64  = 250 000 = 250kHz
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	81 b9       	out	0x01, r24	; 1
	TWCR = (1<<TWEN);	//	TWCR = 0x04; // TWCR = (x<<TWINT)|(x<<TWEA)|(x<<TWSTA)|(x<<TWSTO)|(x<<TWEN)|(x<<TWIE);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz
 588:	84 e0       	ldi	r24, 0x04	; 4
 58a:	86 bf       	out	0x36, r24	; 54
	TWDR = 0b00000000;
 58c:	13 b8       	out	0x03, r1	; 3
}
 58e:	08 95       	ret

00000590 <i2c_start>:
/*****************************************
** START CONDITION OF I2C COMMUNICATION **
*****************************************/
void i2c_start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 590:	84 ea       	ldi	r24, 0xA4	; 164
 592:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
 594:	06 b6       	in	r0, 0x36	; 54
 596:	07 fe       	sbrs	r0, 7
 598:	fd cf       	rjmp	.-6      	; 0x594 <i2c_start+0x4>
	{
	}
}
 59a:	08 95       	ret

0000059c <i2c_stop>:
/****************************************
** STOP CONDITION OF I2C COMMUNICATION **
****************************************/
void i2c_stop()
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 59c:	84 e9       	ldi	r24, 0x94	; 148
 59e:	86 bf       	out	0x36, r24	; 54
}
 5a0:	08 95       	ret

000005a2 <i2c_write>:
/*******************************************
** WRITE/SEND 1 BYTE OF I2C COMMUNICATION **
*******************************************/
void i2c_write(unsigned char data)
{
	TWDR = data;
 5a2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 5a4:	84 e8       	ldi	r24, 0x84	; 132
 5a6:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1<<TWINT)) == 0)
 5a8:	06 b6       	in	r0, 0x36	; 54
 5aa:	07 fe       	sbrs	r0, 7
 5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <i2c_write+0x6>
	{
	}
}
 5ae:	08 95       	ret

000005b0 <i2c_read>:
/**********************************************
** READ/RECEIVE BYTE(S) OF I2C COMMUNICATION **
**********************************************/
unsigned char i2c_read(unsigned char isLast)
{
	if(isLast == 0 )
 5b0:	88 23       	and	r24, r24
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <i2c_read+0x8>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);	// to next receive byte
 5b4:	84 ec       	ldi	r24, 0xC4	; 196
 5b6:	01 c0       	rjmp	.+2      	; 0x5ba <i2c_read+0xa>
	}
	else
	{
		TWCR = (1<<TWINT)|(1<<TWEN);			// to end of communication
 5b8:	84 e8       	ldi	r24, 0x84	; 132
 5ba:	86 bf       	out	0x36, r24	; 54
	}
	
	while((TWCR & (1<<TWINT)) == 0)
 5bc:	06 b6       	in	r0, 0x36	; 54
 5be:	07 fe       	sbrs	r0, 7
 5c0:	fd cf       	rjmp	.-6      	; 0x5bc <i2c_read+0xc>
	{
	}
	return TWDR;
 5c2:	83 b1       	in	r24, 0x03	; 3
}
 5c4:	08 95       	ret

000005c6 <LCD_EXECUTE_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_EXECUTE_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
 5c6:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 5c8:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 5ca:	87 ff       	sbrs	r24, 7
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <LCD_EXECUTE_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 5ce:	d8 9a       	sbi	0x1b, 0	; 27
 5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <LCD_EXECUTE_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
 5d2:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 5d4:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 5d6:	9f 5f       	subi	r25, 0xFF	; 255
 5d8:	98 30       	cpi	r25, 0x08	; 8
 5da:	11 f0       	breq	.+4      	; 0x5e0 <LCD_EXECUTE_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 5dc:	88 0f       	add	r24, r24
 5de:	f4 cf       	rjmp	.-24     	; 0x5c8 <LCD_EXECUTE_COMMAND+0x2>
	}
//update from down comment
	LCD_REGSELECT_low();	// RS = 0
 5e0:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 5e2:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 5e4:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
	LCD_RCK_low();
 5e6:	da 98       	cbi	0x1b, 2	; 27
 5e8:	88 ea       	ldi	r24, 0xA8	; 168
 5ea:	92 e0       	ldi	r25, 0x02	; 2
 5ec:	fc 01       	movw	r30, r24
 5ee:	31 97       	sbiw	r30, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_EXECUTE_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 5f2:	da 9a       	sbi	0x1b, 2	; 27
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <LCD_EXECUTE_COMMAND+0x2e>
	LCD_REGSELECT_low();	// RS = 0
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);			//rcall 180 us
*/
	LCD_ENABLE_low();		// EN = 0
 5f8:	db 98       	cbi	0x1b, 3	; 27
 5fa:	80 e9       	ldi	r24, 0x90	; 144
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <LCD_EXECUTE_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us

}
 602:	08 95       	ret

00000604 <LCD_EXECUTE_DATA>:

/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	a8 ea       	ldi	r26, 0xA8	; 168
 60e:	b2 e0       	ldi	r27, 0x02	; 2
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];
 610:	c0 e9       	ldi	r28, 0x90	; 144
 612:	d1 e0       	ldi	r29, 0x01	; 1
 614:	22 c0       	rjmp	.+68     	; 0x65a <LCD_EXECUTE_DATA+0x56>
 616:	fc 01       	movw	r30, r24
 618:	e4 0f       	add	r30, r20
 61a:	f5 1f       	adc	r31, r21
 61c:	e0 81       	ld	r30, Z
 61e:	20 e0       	ldi	r18, 0x00	; 0

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
 620:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 622:	e7 ff       	sbrs	r30, 7
 624:	02 c0       	rjmp	.+4      	; 0x62a <LCD_EXECUTE_DATA+0x26>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 626:	d8 9a       	sbi	0x1b, 0	; 27
 628:	01 c0       	rjmp	.+2      	; 0x62c <LCD_EXECUTE_DATA+0x28>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 62a:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
 62c:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = data[count_ns];

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 62e:	2f 5f       	subi	r18, 0xFF	; 255
 630:	28 30       	cpi	r18, 0x08	; 8
 632:	11 f0       	breq	.+4      	; 0x638 <LCD_EXECUTE_DATA+0x34>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 634:	ee 0f       	add	r30, r30
 636:	f4 cf       	rjmp	.-24     	; 0x620 <LCD_EXECUTE_DATA+0x1c>
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
 638:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
 63a:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
 63c:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
 63e:	da 98       	cbi	0x1b, 2	; 27
 640:	fd 01       	movw	r30, r26
 642:	31 97       	sbiw	r30, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <LCD_EXECUTE_DATA+0x3e>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
 646:	da 9a       	sbi	0x1b, 2	; 27
 648:	fd 01       	movw	r30, r26
 64a:	31 97       	sbiw	r30, 0x01	; 1
 64c:	f1 f7       	brne	.-4      	; 0x64a <LCD_EXECUTE_DATA+0x46>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
 64e:	db 98       	cbi	0x1b, 3	; 27
 650:	fe 01       	movw	r30, r28
 652:	31 97       	sbiw	r30, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <LCD_EXECUTE_DATA+0x4e>
/**************************************************
** WRITE/TRANSMIT MORE DATA BYTES TO LCD DISPLAY **
**************************************************/
void LCD_EXECUTE_DATA(char data [], int numsymbols)	// HELP: LCD_EXECUTE_DATA(char masive_of_byte_symbols, int number_of_masive_byte_symbols) // LCD shift left out, msb is first
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols+1 -> za string ima nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
 656:	4f 5f       	subi	r20, 0xFF	; 255
 658:	5f 4f       	sbci	r21, 0xFF	; 255
 65a:	46 17       	cp	r20, r22
 65c:	57 07       	cpc	r21, r23
 65e:	dc f2       	brlt	.-74     	; 0x616 <LCD_EXECUTE_DATA+0x12>
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}

//	LCD_EXECUTE_DATA_LAST();	// flush -> posleden simvol ili gore v cikala count_ns < numsymbols+1 ili count_ns <= numsymbols
}
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <LCD_EXECUTE_DATA_ONE>:

/************************************************
** WRITE/TRANSMIT ONE DATA BYTE TO LCD DISPLAY **
************************************************/
void LCD_EXECUTE_DATA_ONE(unsigned char data)	// HELP: LCD_EXECUTE_DATA(unsigned char data_byte_symbols) // LCD shift left out, msb is first
{
 666:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 668:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 66a:	87 ff       	sbrs	r24, 7
 66c:	02 c0       	rjmp	.+4      	; 0x672 <LCD_EXECUTE_DATA_ONE+0xc>
		{
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 66e:	d8 9a       	sbi	0x1b, 0	; 27
 670:	01 c0       	rjmp	.+2      	; 0x674 <LCD_EXECUTE_DATA_ONE+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 672:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 674:	d9 9a       	sbi	0x1b, 1	; 27
{
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = data;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 676:	9f 5f       	subi	r25, 0xFF	; 255
 678:	98 30       	cpi	r25, 0x08	; 8
 67a:	11 f0       	breq	.+4      	; 0x680 <LCD_EXECUTE_DATA_ONE+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 67c:	88 0f       	add	r24, r24
 67e:	f4 cf       	rjmp	.-24     	; 0x668 <LCD_EXECUTE_DATA_ONE+0x2>
	}
//update from down comment
	LCD_REGSELECT_high();	// RS = 1
 680:	dd 9a       	sbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 682:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 684:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment

	LCD_RCK_low();
 686:	da 98       	cbi	0x1b, 2	; 27
 688:	88 ea       	ldi	r24, 0xA8	; 168
 68a:	92 e0       	ldi	r25, 0x02	; 2
 68c:	fc 01       	movw	r30, r24
 68e:	31 97       	sbiw	r30, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <LCD_EXECUTE_DATA_ONE+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 692:	da 9a       	sbi	0x1b, 2	; 27
 694:	01 97       	sbiw	r24, 0x01	; 1
 696:	f1 f7       	brne	.-4      	; 0x694 <LCD_EXECUTE_DATA_ONE+0x2e>
	LCD_REGSELECT_high();	// RS = 1
	LCD_READWRITE_low();	// RW = 0
	LCD_ENABLE_high();		// EN = 1
	_delay_us(100);
*/
	LCD_ENABLE_low();		// EN = 0
 698:	db 98       	cbi	0x1b, 3	; 27
 69a:	80 e9       	ldi	r24, 0x90	; 144
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <LCD_EXECUTE_DATA_ONE+0x38>
	_delay_us(100);
}
 6a2:	08 95       	ret

000006a4 <LCD_EXECUTE_DATA_LAST>:
/*****************************************************************************
** WRITE/TRANSMIT LAST DATA BYTE TO LCD DISPLAY AND FLUSH SN74HC595 BUFFER  **
*****************************************************************************/
void LCD_EXECUTE_DATA_LAST()	// flush -> izchistvane na bufer - prinuditelno izpisvane na posleden simvol
{
	LCD_ENABLE_low();
 6a4:	db 98       	cbi	0x1b, 3	; 27
	LCD_READWRITE_low();
 6a6:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
 6a8:	dd 9a       	sbi	0x1b, 5	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6aa:	85 ed       	ldi	r24, 0xD5	; 213
 6ac:	98 2f       	mov	r25, r24
 6ae:	9a 95       	dec	r25
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <LCD_EXECUTE_DATA_LAST+0xa>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
	LCD_ENABLE_high();
 6b2:	db 9a       	sbi	0x1b, 3	; 27
	LCD_READWRITE_low();
 6b4:	dc 98       	cbi	0x1b, 4	; 27
	LCD_REGSELECT_high();
 6b6:	dd 9a       	sbi	0x1b, 5	; 27
 6b8:	8a 95       	dec	r24
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <LCD_EXECUTE_DATA_LAST+0x14>
	_delay_us(40);				// from 100 or 180 //rcall 180 us
}
 6bc:	08 95       	ret

000006be <LCD_COMMAND>:

/******************************************
** WRITE/TRANSMIT COMMAND TO LCD DISPLAY **
******************************************/
void LCD_COMMAND(unsigned char command)	// HELP: LCD_EXECUTE_COMMAND(unsigned char byte_choose_a_command) // LCD shift left out, msb is first
{
 6be:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		LCD_SCK_low();
 6c0:	d9 98       	cbi	0x1b, 1	; 27

		if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 6c2:	87 ff       	sbrs	r24, 7
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <LCD_COMMAND+0xc>
		{	
			LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 6c6:	d8 9a       	sbi	0x1b, 0	; 27
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <LCD_COMMAND+0xe>
		}
		else
		{
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
 6ca:	d8 98       	cbi	0x1b, 0	; 27
		}

		LCD_SCK_high();		
 6cc:	d9 9a       	sbi	0x1b, 1	; 27
	unsigned char conbyte = command;
	unsigned char storeMSB;
	unsigned char x;
	storeMSB = conbyte;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 6ce:	9f 5f       	subi	r25, 0xFF	; 255
 6d0:	98 30       	cpi	r25, 0x08	; 8
 6d2:	11 f0       	breq	.+4      	; 0x6d8 <LCD_COMMAND+0x1a>
			LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);	
		}

		LCD_SCK_high();		

		storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 6d4:	88 0f       	add	r24, r24
 6d6:	f4 cf       	rjmp	.-24     	; 0x6c0 <LCD_COMMAND+0x2>
	}
//update from down comment
	LCD_REGSELECT_low();	// RS = 0
 6d8:	dd 98       	cbi	0x1b, 5	; 27
	LCD_READWRITE_low();	// RW = 0
 6da:	dc 98       	cbi	0x1b, 4	; 27
	LCD_ENABLE_high();		// EN = 1
 6dc:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
	LCD_RCK_low();
 6de:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6e0:	88 ea       	ldi	r24, 0xA8	; 168
 6e2:	92 e0       	ldi	r25, 0x02	; 2
 6e4:	fc 01       	movw	r30, r24
 6e6:	31 97       	sbiw	r30, 0x01	; 1
 6e8:	f1 f7       	brne	.-4      	; 0x6e6 <LCD_COMMAND+0x28>
	_delay_us(170);			//rcall 180 us
	LCD_RCK_high();
 6ea:	da 9a       	sbi	0x1b, 2	; 27
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_COMMAND+0x2e>
	_delay_us(170);			//rcall 180 us

	LCD_ENABLE_low();		// EN = 0
 6f0:	db 98       	cbi	0x1b, 3	; 27
 6f2:	80 e9       	ldi	r24, 0x90	; 144
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	01 97       	sbiw	r24, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <LCD_COMMAND+0x38>
	_delay_us(100);			//rcall 180 us
}
 6fa:	08 95       	ret

000006fc <LCD_CLEAR_CONTAIN>:
/**************************************
** CLEAR ALL CONTAINS ON LCD DISPLAY **
**************************************/
void LCD_CLEAR_CONTAIN()
{
	LCD_COMMAND(LCD_CLEAR);						// 0b00000001	// 1. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
 702:	80 ec       	ldi	r24, 0xC0	; 192
 704:	92 e1       	ldi	r25, 0x12	; 18
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	f1 f7       	brne	.-4      	; 0x706 <LCD_CLEAR_CONTAIN+0xa>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
}
 70a:	08 95       	ret

0000070c <LCD_INIT>:
/**********************************
** INITIZLIZATION OF LCD DISPLAY **
**********************************/
void LCD_INIT()
{
	LCD_COMMAND(LCD_8BIT_2ROWS_FONT5X7);		// 0b00111000	// 1. Function set: 8-bit interface data (DL = 1), 2-line display (N = 1), 5 x 7 dot character font (F = 0)
 70c:	88 e3       	ldi	r24, 0x38	; 56
 70e:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_ENTRY_MODE_INC_NOSHIFT);	// 0b00000110	// 2. Entry mode set: Increment by 1 (I/D = 1), No shift (S = 0)
 712:	86 e0       	ldi	r24, 0x06	; 6
 714:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_MOVE_FIRST);								// 3.
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
//	_delay_us(40);	// 37 uS	// comment for simulation
	LCD_COMMAND(LCD_CLEAR);						// 0b00000001	// 4. Display clear; // !!! ... from old code LCD_CLEAR can't be first command !!!
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_COMMAND>
 724:	80 ec       	ldi	r24, 0xC0	; 192
 726:	92 e1       	ldi	r25, 0x12	; 18
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <LCD_INIT+0x1c>
	_delay_us(1200);	// 1.53 mS	or use this _delay_ms(2); LCD_EXECUTE_COMMAND() = 440us, 440+1200 = 1640 uS
//	LCD_COMMAND(LCD_ON_BLINK_CURSOR);			// 0b00001111	// 5. Display on/off control: Display on (D = 1), Cursor on (C = 1), Blinking on (B = 1)
//	_delay_us(40);	// 37 uS	// comment for simulation
//	LCD_COMMAND(LCD_OFF);										// 5. Display off
}
 72c:	08 95       	ret

0000072e <LCD_DATA_STRING>:

/*********************************************************
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void LCD_DATA_STRING(char *data)
{
 72e:	fc 01       	movw	r30, r24
 730:	28 ea       	ldi	r18, 0xA8	; 168
 732:	32 e0       	ldi	r19, 0x02	; 2
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
 734:	40 e9       	ldi	r20, 0x90	; 144
 736:	51 e0       	ldi	r21, 0x01	; 1
 738:	1d c0       	rjmp	.+58     	; 0x774 <LCD_DATA_STRING+0x46>
 73a:	90 e0       	ldi	r25, 0x00	; 0
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
		{
			LCD_SCK_low();
 73c:	d9 98       	cbi	0x1b, 1	; 27

			if(storeMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 73e:	87 ff       	sbrs	r24, 7
 740:	02 c0       	rjmp	.+4      	; 0x746 <LCD_DATA_STRING+0x18>
			{
				LCD_SDI_high();	// izvejdane na log "1" v MSB	// PORTA |= (1<<LCD_SDI_PIN);
 742:	d8 9a       	sbi	0x1b, 0	; 27
 744:	01 c0       	rjmp	.+2      	; 0x748 <LCD_DATA_STRING+0x1a>
			}
			else
			{
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
 746:	d8 98       	cbi	0x1b, 0	; 27
			}

			LCD_SCK_high();		
 748:	d9 9a       	sbi	0x1b, 1	; 27
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;

		for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 74a:	9f 5f       	subi	r25, 0xFF	; 255
 74c:	98 30       	cpi	r25, 0x08	; 8
 74e:	11 f0       	breq	.+4      	; 0x754 <LCD_DATA_STRING+0x26>
				LCD_SDI_low();	// izvejdane na log "0" v MSB	// PORTA &= ~(1<<LCD_SDI_PIN);
			}

			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
 750:	88 0f       	add	r24, r24
 752:	f4 cf       	rjmp	.-24     	; 0x73c <LCD_DATA_STRING+0xe>
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
	{
		unsigned char storeMSB;
		unsigned char x;
		storeMSB = *data++;
 754:	31 96       	adiw	r30, 0x01	; 1
			LCD_SCK_high();		

			storeMSB = storeMSB << 1;	// shiftvane na << nalqvo
		}
//update from down comment
		LCD_REGSELECT_high();	// RS = 1
 756:	dd 9a       	sbi	0x1b, 5	; 27
		LCD_READWRITE_low();	// RW = 0
 758:	dc 98       	cbi	0x1b, 4	; 27
		LCD_ENABLE_high();		// EN = 1
 75a:	db 9a       	sbi	0x1b, 3	; 27
//update from down comment
		LCD_RCK_low();
 75c:	da 98       	cbi	0x1b, 2	; 27
 75e:	c9 01       	movw	r24, r18
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <LCD_DATA_STRING+0x32>
		_delay_us(170);			//rcall 180 us
		LCD_RCK_high();
 764:	da 9a       	sbi	0x1b, 2	; 27
 766:	c9 01       	movw	r24, r18
 768:	01 97       	sbiw	r24, 0x01	; 1
 76a:	f1 f7       	brne	.-4      	; 0x768 <LCD_DATA_STRING+0x3a>
		LCD_REGSELECT_high();	// RS = 1
		LCD_READWRITE_low();	// RW = 0
		LCD_ENABLE_high();		// EN = 1
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
 76c:	db 98       	cbi	0x1b, 3	; 27
 76e:	ca 01       	movw	r24, r20
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <LCD_DATA_STRING+0x42>
** WRITE/TRANSMIT MORE DATA STRING BYTES TO LCD DISPLAY **
*********************************************************/
void LCD_DATA_STRING(char *data)
{
// USE THIS: char symbols [] = "PESHO"; lcdExecuteDataString(symbols);
	while(*data)// != '\0')	// is there or isn't there ?? String Terminator last charachter '\0'
 774:	80 81       	ld	r24, Z
 776:	88 23       	and	r24, r24
 778:	01 f7       	brne	.-64     	; 0x73a <LCD_DATA_STRING+0xc>
		_delay_us(100);
*/
		LCD_ENABLE_low();		// EN = 0
		_delay_us(100);
	}
}
 77a:	08 95       	ret

0000077c <LCD_CGRAM_CUSTOM_SYMBOLS>:
	 { 0x0E, 0x1B, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },	// Battery Charging  80%	// addr40-47
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
	for(rows=0; rows<7; rows++)
 780:	10 92 05 01 	sts	0x0105, r1
 784:	10 92 04 01 	sts	0x0104, r1
 788:	25 c0       	rjmp	.+74     	; 0x7d4 <LCD_CGRAM_CUSTOM_SYMBOLS+0x58>
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
 78a:	08 96       	adiw	r24, 0x08	; 8
 78c:	88 0f       	add	r24, r24
 78e:	88 0f       	add	r24, r24
 790:	88 0f       	add	r24, r24
 792:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_EXECUTE_COMMAND>
 796:	c0 e0       	ldi	r28, 0x00	; 0
 798:	d0 e0       	ldi	r29, 0x00	; 0
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
 79a:	e0 91 04 01 	lds	r30, 0x0104
 79e:	f0 91 05 01 	lds	r31, 0x0105
 7a2:	83 e0       	ldi	r24, 0x03	; 3
 7a4:	ee 0f       	add	r30, r30
 7a6:	ff 1f       	adc	r31, r31
 7a8:	8a 95       	dec	r24
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <LCD_CGRAM_CUSTOM_SYMBOLS+0x28>
 7ac:	ec 0f       	add	r30, r28
 7ae:	fd 1f       	adc	r31, r29
 7b0:	e4 54       	subi	r30, 0x44	; 68
 7b2:	ff 4f       	sbci	r31, 0xFF	; 255
 7b4:	80 81       	ld	r24, Z
 7b6:	0e 94 33 03 	call	0x666	; 0x666 <LCD_EXECUTE_DATA_ONE>
void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
	{
		LCD_EXECUTE_COMMAND(LCD_CGRAM_STORE_ADDR_CHAR0+(rows*LCD_CGRAM_SYMBOL_CONTAIN_8BYTES));	// 0x40 = 0b0100000 SET CGRAM BASE 0 ADDRESS and OFFSET ADDRESS TO NEXT CHARACTER (LCD_CGRAM_STORE_ADDR_CHAR0+(row*8))
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
 7ba:	21 96       	adiw	r28, 0x01	; 1
 7bc:	c8 30       	cpi	r28, 0x08	; 8
 7be:	d1 05       	cpc	r29, r1
 7c0:	61 f7       	brne	.-40     	; 0x79a <LCD_CGRAM_CUSTOM_SYMBOLS+0x1e>
	 { 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }		// Battery Charging 100%	// addr48-55
};

void LCD_CGRAM_CUSTOM_SYMBOLS()
{
	for(rows=0; rows<7; rows++)
 7c2:	80 91 04 01 	lds	r24, 0x0104
 7c6:	90 91 05 01 	lds	r25, 0x0105
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	90 93 05 01 	sts	0x0105, r25
 7d0:	80 93 04 01 	sts	0x0104, r24
 7d4:	80 91 04 01 	lds	r24, 0x0104
 7d8:	90 91 05 01 	lds	r25, 0x0105
 7dc:	87 30       	cpi	r24, 0x07	; 7
 7de:	91 05       	cpc	r25, r1
 7e0:	a4 f2       	brlt	.-88     	; 0x78a <LCD_CGRAM_CUSTOM_SYMBOLS+0xe>
		for(int cols=0; cols<LCD_CGRAM_SYMBOL_CONTAIN_8BYTES; cols++)
		{
			LCD_EXECUTE_DATA_ONE(symbolGenerator[rows][cols]);
		}
	}
}
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <LCD_DATA_INT>:
/******************************************************
** WRITE/TRANSMIT MORE DATA INT BYTES TO LCD DISPLAY **
******************************************************/
// USE THIS: lcdDataInt( (int)k + 1 );
void LCD_DATA_INT(int data)		// void lcdDataInt(const int data)
{
 7e8:	df 93       	push	r29
 7ea:	cf 93       	push	r28
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
 7f0:	2a 97       	sbiw	r28, 0x0a	; 10
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	f8 94       	cli
 7f6:	de bf       	out	0x3e, r29	; 62
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	LCD_DATA_STRING(itoa(data, buffer, 10));	// 10 -> DECIMAL
 7fc:	be 01       	movw	r22, r28
 7fe:	6f 5f       	subi	r22, 0xFF	; 255
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	4a e0       	ldi	r20, 0x0A	; 10
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	0e 94 41 06 	call	0xc82	; 0xc82 <itoa>
 80a:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_DATA_STRING>
}
 80e:	2a 96       	adiw	r28, 0x0a	; 10
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	f8 94       	cli
 814:	de bf       	out	0x3e, r29	; 62
 816:	0f be       	out	0x3f, r0	; 63
 818:	cd bf       	out	0x3d, r28	; 61
 81a:	cf 91       	pop	r28
 81c:	df 91       	pop	r29
 81e:	08 95       	ret

00000820 <PGA2310_Volume_Update>:

/*************************************
** DEFINITION PGA2310 VOLUME UPDATE **
*************************************/
void PGA2310_Volume_Update(unsigned char pgaVolumeLeft, unsigned char pgaVolumeRight)
{
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	18 2f       	mov	r17, r24
 826:	06 2f       	mov	r16, r22
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 828:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 82a:	0e 94 17 05 	call	0xa2e	; 0xa2e <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 82e:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 830:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 832:	81 2f       	mov	r24, r17
 834:	60 2f       	mov	r22, r16
 836:	0e 94 17 05 	call	0xa2e	; 0xa2e <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 83a:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA7 - /SS ENABLE
 83c:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(pgaVolumeLeft, pgaVolumeRight);
 83e:	81 2f       	mov	r24, r17
 840:	60 2f       	mov	r22, r16
 842:	0e 94 17 05 	call	0xa2e	; 0xa2e <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 846:	df 9a       	sbi	0x1b, 7	; 27

//	return SUCCESS;
}
 848:	1f 91       	pop	r17
 84a:	0f 91       	pop	r16
 84c:	08 95       	ret

0000084e <pga2310_init>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_init()
{
	spi_init();
 84e:	0e 94 06 05 	call	0xa0c	; 0xa0c <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 852:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	0e 94 17 05 	call	0xa2e	; 0xa2e <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 85c:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 85e:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	0e 94 17 05 	call	0xa2e	; 0xa2e <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 868:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 86a:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	0e 94 17 05 	call	0xa2e	; 0xa2e <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 874:	df 9a       	sbi	0x1b, 7	; 27
}
 876:	08 95       	ret

00000878 <pga2310_reset>:
/**************************************
** DEFINITION PGA2310 INITIALIZATION **
**************************************/
void pga2310_reset()
{
	spi_init();
 878:	0e 94 06 05 	call	0xa0c	; 0xa0c <spi_init>
	
	PGA2310_U6_SPI_CS_low();	// CHIP SELECT BIT // PB3 - /SS ENABLE
 87c:	c3 98       	cbi	0x18, 3	; 24
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	0e 94 17 05 	call	0xa2e	; 0xa2e <spi_write_two_bytes>
	PGA2310_U6_SPI_CS_high();	// CHIP SELECT BIT // PB3 - /SS DISABLE
 886:	c3 9a       	sbi	0x18, 3	; 24

	PGA2310_U7_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 888:	de 98       	cbi	0x1b, 6	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	0e 94 17 05 	call	0xa2e	; 0xa2e <spi_write_two_bytes>
	PGA2310_U7_SPI_CS_high();	// CHIP SELECT BIT // PA6 - /SS DISABLE
 892:	de 9a       	sbi	0x1b, 6	; 27

	PGA2310_U8_SPI_CS_low();	// CHIP SELECT BIT // PA6 - /SS ENABLE
 894:	df 98       	cbi	0x1b, 7	; 27
	spi_write_two_bytes(ZERO_FILL, ZERO_FILL);	// left and right channel
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	0e 94 17 05 	call	0xa2e	; 0xa2e <spi_write_two_bytes>
	PGA2310_U8_SPI_CS_high();	// CHIP SELECT BIT // PA7 - /SS DISABLE
 89e:	df 9a       	sbi	0x1b, 7	; 27
}
 8a0:	08 95       	ret

000008a2 <uart_init>:
{

	// Razpoznavane na baudrate (skorost): 1. Izprashta se byte. 2. Poluchava se byte. 3. Sravnqva se polucheniq byte == izprateniq byte. // This is LOOP TX->RX
	// 4. Ako byte pri sravnqvaneto e edin i sasht to skorostta e izbranata v momenta, ako byte e razlichen - da se probva sas sledvashta baudrate.

	UBRRL = 103;			// Baudrate: 9600; Parity: 0; StopBits: 1 (Error = 0.2%; 16MHz)
 8a2:	87 e6       	ldi	r24, 0x67	; 103
 8a4:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
 8a6:	10 bc       	out	0x20, r1	; 32

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
 8a8:	86 e8       	ldi	r24, 0x86	; 134
 8aa:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0b10011000;		// TXEN,RXEN,RXCIE					// Enable Uart/Usart TX and RX
 8ac:	88 e9       	ldi	r24, 0x98	; 152
 8ae:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
 8b0:	1c b8       	out	0x0c, r1	; 12
}
 8b2:	08 95       	ret

000008b4 <uart_setup>:
			
		}
	}

//	UBRRL = 103;			// Baudrate: 9600; Parity: 0; StopBits: 1 (Error = 0.2%; 16MHz)
	UBRRH = 0;
 8b4:	10 bc       	out	0x20, r1	; 32

	UCSRC = 0b10000110;		// URSEL = 1 (Accessing to UBRRH or UCSRC, is read as zero when reading UBRRH. The URSEL must be zero when writing the UBRRH.); UMSEL = 0 (Asynchronous Operation); UPM1 = 0, UPM0 = 0 (Parity Mode Disabled); USBS = 0 (1-Stop Bit); UCSZ2 = 0, UCSZ1 = 1, UCSZ0 = 1 (8-DataBits); UCPOL = 0 Polarity TX & RX (Rising XCK Edge -> Transmitted Data Changed (Output of TxDPin), Falling XCK Edge -> Received Data Sampled (Input on RxDPin))
 8b6:	86 e8       	ldi	r24, 0x86	; 134
 8b8:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0b10011000;		// TXEN,RXEN,RXCIE					// Enable Uart/Usart TX and RX
 8ba:	88 e9       	ldi	r24, 0x98	; 152
 8bc:	8a b9       	out	0x0a, r24	; 10
	UDR = 0b00000000;		// INITIALIZATION NULL OF UART DATA
 8be:	1c b8       	out	0x0c, r1	; 12
}
 8c0:	08 95       	ret

000008c2 <uart_transmit>:

/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
 8c2:	ac 01       	movw	r20, r24
 8c4:	20 e0       	ldi	r18, 0x00	; 0
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	09 c0       	rjmp	.+18     	; 0x8dc <uart_transmit+0x1a>
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
	{
		//UDR = uart_data[count_ns];
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 8ca:	5d 9b       	sbis	0x0b, 5	; 11
 8cc:	fe cf       	rjmp	.-4      	; 0x8ca <uart_transmit+0x8>
		{
		}
		UDR = uart_data[count_ns];
 8ce:	fa 01       	movw	r30, r20
 8d0:	e2 0f       	add	r30, r18
 8d2:	f3 1f       	adc	r31, r19
 8d4:	80 81       	ld	r24, Z
 8d6:	8c b9       	out	0x0c, r24	; 12
/*******************************************
** TRANSMIT/SEND MORE BYTES OF UART/USART **
*******************************************/
void uart_transmit(char uart_data [], int numsymbols)
{
	for(int count_ns = 0; count_ns < numsymbols; count_ns++)	// count_ns < numsymbols -> za string nqma nijda ot dobavqne na +1 za posledniq simvol ili ot smqna na znaka <=
 8d8:	2f 5f       	subi	r18, 0xFF	; 255
 8da:	3f 4f       	sbci	r19, 0xFF	; 255
 8dc:	26 17       	cp	r18, r22
 8de:	37 07       	cpc	r19, r23
 8e0:	a4 f3       	brlt	.-24     	; 0x8ca <uart_transmit+0x8>
		while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
		{
		}
		UDR = uart_data[count_ns];
	}
}
 8e2:	08 95       	ret

000008e4 <uart_transmit_one>:
/***************************************
** TRANSMIT/SEND 1 BYTE OF UART/USART **
***************************************/
void uart_transmit_one(unsigned char uart_data)
{
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 8e4:	5d 9b       	sbis	0x0b, 5	; 11
 8e6:	fe cf       	rjmp	.-4      	; 0x8e4 <uart_transmit_one>
	{
	}
	UDR = uart_data;
 8e8:	8c b9       	out	0x0c, r24	; 12
}
 8ea:	08 95       	ret

000008ec <uart_transmit_DEC_to_BCD>:

/*****************************************************************		// NOT FINISHED
** TRANSMIT/SEND 1 BYTE CONVERTED FROM DEC TO BCD OF UART/USART **		// NOT FINISHED
*****************************************************************/		// NOT FINISHED
void uart_transmit_DEC_to_BCD(unsigned char dec_to_bcd_data)
{// pravi se preobrazuvane ot DEC to BCD i preobrazuvane za izvejdane na parviq simvol s filtar
 8ec:	98 2f       	mov	r25, r24
	
	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 8ee:	5d 9b       	sbis	0x0b, 5	; 11
 8f0:	fe cf       	rjmp	.-4      	; 0x8ee <uart_transmit_DEC_to_BCD+0x2>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data>>4));
 8f2:	89 2f       	mov	r24, r25
 8f4:	82 95       	swap	r24
 8f6:	8f 70       	andi	r24, 0x0F	; 15
 8f8:	80 5d       	subi	r24, 0xD0	; 208
 8fa:	8c b9       	out	0x0c, r24	; 12

	while(!(UCSRA & (1<<UDRE)))	// cikal za proverka na gotovnost - dali e izpraten simbola i v gotovnost li e za nov simvol
 8fc:	5d 9b       	sbis	0x0b, 5	; 11
 8fe:	fe cf       	rjmp	.-4      	; 0x8fc <uart_transmit_DEC_to_BCD+0x10>
	{
	}
	UDR = ('0'+ (dec_to_bcd_data & 0x0F));
 900:	9f 70       	andi	r25, 0x0F	; 15
 902:	90 5d       	subi	r25, 0xD0	; 208
 904:	9c b9       	out	0x0c, r25	; 12
	byte bcdToDec(byte val)
	{
  		return ( (val/16*10) + (val%16) );
	}
*/
}
 906:	08 95       	ret

00000908 <transmitUart>:
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
 908:	5d 9b       	sbis	0x0b, 5	; 11
 90a:	fe cf       	rjmp	.-4      	; 0x908 <transmitUart>
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
 90c:	8c b9       	out	0x0c, r24	; 12
}
 90e:	08 95       	ret

00000910 <transmitUartString>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
 910:	fc 01       	movw	r30, r24
 912:	04 c0       	rjmp	.+8      	; 0x91c <transmitUartString+0xc>
** TRANSMIT/SEND 1 BYTE OF UART/USART **		// NOT FINISHED
***************************************/		// NOT FINISHED
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
 914:	5d 9b       	sbis	0x0b, 5	; 11
 916:	fe cf       	rjmp	.-4      	; 0x914 <transmitUartString+0x4>
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
	{
		transmitUart(*data++);
 918:	31 96       	adiw	r30, 0x01	; 1
// USE THIS: uart_puts(" = "); OR transmitUart(data); data++; transmitUart(data);
void transmitUart(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)))
	{};							/* Wait for empty transmit buffer */
	UDR = data;					/* Put data into buffer, sends the data */
 91a:	8c b9       	out	0x0c, r24	; 12
** TRANSMIT/SEND MORE STRING BYTES OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: char symbols [] = "PESHO"; transmitUartString(symbols);
void transmitUartString(char *data)		// void transmitUartString(const char *data)
{
	while(*data)
 91c:	80 81       	ld	r24, Z
 91e:	88 23       	and	r24, r24
 920:	c9 f7       	brne	.-14     	; 0x914 <transmitUartString+0x4>
	{
		transmitUart(*data++);
	}
}
 922:	08 95       	ret

00000924 <receiveUart>:
/**************************************************		// NOT FINISHED
** RECEIVE/READ unsigned char BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
unsigned char receiveUart(void)
{
	while (!(UCSRA & (1<<RXC)))
 924:	5f 9b       	sbis	0x0b, 7	; 11
 926:	fe cf       	rjmp	.-4      	; 0x924 <receiveUart>
	{};							/* Wait for data to be received */
	return UDR;					/* Get and return received data from buffer */
 928:	8c b1       	in	r24, 0x0c	; 12
}
 92a:	08 95       	ret

0000092c <transmitUartLong>:
/******************************************		// NOT FINISHED
** TRANSMIT/SEND long BYTE OF UART/USART **		// NOT FINISHED
******************************************/		// NOT FINISHED
// USE THIS: transmitUartLong( (long)k + 1 );
void transmitUartLong(long data)		// void transmitUartLong(const long data)
{
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	cd b7       	in	r28, 0x3d	; 61
 932:	de b7       	in	r29, 0x3e	; 62
 934:	2a 97       	sbiw	r28, 0x0a	; 10
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ltoa(data, buffer, 10));		// 10 -> DECIMAL
 940:	ae 01       	movw	r20, r28
 942:	4f 5f       	subi	r20, 0xFF	; 255
 944:	5f 4f       	sbci	r21, 0xFF	; 255
 946:	2a e0       	ldi	r18, 0x0A	; 10
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ltoa>
 94e:	0e 94 88 04 	call	0x910	; 0x910 <transmitUartString>
}
 952:	2a 96       	adiw	r28, 0x0a	; 10
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	f8 94       	cli
 958:	de bf       	out	0x3e, r29	; 62
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	cd bf       	out	0x3d, r28	; 61
 95e:	cf 91       	pop	r28
 960:	df 91       	pop	r29
 962:	08 95       	ret

00000964 <transmitUartULong>:
/***************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned long BYTE OF UART/USART **		// NOT FINISHED
***************************************************/		// NOT FINISHED
// USE THIS: transmitUartULong( (unsigned long)k + 1 );
void transmitUartULong(unsigned long data)		// void transmitUartULong(const unsigned long data)
{
 964:	df 93       	push	r29
 966:	cf 93       	push	r28
 968:	cd b7       	in	r28, 0x3d	; 61
 96a:	de b7       	in	r29, 0x3e	; 62
 96c:	2a 97       	sbiw	r28, 0x0a	; 10
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	f8 94       	cli
 972:	de bf       	out	0x3e, r29	; 62
 974:	0f be       	out	0x3f, r0	; 63
 976:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(ultoa(data, buffer, 10));		// 10 -> DECIMAL
 978:	ae 01       	movw	r20, r28
 97a:	4f 5f       	subi	r20, 0xFF	; 255
 97c:	5f 4f       	sbci	r21, 0xFF	; 255
 97e:	2a e0       	ldi	r18, 0x0A	; 10
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	0e 94 96 06 	call	0xd2c	; 0xd2c <ultoa>
 986:	0e 94 88 04 	call	0x910	; 0x910 <transmitUartString>
}
 98a:	2a 96       	adiw	r28, 0x0a	; 10
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	f8 94       	cli
 990:	de bf       	out	0x3e, r29	; 62
 992:	0f be       	out	0x3f, r0	; 63
 994:	cd bf       	out	0x3d, r28	; 61
 996:	cf 91       	pop	r28
 998:	df 91       	pop	r29
 99a:	08 95       	ret

0000099c <transmitUartInt>:
/*****************************************		// NOT FINISHED
** TRANSMIT/SEND int BYTE OF UART/USART **		// NOT FINISHED
*****************************************/		// NOT FINISHED
// USE THIS: transmitUartInt( (int)k + 1 );
void transmitUartInt(int data)		// void transmitUartInt(const int data)
{
 99c:	df 93       	push	r29
 99e:	cf 93       	push	r28
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
 9a4:	2a 97       	sbiw	r28, 0x0a	; 10
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	f8 94       	cli
 9aa:	de bf       	out	0x3e, r29	; 62
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(itoa(data, buffer, 10));		// 10 -> DECIMAL
 9b0:	be 01       	movw	r22, r28
 9b2:	6f 5f       	subi	r22, 0xFF	; 255
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	4a e0       	ldi	r20, 0x0A	; 10
 9b8:	50 e0       	ldi	r21, 0x00	; 0
 9ba:	0e 94 41 06 	call	0xc82	; 0xc82 <itoa>
 9be:	0e 94 88 04 	call	0x910	; 0x910 <transmitUartString>
}
 9c2:	2a 96       	adiw	r28, 0x0a	; 10
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	f8 94       	cli
 9c8:	de bf       	out	0x3e, r29	; 62
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	cd bf       	out	0x3d, r28	; 61
 9ce:	cf 91       	pop	r28
 9d0:	df 91       	pop	r29
 9d2:	08 95       	ret

000009d4 <transmitUartUInt>:
/**************************************************		// NOT FINISHED
** TRANSMIT/SEND unsigned int BYTE OF UART/USART **		// NOT FINISHED
**************************************************/		// NOT FINISHED
// USE THIS: transmitUartUInt( (unsigned int)k + 1 );
void transmitUartUInt(unsigned int data)		// void transmitUartUInt(const unsigned int data)
{
 9d4:	df 93       	push	r29
 9d6:	cf 93       	push	r28
 9d8:	cd b7       	in	r28, 0x3d	; 61
 9da:	de b7       	in	r29, 0x3e	; 62
 9dc:	2a 97       	sbiw	r28, 0x0a	; 10
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	transmitUartString(utoa(data, buffer, 10));		// 10 -> DECIMAL
 9e8:	be 01       	movw	r22, r28
 9ea:	6f 5f       	subi	r22, 0xFF	; 255
 9ec:	7f 4f       	sbci	r23, 0xFF	; 255
 9ee:	4a e0       	ldi	r20, 0x0A	; 10
 9f0:	50 e0       	ldi	r21, 0x00	; 0
 9f2:	0e 94 bb 06 	call	0xd76	; 0xd76 <utoa>
 9f6:	0e 94 88 04 	call	0x910	; 0x910 <transmitUartString>
}
 9fa:	2a 96       	adiw	r28, 0x0a	; 10
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	f8 94       	cli
 a00:	de bf       	out	0x3e, r29	; 62
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	cd bf       	out	0x3d, r28	; 61
 a06:	cf 91       	pop	r28
 a08:	df 91       	pop	r29
 a0a:	08 95       	ret

00000a0c <spi_init>:
/**************************
** INITIZLIZATION OF SPI **
***************************/
void spi_init()
{
	SPSR = (0<<SPIF)|(0<<WCOL)|(0<<SPI2X);
 a0c:	1e b8       	out	0x0e, r1	; 14
//	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);			//0b01010010	// SPR1   = 1 - 16 000 000 / 64  = 250 000 = 250kHz  // KOMENTAR ZARADI SIMULACIQTA - PROTEUS BLOKIRANE ZARADI BIT V REGISTAR
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);	//0b01010010	// SPR0,1 = 1 - 16 000 000 / 128 = 125 000 = 125kHz	 // KAKVA KOMBINACIQ OT 4-te BITa VODI DO RAZBLOKIRANETO ???
 a0e:	83 e5       	ldi	r24, 0x53	; 83
 a10:	8d b9       	out	0x0d, r24	; 13
	SPDR = 0b00000000;
 a12:	1f b8       	out	0x0f, r1	; 15

	PGA2310_U8_SPI_CS_high();	// /SS - DISABLE
	PGA2310_U8_SPI(0b00000000, 0b00000000);
	*/

	SPCR = (0<<SPE);
 a14:	1d b8       	out	0x0d, r1	; 13
}
 a16:	08 95       	ret

00000a18 <spi_start>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 a18:	83 e5       	ldi	r24, 0x53	; 83
 a1a:	8d b9       	out	0x0d, r24	; 13
}
 a1c:	08 95       	ret

00000a1e <spi_stop>:
/**************************************
** DEFINITION SPI FUNCTION STOP ONLY **
**************************************/
void spi_stop()
{
	SPCR = (0<<SPE);
 a1e:	1d b8       	out	0x0d, r1	; 13
}
 a20:	08 95       	ret

00000a22 <spi_write_one_byte>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 a22:	93 e5       	ldi	r25, 0x53	; 83
 a24:	9d b9       	out	0x0d, r25	; 13
void spi_write_one_byte(unsigned char data)	// void PGA2310_U7_SPI(byte volume_left, byte volume_right)	//PGA2310_U7_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data;				//volume_right;
 a26:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
 a28:	77 9b       	sbis	0x0e, 7	; 14
 a2a:	fe cf       	rjmp	.-4      	; 0xa28 <spi_write_one_byte+0x6>
	{
	}
}
 a2c:	08 95       	ret

00000a2e <spi_write_two_bytes>:
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 a2e:	93 e5       	ldi	r25, 0x53	; 83
 a30:	9d b9       	out	0x0d, r25	; 13
void spi_write_two_bytes(unsigned char data1, unsigned char data2)	// void PGA2310_U6_SPI(byte volume_left, byte volume_right)	//PGA2310_U6_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	spi_start();
	SPDR = data1;				//volume_left;
 a32:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
 a34:	77 9b       	sbis	0x0e, 7	; 14
 a36:	fe cf       	rjmp	.-4      	; 0xa34 <spi_write_two_bytes+0x6>
	{
	}

//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data2;				//volume_right;
 a38:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)))
 a3a:	77 9b       	sbis	0x0e, 7	; 14
 a3c:	fe cf       	rjmp	.-4      	; 0xa3a <spi_write_two_bytes+0xc>
	{
	}
}
 a3e:	08 95       	ret

00000a40 <spi_write_more_bytes>:

/*********************************************
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
 a40:	fc 01       	movw	r30, r24
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 a42:	93 e5       	ldi	r25, 0x53	; 83
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <spi_write_more_bytes+0x12>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
 a46:	31 96       	adiw	r30, 0x01	; 1
/***************************************
** DEFINITION SPI FUNCTION START ONLY **
***************************************/
void spi_start()
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0); //	SPCR = (1<<SPE);
 a48:	9d b9       	out	0x0d, r25	; 13
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
	{
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
		spi_start();
		SPDR = *data;			//volume_left;
 a4a:	80 81       	ld	r24, Z
 a4c:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)))
 a4e:	77 9b       	sbis	0x0e, 7	; 14
 a50:	fe cf       	rjmp	.-4      	; 0xa4e <spi_write_more_bytes+0xe>
** DEFINITION SPI FUNCTION WRITE MORE BYTES **
*********************************************/
void spi_write_more_bytes(unsigned char *data)	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - /SS ENABLE
	while(*data++)
 a52:	80 81       	ld	r24, Z
 a54:	88 23       	and	r24, r24
 a56:	b9 f7       	brne	.-18     	; 0xa46 <spi_write_more_bytes+0x6>
		SPDR = *data;			//volume_left;
		while(!(SPSR & (1<<SPIF)))
		{
		}
	}
}
 a58:	08 95       	ret

00000a5a <spi_read_more_bytes>:
unsigned char spi_read_more_bytes()	// void PGA2310_U8_SPI(byte volume_left, byte volume_right)	//PGA2310_U8_SPI(0b00001111);
{
	unsigned char data = 0b00000000;
	//	PORTB = (0<<PB4);			// DON'T FORGET	CHIP SELECT BIT // PB4 - NOT USED HERE
	//	SPSR = 0b00000000;			// http://www.embeddedrelated.com/groups/lpc2000/show/16257.php
	SPDR = data;			//volume_left;
 a5a:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)))
 a5c:	77 9b       	sbis	0x0e, 7	; 14
 a5e:	fe cf       	rjmp	.-4      	; 0xa5c <spi_read_more_bytes+0x2>
	{
	}
	return data;
}
 a60:	80 e0       	ldi	r24, 0x00	; 0
 a62:	08 95       	ret

00000a64 <decToBcd>:

/**************************************************************
**** CONVERT NORMAL DECIMAL NUMBERS TO BINARY CODED DECIMAL ***
**************************************************************/
unsigned char decToBcd(unsigned char val)
{
 a64:	48 2f       	mov	r20, r24
 a66:	6a e0       	ldi	r22, 0x0A	; 10
 a68:	0e 94 35 06 	call	0xc6a	; 0xc6a <__udivmodqi4>
 a6c:	28 2f       	mov	r18, r24
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	84 e0       	ldi	r24, 0x04	; 4
 a72:	22 0f       	add	r18, r18
 a74:	33 1f       	adc	r19, r19
 a76:	8a 95       	dec	r24
 a78:	e1 f7       	brne	.-8      	; 0xa72 <decToBcd+0xe>
 a7a:	84 2f       	mov	r24, r20
 a7c:	0e 94 35 06 	call	0xc6a	; 0xc6a <__udivmodqi4>
	return ( (val/10*16) + (val%10) );	// Get DEC format -> convert DEC to HEX
}
 a80:	89 2f       	mov	r24, r25
 a82:	82 0f       	add	r24, r18
 a84:	08 95       	ret

00000a86 <bcdToDec>:

/**************************************************************
**** CONVERT BINARY CODED DECIMAL TO NORMAL DECIMAL NUMBERS ***
**************************************************************/
unsigned char bcdToDec(unsigned char val)
{
 a86:	28 2f       	mov	r18, r24
 a88:	22 95       	swap	r18
 a8a:	2f 70       	andi	r18, 0x0F	; 15
 a8c:	9a e0       	ldi	r25, 0x0A	; 10
 a8e:	29 9f       	mul	r18, r25
 a90:	90 01       	movw	r18, r0
 a92:	11 24       	eor	r1, r1
 a94:	8f 70       	andi	r24, 0x0F	; 15
	return ( (val/16*10) + (val%16) );	// Get HEX format -> convert HEX to DEC
}
 a96:	82 0f       	add	r24, r18
 a98:	08 95       	ret

00000a9a <shiftRightOutLsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
 a9a:	a0 9a       	sbi	0x14, 0	; 20
 a9c:	94 e4       	ldi	r25, 0x44	; 68
 a9e:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regALSB & 0x01)	// maska & za log "1" na LSB 0b00000001
 aa0:	90 ff       	sbrs	r25, 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <shiftRightOutLsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v LSB
 aa4:	a8 9a       	sbi	0x15, 0	; 21
 aa6:	01 c0       	rjmp	.+2      	; 0xaaa <shiftRightOutLsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
 aa8:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regALSB;
	unsigned char x;
	regALSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 aaa:	8f 5f       	subi	r24, 0xFF	; 255
 aac:	88 30       	cpi	r24, 0x08	; 8
 aae:	11 f0       	breq	.+4      	; 0xab4 <shiftRightOutLsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v LSB
		}
		
		regALSB = regALSB >> 1;	// shiftvane na >> nadqsno
 ab0:	96 95       	lsr	r25
 ab2:	f6 cf       	rjmp	.-20     	; 0xaa0 <shiftRightOutLsbFirst+0x6>
 ab4:	08 95       	ret

00000ab6 <shiftLeftOutMsbFirst>:
{
	unsigned char conbyte = 0x44;
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output
 ab6:	a0 9a       	sbi	0x14, 0	; 20
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	84 e4       	ldi	r24, 0x44	; 68

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		if(regAMSB & 0x80)	// maska & za log "1" na MSB 0b10000000
 abc:	87 ff       	sbrs	r24, 7
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <shiftLeftOutMsbFirst+0xe>
		{
			PORTC |= (1<<serPin);	// izvejdane na log "1" v MSB
 ac0:	a8 9a       	sbi	0x15, 0	; 21
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <shiftLeftOutMsbFirst+0x10>
		}
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
 ac4:	a8 98       	cbi	0x15, 0	; 21
	unsigned char regAMSB;
	unsigned char x;
	regAMSB = conbyte;
	DDRC |= (1<<serPin);	// serial pin output

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 ac6:	9f 5f       	subi	r25, 0xFF	; 255
 ac8:	98 30       	cpi	r25, 0x08	; 8
 aca:	11 f0       	breq	.+4      	; 0xad0 <shiftLeftOutMsbFirst+0x1a>
		else
		{
			PORTC &= ~(1<<serPin);	// izvejdane na log "0" v MSB
		}
		
		regAMSB = regAMSB << 1;	// shiftvane na << nalqvo
 acc:	88 0f       	add	r24, r24
 ace:	f6 cf       	rjmp	.-20     	; 0xabc <shiftLeftOutMsbFirst+0x6>
 ad0:	08 95       	ret

00000ad2 <shiftRightInLsbFirst>:
void shiftRightInLsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
 ad2:	a0 98       	cbi	0x14, 0	; 20
 ad4:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
 ad6:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 ad8:	8f 5f       	subi	r24, 0xFF	; 255
 ada:	88 30       	cpi	r24, 0x08	; 8
 adc:	e1 f7       	brne	.-8      	; 0xad6 <shiftRightInLsbFirst+0x4>
	{
		REGA = REGA >> 1;	// shift REGA to right one bit
		REGA |= (PINC & (1<<serPin)) << (7-serPin);	// copy bit serPin of PORTC to MSB of REGA
	}

}
 ade:	08 95       	ret

00000ae0 <shiftLeftInMsbFirst>:
void shiftLeftInMsbFirst()
{
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input
 ae0:	a0 98       	cbi	0x14, 0	; 20
 ae2:	80 e0       	ldi	r24, 0x00	; 0

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
 ae4:	93 b3       	in	r25, 0x13	; 19
	unsigned char x;
	unsigned char REGA = 0;
	
	DDRC &= ~(1<<serPin);	// serial pin input

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 ae6:	8f 5f       	subi	r24, 0xFF	; 255
 ae8:	88 30       	cpi	r24, 0x08	; 8
 aea:	e1 f7       	brne	.-8      	; 0xae4 <shiftLeftInMsbFirst+0x4>
	{
		REGA = REGA << 1;	// shift REGA to left one bit
		REGA |= (PINC & (1<<serPin)) >> serPin;	// copy bit serPin of PORTC to LSB of REGA
	}

}
 aec:	08 95       	ret

00000aee <delay_ms>:

/*************************************************************
*********** FUNCTION SOFTWARE DELAY IN MILISECONDS ***********
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
 aee:	40 e0       	ldi	r20, 0x00	; 0
 af0:	50 e0       	ldi	r21, 0x00	; 0
 af2:	0b c0       	rjmp	.+22     	; 0xb0a <delay_ms+0x1c>
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
 af4:	20 e0       	ldi	r18, 0x00	; 0
 af6:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(j=0;j<100;j++)
		{
		  asm("nop");
 af8:	00 00       	nop
		  asm("nop");
 afa:	00 00       	nop
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
	{
		for(j=0;j<100;j++)
 afc:	2f 5f       	subi	r18, 0xFF	; 255
 afe:	3f 4f       	sbci	r19, 0xFF	; 255
 b00:	24 36       	cpi	r18, 0x64	; 100
 b02:	31 05       	cpc	r19, r1
 b04:	c9 f7       	brne	.-14     	; 0xaf8 <delay_ms+0xa>
*************************************************************/
void delay_ms(int miliSec)  //for 1 Mhz crystal
{
	//  miliSec = miliSec * 16;	// for 16MHz
	int i,j;
	for(i=0;i<miliSec;i++)
 b06:	4f 5f       	subi	r20, 0xFF	; 255
 b08:	5f 4f       	sbci	r21, 0xFF	; 255
 b0a:	48 17       	cp	r20, r24
 b0c:	59 07       	cpc	r21, r25
 b0e:	94 f3       	brlt	.-28     	; 0xaf4 <delay_ms+0x6>
		{
		  asm("nop");
		  asm("nop");
		}
	}
}
 b10:	08 95       	ret

00000b12 <rotaryEncoderNikBarzakov>:
** READ/SCAN ROTARY ENCODER OF NIK BARZAKOV **
*********************************************/
unsigned char rotaryEncoderNikBarzakov()
{
	char tempEncoder = 0;
	if((ENCODER_A_low()) && (ENCODER_B_low()))			// A0, B0
 b12:	9d 99       	sbic	0x13, 5	; 19
 b14:	0c c0       	rjmp	.+24     	; 0xb2e <rotaryEncoderNikBarzakov+0x1c>
 b16:	9c 99       	sbic	0x13, 4	; 19
 b18:	0a c0       	rjmp	.+20     	; 0xb2e <rotaryEncoderNikBarzakov+0x1c>
 b1a:	88 ec       	ldi	r24, 0xC8	; 200
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	01 97       	sbiw	r24, 0x01	; 1
 b20:	f1 f7       	brne	.-4      	; 0xb1e <rotaryEncoderNikBarzakov+0xc>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_high()) && (ENCODER_B_low()))		// A1, B0
 b22:	9d 9b       	sbis	0x13, 5	; 19
 b24:	14 c0       	rjmp	.+40     	; 0xb4e <rotaryEncoderNikBarzakov+0x3c>
 b26:	9c 99       	sbic	0x13, 4	; 19
 b28:	12 c0       	rjmp	.+36     	; 0xb4e <rotaryEncoderNikBarzakov+0x3c>
 b2a:	82 e0       	ldi	r24, 0x02	; 2
 b2c:	08 95       	ret
// VOLUME UP
			tempEncoder = 2;	//	tempEncoder++;
			// ---> Clockwise; Zavartane po posoka na chasovnikovata strelka.
		}
	}
	else if((ENCODER_A_high()) && (ENCODER_B_low()))	// A1, B0
 b2e:	9d 9b       	sbis	0x13, 5	; 19
 b30:	0e c0       	rjmp	.+28     	; 0xb4e <rotaryEncoderNikBarzakov+0x3c>
 b32:	9c 99       	sbic	0x13, 4	; 19
 b34:	0c c0       	rjmp	.+24     	; 0xb4e <rotaryEncoderNikBarzakov+0x3c>
 b36:	88 ec       	ldi	r24, 0xC8	; 200
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	01 97       	sbiw	r24, 0x01	; 1
 b3c:	f1 f7       	brne	.-4      	; 0xb3a <rotaryEncoderNikBarzakov+0x28>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
 b3e:	9d 99       	sbic	0x13, 5	; 19
 b40:	06 c0       	rjmp	.+12     	; 0xb4e <rotaryEncoderNikBarzakov+0x3c>
 b42:	83 b3       	in	r24, 0x13	; 19
 b44:	82 95       	swap	r24
 b46:	8f 70       	andi	r24, 0x0F	; 15
 b48:	80 95       	com	r24
 b4a:	81 70       	andi	r24, 0x01	; 1
 b4c:	08 95       	ret
 b4e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// do nothing
	}
	return tempEncoder;
}
 b50:	08 95       	ret

00000b52 <rotaryEncoderVer1>:
** READ/SCAN ROTARY ENCODER VERSION 1 / MODEL 1 **
*************************************************/
unsigned char rotaryEncoderVer1()	// Check imediate now bits in PIN register.
{
	char tempEncoder = 0;							// A1, B1
	if((ENCODER_A_low()) && (ENCODER_B_high()))			// A0, B1
 b52:	9d 99       	sbic	0x13, 5	; 19
 b54:	0c c0       	rjmp	.+24     	; 0xb6e <rotaryEncoderVer1+0x1c>
 b56:	9c 9b       	sbis	0x13, 4	; 19
 b58:	0a c0       	rjmp	.+20     	; 0xb6e <rotaryEncoderVer1+0x1c>
 b5a:	88 ec       	ldi	r24, 0xC8	; 200
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	01 97       	sbiw	r24, 0x01	; 1
 b60:	f1 f7       	brne	.-4      	; 0xb5e <rotaryEncoderVer1+0xc>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
 b62:	9d 99       	sbic	0x13, 5	; 19
 b64:	14 c0       	rjmp	.+40     	; 0xb8e <rotaryEncoderVer1+0x3c>
 b66:	9c 99       	sbic	0x13, 4	; 19
 b68:	12 c0       	rjmp	.+36     	; 0xb8e <rotaryEncoderVer1+0x3c>
 b6a:	82 e0       	ldi	r24, 0x02	; 2
 b6c:	08 95       	ret
//			PORTD = volumeMassive[volumeIndex];
			// ---> Clockwise; Zavartane po posoka na chasovnikovata strelka.
		}

	}													// A1. B1
	else if((ENCODER_A_high()) && (ENCODER_B_low()))	// A1, B0
 b6e:	9d 9b       	sbis	0x13, 5	; 19
 b70:	0e c0       	rjmp	.+28     	; 0xb8e <rotaryEncoderVer1+0x3c>
 b72:	9c 99       	sbic	0x13, 4	; 19
 b74:	0c c0       	rjmp	.+24     	; 0xb8e <rotaryEncoderVer1+0x3c>
 b76:	88 ec       	ldi	r24, 0xC8	; 200
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	01 97       	sbiw	r24, 0x01	; 1
 b7c:	f1 f7       	brne	.-4      	; 0xb7a <rotaryEncoderVer1+0x28>
	{
		_delay_us(50);	// delay before next check bits
		if((ENCODER_A_low()) && (ENCODER_B_low()))		// A0, B0
 b7e:	9d 99       	sbic	0x13, 5	; 19
 b80:	06 c0       	rjmp	.+12     	; 0xb8e <rotaryEncoderVer1+0x3c>
 b82:	83 b3       	in	r24, 0x13	; 19
 b84:	82 95       	swap	r24
 b86:	8f 70       	andi	r24, 0x0F	; 15
 b88:	80 95       	com	r24
 b8a:	81 70       	andi	r24, 0x01	; 1
 b8c:	08 95       	ret
 b8e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// do nothing
	}
	return tempEncoder;
}
 b90:	08 95       	ret

00000b92 <rotaryEncoderVer2>:
 b92:	88 ec       	ldi	r24, 0xC8	; 200
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	fc 01       	movw	r30, r24
 b98:	31 97       	sbiw	r30, 0x01	; 1
 b9a:	f1 f7       	brne	.-4      	; 0xb98 <rotaryEncoderVer2+0x6>
 b9c:	fc 01       	movw	r30, r24
 b9e:	31 97       	sbiw	r30, 0x01	; 1
 ba0:	f1 f7       	brne	.-4      	; 0xb9e <rotaryEncoderVer2+0xc>
 ba2:	01 97       	sbiw	r24, 0x01	; 1
 ba4:	f1 f7       	brne	.-4      	; 0xba2 <rotaryEncoderVer2+0x10>
	else
	{
		// do nothing
	}
	return tempEncoder;
}
 ba6:	80 e0       	ldi	r24, 0x00	; 0
 ba8:	08 95       	ret

00000baa <RELAYS_IN_INIT>:
/*********************************************
** INITIZLIZATION OF SHIFT REGISTER 74HC595 **
*********************************************/
void RELAYS_IN_INIT()
{
}
 baa:	08 95       	ret

00000bac <RELAYS_OUT_INIT>:

void RELAYS_OUT_INIT()
{
}
 bac:	08 95       	ret

00000bae <RELAYS_IN_CHOOSE>:

/****************************************************************************************************************
** DEFINITION RELAYS IN FUNCTIONS, WRITE/TRANSMIT 8bits (1Byte) TO SHIFT REGISTER 74HC595 AND CHOOSE RELAYS IN **
****************************************************************************************************************/
void RELAYS_IN_CHOOSE(unsigned char rel_in)	// HELP: RELAYS_IN_CHOOSE(unsigned char byte_of_choosing_combination_of_relay_in) // 74HC595 shift right out, lsb is first
{
 bae:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeLSB = rel_in;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		RELIN_SCK_low();
 bb0:	ae 98       	cbi	0x15, 6	; 21

		if(storeLSB & 0x01)	// maska & za log "1" na LSB 0b00000001
 bb2:	80 ff       	sbrs	r24, 0
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <RELAYS_IN_CHOOSE+0xc>
		{
			RELIN_SDI_high();	// izvejdane na log "1" v MSB	// PORTC |= (1<<RELIN_SDI_PIN);
 bb6:	af 9a       	sbi	0x15, 7	; 21
 bb8:	01 c0       	rjmp	.+2      	; 0xbbc <RELAYS_IN_CHOOSE+0xe>
		}
		else
		{
			RELIN_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
 bba:	af 98       	cbi	0x15, 7	; 21
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno

		RELIN_SCK_high();
 bbc:	ae 9a       	sbi	0x15, 6	; 21
{
	unsigned char storeLSB;
	unsigned char x;
	storeLSB = rel_in;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 bbe:	9f 5f       	subi	r25, 0xFF	; 255
 bc0:	98 30       	cpi	r25, 0x08	; 8
 bc2:	11 f0       	breq	.+4      	; 0xbc8 <RELAYS_IN_CHOOSE+0x1a>
		else
		{
			RELIN_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno
 bc4:	86 95       	lsr	r24
 bc6:	f4 cf       	rjmp	.-24     	; 0xbb0 <RELAYS_IN_CHOOSE+0x2>

		RELIN_SCK_high();
	}

	RELIN_RCK_low();
 bc8:	ab 98       	cbi	0x15, 3	; 21
 bca:	88 ea       	ldi	r24, 0xA8	; 168
 bcc:	92 e0       	ldi	r25, 0x02	; 2
 bce:	fc 01       	movw	r30, r24
 bd0:	31 97       	sbiw	r30, 0x01	; 1
 bd2:	f1 f7       	brne	.-4      	; 0xbd0 <RELAYS_IN_CHOOSE+0x22>
	_delay_us(170);			//rcall 180 us
	RELIN_RCK_high();
 bd4:	ab 9a       	sbi	0x15, 3	; 21
 bd6:	01 97       	sbiw	r24, 0x01	; 1
 bd8:	f1 f7       	brne	.-4      	; 0xbd6 <RELAYS_IN_CHOOSE+0x28>
	_delay_us(170);			//rcall 180 us

}
 bda:	08 95       	ret

00000bdc <relays_in1_2ch>:

void relays_in1_2ch()
{
	RELAYS_IN_CHOOSE(0b00100000);	// RELE 1
 bdc:	80 e2       	ldi	r24, 0x20	; 32
 bde:	0e 94 d7 05 	call	0xbae	; 0xbae <RELAYS_IN_CHOOSE>
}
 be2:	08 95       	ret

00000be4 <relays_in1_6ch>:

void relays_in1_6ch()
{
	RELAYS_IN_CHOOSE(0b01100001);	// RELE 1,2,3
 be4:	81 e6       	ldi	r24, 0x61	; 97
 be6:	0e 94 d7 05 	call	0xbae	; 0xbae <RELAYS_IN_CHOOSE>
}
 bea:	08 95       	ret

00000bec <relays_in2_2ch>:

void relays_in2_2ch()
{
	RELAYS_IN_CHOOSE(0b00001010);	// RELE 4,5
 bec:	8a e0       	ldi	r24, 0x0A	; 10
 bee:	0e 94 d7 05 	call	0xbae	; 0xbae <RELAYS_IN_CHOOSE>
}
 bf2:	08 95       	ret

00000bf4 <relays_in2_6ch>:

void relays_in2_6ch()
{
	RELAYS_IN_CHOOSE(0b10011010);	// RELE 4,5,6,7
 bf4:	8a e9       	ldi	r24, 0x9A	; 154
 bf6:	0e 94 d7 05 	call	0xbae	; 0xbae <RELAYS_IN_CHOOSE>
}
 bfa:	08 95       	ret

00000bfc <relays_in3_2ch>:

void relays_in3_2ch()
{
	RELAYS_IN_CHOOSE(0b00001100);	// RELE 8,5
 bfc:	8c e0       	ldi	r24, 0x0C	; 12
 bfe:	0e 94 d7 05 	call	0xbae	; 0xbae <RELAYS_IN_CHOOSE>
}
 c02:	08 95       	ret

00000c04 <relays_in3_6ch>:

void relays_in3_6ch()
{
	RELAYS_IN_CHOOSE(0b10011100);	// RELE 8,5,6,7
 c04:	8c e9       	ldi	r24, 0x9C	; 156
 c06:	0e 94 d7 05 	call	0xbae	; 0xbae <RELAYS_IN_CHOOSE>
}
 c0a:	08 95       	ret

00000c0c <relays_in_off>:

void relays_in_off()
{
	RELAYS_IN_CHOOSE(0b00000000);	// 0b00000000 // [8][7][6][5][4][3][2][1] // RELETA IZKLIUCHENI 
 c0c:	80 e0       	ldi	r24, 0x00	; 0
 c0e:	0e 94 d7 05 	call	0xbae	; 0xbae <RELAYS_IN_CHOOSE>
}
 c12:	08 95       	ret

00000c14 <relays_in_init>:

void relays_in_init()
{
	RELAYS_IN_CHOOSE(0b00000000);	// 0b00000000 // [8][7][6][5][4][3][2][1] // RELETA IZKLIUCHENI 
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	0e 94 d7 05 	call	0xbae	; 0xbae <RELAYS_IN_CHOOSE>
}
 c1a:	08 95       	ret

00000c1c <RELAYS_OUT_CHOOSE>:
/******************************************************************************************************************
** DEFINITION RELAYS OUT FUNCTIONS, WRITE/TRANSMIT 8bits (1Byte) TO SHIFT REGISTER 74HC595 AND CHOOSE RELAYS OUT **
******************************************************************************************************************/
void RELAYS_OUT_CHOOSE(unsigned char rel_out)	// HELP: RELAYS_OUT_CHOOSE(unsigned char byte_of_choosing_combination_of_relay_in) // 74HC595 shift right out, lsb is first
{
 c1c:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char x;
	storeLSB = rel_out;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
	{
		RELOUT_SCK_low();
 c1e:	96 98       	cbi	0x12, 6	; 18

		if(storeLSB & 0x01)	// maska & za log "1" na LSB 0b00000001
 c20:	80 ff       	sbrs	r24, 0
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <RELAYS_OUT_CHOOSE+0xc>
		{
			RELOUT_SDI_high();	// izvejdane na log "1" v MSB	// PORTC |= (1<<RELIN_SDI_PIN);
 c24:	c4 9a       	sbi	0x18, 4	; 24
 c26:	01 c0       	rjmp	.+2      	; 0xc2a <RELAYS_OUT_CHOOSE+0xe>
		}
		else
		{
			RELOUT_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
 c28:	c4 98       	cbi	0x18, 4	; 24
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno

		RELOUT_SCK_high();
 c2a:	96 9a       	sbi	0x12, 6	; 18
{
	unsigned char storeLSB;
	unsigned char x;
	storeLSB = rel_out;

	for(x=0; x<8; x++)		// cikal za predavane seriino na 1 byte
 c2c:	9f 5f       	subi	r25, 0xFF	; 255
 c2e:	98 30       	cpi	r25, 0x08	; 8
 c30:	11 f0       	breq	.+4      	; 0xc36 <RELAYS_OUT_CHOOSE+0x1a>
		else
		{
			RELOUT_SDI_low();	// izvejdane na log "0" v MSB	// PORTC &= ~(1<<RELIN_SDI_PIN);	
		}
		
		storeLSB = storeLSB >> 1;	// shiftvane na >> nadqsno
 c32:	86 95       	lsr	r24
 c34:	f4 cf       	rjmp	.-24     	; 0xc1e <RELAYS_OUT_CHOOSE+0x2>

		RELOUT_SCK_high();
	}

	RELOUT_RCK_low();
 c36:	97 98       	cbi	0x12, 7	; 18
 c38:	88 ea       	ldi	r24, 0xA8	; 168
 c3a:	92 e0       	ldi	r25, 0x02	; 2
 c3c:	fc 01       	movw	r30, r24
 c3e:	31 97       	sbiw	r30, 0x01	; 1
 c40:	f1 f7       	brne	.-4      	; 0xc3e <RELAYS_OUT_CHOOSE+0x22>
	_delay_us(170);			//rcall 180 us
	RELOUT_RCK_high();
 c42:	97 9a       	sbi	0x12, 7	; 18
 c44:	01 97       	sbiw	r24, 0x01	; 1
 c46:	f1 f7       	brne	.-4      	; 0xc44 <RELAYS_OUT_CHOOSE+0x28>
	_delay_us(170);			//rcall 180 us

}
 c48:	08 95       	ret

00000c4a <relays_out_1ch>:

void relays_out_1ch()
{
	RELAYS_OUT_CHOOSE(0b10000000);	// RELE 1
 c4a:	80 e8       	ldi	r24, 0x80	; 128
 c4c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <RELAYS_OUT_CHOOSE>
}
 c50:	08 95       	ret

00000c52 <relays_out_6ch>:

void relays_out_6ch()
{
	RELAYS_OUT_CHOOSE(0b11111100);	// RELE 1,2,3,4,5,6
 c52:	8c ef       	ldi	r24, 0xFC	; 252
 c54:	0e 94 0e 06 	call	0xc1c	; 0xc1c <RELAYS_OUT_CHOOSE>
}
 c58:	08 95       	ret

00000c5a <relays_out_off>:
void relays_out_off()
{
	RELAYS_OUT_CHOOSE(0b00000000);	// RELE 1,2,3,4,5,6
 c5a:	80 e0       	ldi	r24, 0x00	; 0
 c5c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <RELAYS_OUT_CHOOSE>
}
 c60:	08 95       	ret

00000c62 <relays_out_init>:
void relays_out_init()
{
	RELAYS_OUT_CHOOSE(0b00000000);	// RELE 1,2,3,4,5,6
 c62:	80 e0       	ldi	r24, 0x00	; 0
 c64:	0e 94 0e 06 	call	0xc1c	; 0xc1c <RELAYS_OUT_CHOOSE>
}
 c68:	08 95       	ret

00000c6a <__udivmodqi4>:
 c6a:	99 1b       	sub	r25, r25
 c6c:	79 e0       	ldi	r23, 0x09	; 9
 c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__udivmodqi4_ep>

00000c70 <__udivmodqi4_loop>:
 c70:	99 1f       	adc	r25, r25
 c72:	96 17       	cp	r25, r22
 c74:	08 f0       	brcs	.+2      	; 0xc78 <__udivmodqi4_ep>
 c76:	96 1b       	sub	r25, r22

00000c78 <__udivmodqi4_ep>:
 c78:	88 1f       	adc	r24, r24
 c7a:	7a 95       	dec	r23
 c7c:	c9 f7       	brne	.-14     	; 0xc70 <__udivmodqi4_loop>
 c7e:	80 95       	com	r24
 c80:	08 95       	ret

00000c82 <itoa>:
 c82:	fb 01       	movw	r30, r22
 c84:	9f 01       	movw	r18, r30
 c86:	e8 94       	clt
 c88:	42 30       	cpi	r20, 0x02	; 2
 c8a:	c4 f0       	brlt	.+48     	; 0xcbc <itoa+0x3a>
 c8c:	45 32       	cpi	r20, 0x25	; 37
 c8e:	b4 f4       	brge	.+44     	; 0xcbc <itoa+0x3a>
 c90:	4a 30       	cpi	r20, 0x0A	; 10
 c92:	29 f4       	brne	.+10     	; 0xc9e <itoa+0x1c>
 c94:	97 fb       	bst	r25, 7
 c96:	1e f4       	brtc	.+6      	; 0xc9e <itoa+0x1c>
 c98:	90 95       	com	r25
 c9a:	81 95       	neg	r24
 c9c:	9f 4f       	sbci	r25, 0xFF	; 255
 c9e:	64 2f       	mov	r22, r20
 ca0:	77 27       	eor	r23, r23
 ca2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__udivmodhi4>
 ca6:	80 5d       	subi	r24, 0xD0	; 208
 ca8:	8a 33       	cpi	r24, 0x3A	; 58
 caa:	0c f0       	brlt	.+2      	; 0xcae <itoa+0x2c>
 cac:	89 5d       	subi	r24, 0xD9	; 217
 cae:	81 93       	st	Z+, r24
 cb0:	cb 01       	movw	r24, r22
 cb2:	00 97       	sbiw	r24, 0x00	; 0
 cb4:	a1 f7       	brne	.-24     	; 0xc9e <itoa+0x1c>
 cb6:	16 f4       	brtc	.+4      	; 0xcbc <itoa+0x3a>
 cb8:	5d e2       	ldi	r21, 0x2D	; 45
 cba:	51 93       	st	Z+, r21
 cbc:	10 82       	st	Z, r1
 cbe:	c9 01       	movw	r24, r18
 cc0:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <strrev>

00000cc4 <ltoa>:
 cc4:	fa 01       	movw	r30, r20
 cc6:	cf 93       	push	r28
 cc8:	ff 93       	push	r31
 cca:	ef 93       	push	r30
 ccc:	22 30       	cpi	r18, 0x02	; 2
 cce:	44 f1       	brlt	.+80     	; 0xd20 <ltoa+0x5c>
 cd0:	25 32       	cpi	r18, 0x25	; 37
 cd2:	34 f5       	brge	.+76     	; 0xd20 <ltoa+0x5c>
 cd4:	c2 2f       	mov	r28, r18
 cd6:	e8 94       	clt
 cd8:	ca 30       	cpi	r28, 0x0A	; 10
 cda:	49 f4       	brne	.+18     	; 0xcee <ltoa+0x2a>
 cdc:	97 fb       	bst	r25, 7
 cde:	3e f4       	brtc	.+14     	; 0xcee <ltoa+0x2a>
 ce0:	90 95       	com	r25
 ce2:	80 95       	com	r24
 ce4:	70 95       	com	r23
 ce6:	61 95       	neg	r22
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255
 cea:	8f 4f       	sbci	r24, 0xFF	; 255
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	2c 2f       	mov	r18, r28
 cf0:	33 27       	eor	r19, r19
 cf2:	44 27       	eor	r20, r20
 cf4:	55 27       	eor	r21, r21
 cf6:	ff 93       	push	r31
 cf8:	ef 93       	push	r30
 cfa:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodsi4>
 cfe:	ef 91       	pop	r30
 d00:	ff 91       	pop	r31
 d02:	60 5d       	subi	r22, 0xD0	; 208
 d04:	6a 33       	cpi	r22, 0x3A	; 58
 d06:	0c f0       	brlt	.+2      	; 0xd0a <ltoa+0x46>
 d08:	69 5d       	subi	r22, 0xD9	; 217
 d0a:	61 93       	st	Z+, r22
 d0c:	b9 01       	movw	r22, r18
 d0e:	ca 01       	movw	r24, r20
 d10:	60 50       	subi	r22, 0x00	; 0
 d12:	70 40       	sbci	r23, 0x00	; 0
 d14:	80 40       	sbci	r24, 0x00	; 0
 d16:	90 40       	sbci	r25, 0x00	; 0
 d18:	51 f7       	brne	.-44     	; 0xcee <ltoa+0x2a>
 d1a:	16 f4       	brtc	.+4      	; 0xd20 <ltoa+0x5c>
 d1c:	cd e2       	ldi	r28, 0x2D	; 45
 d1e:	c1 93       	st	Z+, r28
 d20:	10 82       	st	Z, r1
 d22:	8f 91       	pop	r24
 d24:	9f 91       	pop	r25
 d26:	cf 91       	pop	r28
 d28:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <strrev>

00000d2c <ultoa>:
 d2c:	fa 01       	movw	r30, r20
 d2e:	cf 93       	push	r28
 d30:	ff 93       	push	r31
 d32:	ef 93       	push	r30
 d34:	22 30       	cpi	r18, 0x02	; 2
 d36:	cc f0       	brlt	.+50     	; 0xd6a <ultoa+0x3e>
 d38:	25 32       	cpi	r18, 0x25	; 37
 d3a:	bc f4       	brge	.+46     	; 0xd6a <ultoa+0x3e>
 d3c:	c2 2f       	mov	r28, r18
 d3e:	2c 2f       	mov	r18, r28
 d40:	33 27       	eor	r19, r19
 d42:	44 27       	eor	r20, r20
 d44:	55 27       	eor	r21, r21
 d46:	ff 93       	push	r31
 d48:	ef 93       	push	r30
 d4a:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodsi4>
 d4e:	ef 91       	pop	r30
 d50:	ff 91       	pop	r31
 d52:	60 5d       	subi	r22, 0xD0	; 208
 d54:	6a 33       	cpi	r22, 0x3A	; 58
 d56:	0c f0       	brlt	.+2      	; 0xd5a <ultoa+0x2e>
 d58:	69 5d       	subi	r22, 0xD9	; 217
 d5a:	61 93       	st	Z+, r22
 d5c:	b9 01       	movw	r22, r18
 d5e:	ca 01       	movw	r24, r20
 d60:	60 50       	subi	r22, 0x00	; 0
 d62:	70 40       	sbci	r23, 0x00	; 0
 d64:	80 40       	sbci	r24, 0x00	; 0
 d66:	90 40       	sbci	r25, 0x00	; 0
 d68:	51 f7       	brne	.-44     	; 0xd3e <ultoa+0x12>
 d6a:	10 82       	st	Z, r1
 d6c:	8f 91       	pop	r24
 d6e:	9f 91       	pop	r25
 d70:	cf 91       	pop	r28
 d72:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <strrev>

00000d76 <utoa>:
 d76:	fb 01       	movw	r30, r22
 d78:	9f 01       	movw	r18, r30
 d7a:	42 30       	cpi	r20, 0x02	; 2
 d7c:	74 f0       	brlt	.+28     	; 0xd9a <utoa+0x24>
 d7e:	45 32       	cpi	r20, 0x25	; 37
 d80:	64 f4       	brge	.+24     	; 0xd9a <utoa+0x24>
 d82:	64 2f       	mov	r22, r20
 d84:	77 27       	eor	r23, r23
 d86:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__udivmodhi4>
 d8a:	80 5d       	subi	r24, 0xD0	; 208
 d8c:	8a 33       	cpi	r24, 0x3A	; 58
 d8e:	0c f0       	brlt	.+2      	; 0xd92 <utoa+0x1c>
 d90:	89 5d       	subi	r24, 0xD9	; 217
 d92:	81 93       	st	Z+, r24
 d94:	cb 01       	movw	r24, r22
 d96:	00 97       	sbiw	r24, 0x00	; 0
 d98:	a1 f7       	brne	.-24     	; 0xd82 <utoa+0xc>
 d9a:	10 82       	st	Z, r1
 d9c:	c9 01       	movw	r24, r18
 d9e:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <strrev>

00000da2 <strrev>:
 da2:	dc 01       	movw	r26, r24
 da4:	fc 01       	movw	r30, r24
 da6:	67 2f       	mov	r22, r23
 da8:	71 91       	ld	r23, Z+
 daa:	77 23       	and	r23, r23
 dac:	e1 f7       	brne	.-8      	; 0xda6 <strrev+0x4>
 dae:	32 97       	sbiw	r30, 0x02	; 2
 db0:	04 c0       	rjmp	.+8      	; 0xdba <strrev+0x18>
 db2:	7c 91       	ld	r23, X
 db4:	6d 93       	st	X+, r22
 db6:	70 83       	st	Z, r23
 db8:	62 91       	ld	r22, -Z
 dba:	ae 17       	cp	r26, r30
 dbc:	bf 07       	cpc	r27, r31
 dbe:	c8 f3       	brcs	.-14     	; 0xdb2 <strrev+0x10>
 dc0:	08 95       	ret

00000dc2 <__udivmodhi4>:
 dc2:	aa 1b       	sub	r26, r26
 dc4:	bb 1b       	sub	r27, r27
 dc6:	51 e1       	ldi	r21, 0x11	; 17
 dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <__udivmodhi4_ep>

00000dca <__udivmodhi4_loop>:
 dca:	aa 1f       	adc	r26, r26
 dcc:	bb 1f       	adc	r27, r27
 dce:	a6 17       	cp	r26, r22
 dd0:	b7 07       	cpc	r27, r23
 dd2:	10 f0       	brcs	.+4      	; 0xdd8 <__udivmodhi4_ep>
 dd4:	a6 1b       	sub	r26, r22
 dd6:	b7 0b       	sbc	r27, r23

00000dd8 <__udivmodhi4_ep>:
 dd8:	88 1f       	adc	r24, r24
 dda:	99 1f       	adc	r25, r25
 ddc:	5a 95       	dec	r21
 dde:	a9 f7       	brne	.-22     	; 0xdca <__udivmodhi4_loop>
 de0:	80 95       	com	r24
 de2:	90 95       	com	r25
 de4:	bc 01       	movw	r22, r24
 de6:	cd 01       	movw	r24, r26
 de8:	08 95       	ret

00000dea <__udivmodsi4>:
 dea:	a1 e2       	ldi	r26, 0x21	; 33
 dec:	1a 2e       	mov	r1, r26
 dee:	aa 1b       	sub	r26, r26
 df0:	bb 1b       	sub	r27, r27
 df2:	fd 01       	movw	r30, r26
 df4:	0d c0       	rjmp	.+26     	; 0xe10 <__udivmodsi4_ep>

00000df6 <__udivmodsi4_loop>:
 df6:	aa 1f       	adc	r26, r26
 df8:	bb 1f       	adc	r27, r27
 dfa:	ee 1f       	adc	r30, r30
 dfc:	ff 1f       	adc	r31, r31
 dfe:	a2 17       	cp	r26, r18
 e00:	b3 07       	cpc	r27, r19
 e02:	e4 07       	cpc	r30, r20
 e04:	f5 07       	cpc	r31, r21
 e06:	20 f0       	brcs	.+8      	; 0xe10 <__udivmodsi4_ep>
 e08:	a2 1b       	sub	r26, r18
 e0a:	b3 0b       	sbc	r27, r19
 e0c:	e4 0b       	sbc	r30, r20
 e0e:	f5 0b       	sbc	r31, r21

00000e10 <__udivmodsi4_ep>:
 e10:	66 1f       	adc	r22, r22
 e12:	77 1f       	adc	r23, r23
 e14:	88 1f       	adc	r24, r24
 e16:	99 1f       	adc	r25, r25
 e18:	1a 94       	dec	r1
 e1a:	69 f7       	brne	.-38     	; 0xdf6 <__udivmodsi4_loop>
 e1c:	60 95       	com	r22
 e1e:	70 95       	com	r23
 e20:	80 95       	com	r24
 e22:	90 95       	com	r25
 e24:	9b 01       	movw	r18, r22
 e26:	ac 01       	movw	r20, r24
 e28:	bd 01       	movw	r22, r26
 e2a:	cf 01       	movw	r24, r30
 e2c:	08 95       	ret

00000e2e <_exit>:
 e2e:	f8 94       	cli

00000e30 <__stop_program>:
 e30:	ff cf       	rjmp	.-2      	; 0xe30 <__stop_program>
